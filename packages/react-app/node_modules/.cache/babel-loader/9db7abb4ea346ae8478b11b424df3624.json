{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../../useOnRepetition\";\n/**\n * Get the balance of an ERC20 token in an address\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param contract (ethers->Contract) contract object for the ERC20 token\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (BigNumber) :: balance\n */\n\nexport var useTokenBalance = function useTokenBalance(contract, address) {\n  var pollTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _useState = useState(BigNumber.from(0)),\n      _useState2 = _slicedToArray(_useState, 2),\n      balance = _useState2[0],\n      setBalance = _useState2[1];\n\n  var pollBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var newBalance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(contract != null)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return contract.balanceOf(address);\n\n          case 4:\n            newBalance = _context.sent;\n\n            if (newBalance !== balance) {\n              setBalance(newBalance);\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log('⚠ Could not get token balance', _context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 8]]);\n  })), [address, balance, contract]);\n  useOnRepetition(pollBalance, {\n    pollTime: pollTime,\n    leadingTrigger: (contract === null || contract === void 0 ? void 0 : contract.provider) != null\n  });\n  return balance;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/erc/erc-20/useTokenBalance.js"],"names":["BigNumber","useCallback","useState","useOnRepetition","useTokenBalance","contract","address","pollTime","from","balance","setBalance","pollBalance","balanceOf","newBalance","console","log","leadingTrigger","provider"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,OAAX,EAAqC;AAAA,MAAjBC,QAAiB,uEAAN,CAAM;;AAChE,kBAA8BL,QAAQ,CAACF,SAAS,CAACQ,IAAV,CAAe,CAAf,CAAD,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,WAAW,GAAGV,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACxBI,QAAQ,IAAI,IADY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAIKA,QAAQ,CAACO,SAAT,CAAmBN,OAAnB,CAJL;;AAAA;AAIdO,YAAAA,UAJc;;AAKpB,gBAAIA,UAAU,KAAKJ,OAAnB,EAA4B;AACxBC,cAAAA,UAAU,CAACG,UAAD,CAAV;AACH;;AAPmB;AAAA;;AAAA;AAAA;AAAA;AAUpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AAVoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAa5B,CAACT,OAAD,EAAUG,OAAV,EAAmBJ,QAAnB,CAb4B,CAA/B;AAcAF,EAAAA,eAAe,CAACQ,WAAD,EAAc;AAAEJ,IAAAA,QAAQ,EAARA,QAAF;AAAYS,IAAAA,cAAc,EAAE,CAACX,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACY,QAA9D,KAA2E;AAAvG,GAAd,CAAf;AACA,SAAOR,OAAP;AACH,CAlBM","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../../useOnRepetition\";\n/**\n * Get the balance of an ERC20 token in an address\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param contract (ethers->Contract) contract object for the ERC20 token\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (BigNumber) :: balance\n */\nexport const useTokenBalance = (contract, address, pollTime = 0) => {\n    const [balance, setBalance] = useState(BigNumber.from(0));\n    const pollBalance = useCallback(async () => {\n        if (contract != null) {\n            try {\n                // eslint-disable-next-line\n                const newBalance = await contract.balanceOf(address);\n                if (newBalance !== balance) {\n                    setBalance(newBalance);\n                }\n            }\n            catch (e) {\n                console.log('⚠ Could not get token balance', e);\n            }\n        }\n    }, [address, balance, contract]);\n    useOnRepetition(pollBalance, { pollTime, leadingTrigger: (contract === null || contract === void 0 ? void 0 : contract.provider) != null });\n    return balance;\n};\n"]},"metadata":{},"sourceType":"module"}