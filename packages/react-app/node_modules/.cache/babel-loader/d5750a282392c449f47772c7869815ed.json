{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/kiwik/packages/react-app/src/components/Faucet.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _require = require(\"ethers\"),\n    utils = _require.utils; // improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\n\nexport default function Faucet(props) {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      faucetAddress = _useState4[0],\n      setFaucetAddress = _useState4[1];\n\n  var price = props.price,\n      placeholder = props.placeholder,\n      localProvider = props.localProvider,\n      ensProvider = props.ensProvider;\n  useEffect(function () {\n    var getFaucetAddress = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _faucetAddress;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!localProvider) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return localProvider.listAccounts();\n\n              case 3:\n                _faucetAddress = _context.sent;\n                setFaucetAddress(_faucetAddress[0]);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getFaucetAddress() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getFaucetAddress();\n  }, [localProvider]);\n  var blockie;\n\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/_jsxDEV(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this);\n  } else {\n    blockie = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  var updateAddress = function updateAddress(newValue) {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  var tx = Transactor(localProvider);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      size: \"large\",\n      placeholder: placeholder ? placeholder : \"local faucet\",\n      prefix: blockie,\n      value: address,\n      onChange: function onChange(e) {\n        return updateAddress(e.target.value);\n      },\n      suffix: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Faucet: Send local ether to an address.\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: function onClick() {\n            tx({\n              to: address,\n              value: utils.parseEther(\"0.01\")\n            });\n            setAddress(\"\");\n          },\n          shape: \"circle\",\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          color: \"#888888\",\n          provider: localProvider,\n          ensProvider: ensProvider,\n          price: price,\n          address: faucetAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Faucet, \"+xruEZHsvd3TnqG43qbcrQdbPLk=\");\n\n_c = Faucet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Faucet\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/components/Faucet.jsx"],"names":["Button","Input","Tooltip","React","useState","useEffect","Blockies","SendOutlined","Transactor","Wallet","require","utils","Faucet","props","address","setAddress","faucetAddress","setFaucetAddress","price","placeholder","localProvider","ensProvider","getFaucetAddress","listAccounts","_faucetAddress","blockie","toLowerCase","updateAddress","newValue","isAddress","tx","e","target","value","to","parseEther"],"mappings":"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","sourcesContent":["import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}