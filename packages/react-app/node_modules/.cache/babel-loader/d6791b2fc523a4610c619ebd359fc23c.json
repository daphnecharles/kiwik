{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nvar DEBUG = false;\n/**\n * A combination of useOnBlock and usePoller\n * helper hook to call a function regularly at time intervals when the block changes\n * @param provider ethers/web3 provider\n * @param callback any function\n * @param args function parameters\n */\n\n/**\n * A combination of useOnBlock and usePoller\n * - the hook will invoke a callback regularly on the \"block\" event.  If a pollTime is provided,\n * it will use that instead.\n * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation\n * @param callback (func) :: callback funciton, can have variable args\n * @param options (TOptions)\n * @param args varargs callback function arguments\n */\n\nexport var useOnRepetition = function useOnRepetition(callback, options) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var polling = (options === null || options === void 0 ? void 0 : options.pollTime) && options.pollTime > 0;\n  var leadingCall = useRef(true); // created a strigified args to use for deps\n\n  var argDeps = JSON.stringify(args !== null && args !== void 0 ? args : []); // save the input function provided\n\n  var callFunctionWithArgs = useCallback(function () {\n    if (callback) {\n      if (args && args.length > 0) {\n        void callback.apply(void 0, args);\n      } else {\n        void callback();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [callback, argDeps, args]); // Turn on the listener if we have a function & a provider\n\n  var listener = useCallback(function (_blockNumber) {\n    if (options.provider) callFunctionWithArgs();\n  }, [callFunctionWithArgs, options.provider]); // connect a listener for block changes\n\n  useEffect(function () {\n    if (options.provider && !polling) {\n      var _console;\n\n      if (DEBUG) (_console = console).log.apply(_console, ['register block event'].concat(args));\n      options.provider.addListener('block', listener);\n      return function () {\n        var _console2;\n\n        var _a;\n\n        if (DEBUG) (_console2 = console).log.apply(_console2, ['unregister block event'].concat(args));\n        (_a = options === null || options === void 0 ? void 0 : options.provider) === null || _a === void 0 ? void 0 : _a.removeListener('block', listener);\n      };\n    } else {\n      return function () {\n        /* do nothing */\n      };\n    }\n  }, [options.provider, polling, listener, args]); // Set up the interval if its using polling\n\n  useEffect(function () {\n    var tick = function tick() {\n      if (DEBUG) console.log('polling: call function');\n      callFunctionWithArgs();\n    };\n\n    if (polling && (options === null || options === void 0 ? void 0 : options.pollTime)) {\n      var safePollTime = (options === null || options === void 0 ? void 0 : options.pollTime) > 10000 ? options.pollTime : 10000;\n      var id = setInterval(tick, safePollTime);\n      return function () {\n        clearInterval(id);\n      };\n    }\n  }, [options.pollTime, polling, callFunctionWithArgs]); // call if triggered by extra watch, however only on inital call\n\n  useEffect(function () {\n    if (options.leadingTrigger && callFunctionWithArgs != null && (leadingCall === null || leadingCall === void 0 ? void 0 : leadingCall.current) === true) {\n      leadingCall.current = false;\n      callFunctionWithArgs();\n    }\n  }, [options.leadingTrigger, callFunctionWithArgs]);\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useOnRepetition.js"],"names":["useCallback","useEffect","useRef","DEBUG","useOnRepetition","callback","options","args","polling","pollTime","leadingCall","argDeps","JSON","stringify","callFunctionWithArgs","length","listener","_blockNumber","provider","console","log","addListener","_a","removeListener","tick","safePollTime","id","setInterval","clearInterval","leadingTrigger","current"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nconst DEBUG = false;\n/**\n * A combination of useOnBlock and usePoller\n * helper hook to call a function regularly at time intervals when the block changes\n * @param provider ethers/web3 provider\n * @param callback any function\n * @param args function parameters\n */\n/**\n * A combination of useOnBlock and usePoller\n * - the hook will invoke a callback regularly on the \"block\" event.  If a pollTime is provided,\n * it will use that instead.\n * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation\n * @param callback (func) :: callback funciton, can have variable args\n * @param options (TOptions)\n * @param args varargs callback function arguments\n */\nexport const useOnRepetition = (callback, options, ...args) => {\n    const polling = (options === null || options === void 0 ? void 0 : options.pollTime) && options.pollTime > 0;\n    const leadingCall = useRef(true);\n    // created a strigified args to use for deps\n    const argDeps = JSON.stringify(args !== null && args !== void 0 ? args : []);\n    // save the input function provided\n    const callFunctionWithArgs = useCallback(() => {\n        if (callback) {\n            if (args && args.length > 0) {\n                void callback(...args);\n            }\n            else {\n                void callback();\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [callback, argDeps, args]);\n    // Turn on the listener if we have a function & a provider\n    const listener = useCallback((_blockNumber) => {\n        if (options.provider)\n            callFunctionWithArgs();\n    }, [callFunctionWithArgs, options.provider]);\n    // connect a listener for block changes\n    useEffect(() => {\n        if (options.provider && !polling) {\n            if (DEBUG)\n                console.log('register block event', ...args);\n            options.provider.addListener('block', listener);\n            return () => {\n                var _a;\n                if (DEBUG)\n                    console.log('unregister block event', ...args);\n                (_a = options === null || options === void 0 ? void 0 : options.provider) === null || _a === void 0 ? void 0 : _a.removeListener('block', listener);\n            };\n        }\n        else {\n            return () => {\n                /* do nothing */\n            };\n        }\n    }, [options.provider, polling, listener, args]);\n    // Set up the interval if its using polling\n    useEffect(() => {\n        const tick = () => {\n            if (DEBUG)\n                console.log('polling: call function');\n            callFunctionWithArgs();\n        };\n        if (polling && (options === null || options === void 0 ? void 0 : options.pollTime)) {\n            const safePollTime = (options === null || options === void 0 ? void 0 : options.pollTime) > 10000 ? options.pollTime : 10000;\n            const id = setInterval(tick, safePollTime);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [options.pollTime, polling, callFunctionWithArgs]);\n    // call if triggered by extra watch, however only on inital call\n    useEffect(() => {\n        if (options.leadingTrigger && callFunctionWithArgs != null && (leadingCall === null || leadingCall === void 0 ? void 0 : leadingCall.current) === true) {\n            leadingCall.current = false;\n            callFunctionWithArgs();\n        }\n    }, [options.leadingTrigger, callFunctionWithArgs]);\n};\n"]},"metadata":{},"sourceType":"module"}