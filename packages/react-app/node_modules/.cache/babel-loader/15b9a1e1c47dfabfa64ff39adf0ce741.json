{"ast":null,"code":"\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\"; ////////////////////////\n// Enums\n\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\"; ////////////////////////\n// Exports\n\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, ////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };","map":{"version":3,"sources":["../src.ts/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n////////////////////////\n// Enums\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\n////////////////////////\n// Exports\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, \n////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}