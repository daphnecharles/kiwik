{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Defines jumpToLine command. Uses dialog.js if present.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // default search panel location\n\n  CodeMirror.defineOption(\"search\", {\n    bottom: false\n  });\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {\n      value: deflt,\n      selectValueOnOpen: true,\n      bottom: cm.options.search.bottom\n    });else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string);\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num;else return num - 1;\n  }\n\n  CodeMirror.commands.jumpToLine = function (cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), cur.line + 1 + \":\" + cur.ch, function (posStr) {\n      if (!posStr) return;\n      var match;\n\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]));\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/codemirror/addon/search/jump-to-line.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","bottom","dialog","cm","text","shortText","deflt","f","openDialog","value","selectValueOnOpen","options","search","prompt","getJumpDialog","phrase","interpretLine","string","num","Number","test","getCursor","line","commands","jumpToLine","cur","ch","posStr","match","exec","setCursor","Math","round","lineCount","keyMap"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"]},"metadata":{},"sourceType":"script"}