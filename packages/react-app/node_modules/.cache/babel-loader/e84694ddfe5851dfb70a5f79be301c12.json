{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar varint = require('./varint.js');\n\nvar digest = require('./hashes/digest.js');\n\nvar base58 = require('./bases/base58.js');\n\nvar base32 = require('./bases/base32.js');\n\nvar bytes = require('./bytes.js');\n\nvar CID = /*#__PURE__*/function () {\n  function CID(version, code, multihash, bytes) {\n    _classCallCheck(this, CID);\n\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n\n  _createClass(CID, [{\n    key: \"toV0\",\n    value: function toV0() {\n      switch (this.version) {\n        case 0:\n          {\n            return this;\n          }\n\n        default:\n          {\n            var code = this.code,\n                multihash = this.multihash;\n\n            if (code !== DAG_PB_CODE) {\n              throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n            }\n\n            if (multihash.code !== SHA_256_CODE) {\n              throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n            }\n\n            return CID.createV0(multihash);\n          }\n      }\n    }\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      switch (this.version) {\n        case 0:\n          {\n            var _this$multihash = this.multihash,\n                code = _this$multihash.code,\n                digest$1 = _this$multihash.digest;\n            var multihash = digest.create(code, digest$1);\n            return CID.createV1(this.code, multihash);\n          }\n\n        case 1:\n          {\n            return this;\n          }\n\n        default:\n          {\n            throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n          }\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      var bytes = this.bytes,\n          version = this.version,\n          _baseCache = this._baseCache;\n\n      switch (version) {\n        case 0:\n          return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n\n        default:\n          return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.code,\n        version: this.version,\n        hash: this.multihash.bytes\n      };\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'CID';\n    }\n  }, {\n    key: Symbol.for('nodejs.util.inspect.custom'),\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n  }, {\n    key: \"toBaseEncodedString\",\n    get: function get() {\n      throw new Error('Deprecated, use .toString()');\n    }\n  }, {\n    key: \"codec\",\n    get: function get() {\n      throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n    }\n  }, {\n    key: \"multibaseName\",\n    get: function get() {\n      throw new Error('\"multibaseName\" property is deprecated');\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      throw new Error('\"prefix\" property is deprecated');\n    }\n  }], [{\n    key: \"isCID\",\n    value: function isCID(value) {\n      deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n      return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n  }, {\n    key: \"asCID\",\n    value: function asCID(value) {\n      if (value instanceof CID) {\n        return value;\n      } else if (value != null && value.asCID === value) {\n        var _version = value.version,\n            code = value.code,\n            multihash = value.multihash,\n            _bytes = value.bytes;\n        return new CID(_version, code, multihash, _bytes || encodeCID(_version, code, multihash.bytes));\n      } else if (value != null && value[cidSymbol] === true) {\n        var _version2 = value.version,\n            _multihash = value.multihash,\n            _code = value.code;\n        var digest$1 = digest.decode(_multihash);\n        return CID.create(_version2, _code, digest$1);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(version, code, digest) {\n      if (typeof code !== 'number') {\n        throw new Error('String codecs are no longer supported');\n      }\n\n      switch (version) {\n        case 0:\n          {\n            if (code !== DAG_PB_CODE) {\n              throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n            } else {\n              return new CID(version, code, digest, digest.bytes);\n            }\n          }\n\n        case 1:\n          {\n            var _bytes2 = encodeCID(version, code, digest.bytes);\n\n            return new CID(version, code, digest, _bytes2);\n          }\n\n        default:\n          {\n            throw new Error('Invalid version');\n          }\n      }\n    }\n  }, {\n    key: \"createV0\",\n    value: function createV0(digest) {\n      return CID.create(0, DAG_PB_CODE, digest);\n    }\n  }, {\n    key: \"createV1\",\n    value: function createV1(code, digest) {\n      return CID.create(1, code, digest);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes) {\n      var _CID$decodeFirst = CID.decodeFirst(bytes),\n          _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n          cid = _CID$decodeFirst2[0],\n          remainder = _CID$decodeFirst2[1];\n\n      if (remainder.length) {\n        throw new Error('Incorrect length');\n      }\n\n      return cid;\n    }\n  }, {\n    key: \"decodeFirst\",\n    value: function decodeFirst(bytes$1) {\n      var specs = CID.inspectBytes(bytes$1);\n      var prefixSize = specs.size - specs.multihashSize;\n      var multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n\n      if (multihashBytes.byteLength !== specs.multihashSize) {\n        throw new Error('Incorrect length');\n      }\n\n      var digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n      var digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n      var cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n      return [cid, bytes$1.subarray(specs.size)];\n    }\n  }, {\n    key: \"inspectBytes\",\n    value: function inspectBytes(initialBytes) {\n      var offset = 0;\n\n      var next = function next() {\n        var _varint$decode = varint.decode(initialBytes.subarray(offset)),\n            _varint$decode2 = _slicedToArray(_varint$decode, 2),\n            i = _varint$decode2[0],\n            length = _varint$decode2[1];\n\n        offset += length;\n        return i;\n      };\n\n      var version = next();\n      var codec = DAG_PB_CODE;\n\n      if (version === 18) {\n        version = 0;\n        offset = 0;\n      } else if (version === 1) {\n        codec = next();\n      }\n\n      if (version !== 0 && version !== 1) {\n        throw new RangeError(\"Invalid CID version \".concat(version));\n      }\n\n      var prefixSize = offset;\n      var multihashCode = next();\n      var digestSize = next();\n      var size = offset + digestSize;\n      var multihashSize = size - prefixSize;\n      return {\n        version: version,\n        codec: codec,\n        multihashCode: multihashCode,\n        digestSize: digestSize,\n        multihashSize: multihashSize,\n        size: size\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(source, base) {\n      var _parseCIDtoBytes = parseCIDtoBytes(source, base),\n          _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n          prefix = _parseCIDtoBytes2[0],\n          bytes = _parseCIDtoBytes2[1];\n\n      var cid = CID.decode(bytes);\n\n      cid._baseCache.set(prefix, source);\n\n      return cid;\n    }\n  }]);\n\n  return CID;\n}();\n\nvar parseCIDtoBytes = function parseCIDtoBytes(source, base) {\n  switch (source[0]) {\n    case 'Q':\n      {\n        var decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(\"\".concat(base58.base58btc.prefix).concat(source))];\n      }\n\n    case base58.base58btc.prefix:\n      {\n        var _decoder = base || base58.base58btc;\n\n        return [base58.base58btc.prefix, _decoder.decode(source)];\n      }\n\n    case base32.base32.prefix:\n      {\n        var _decoder2 = base || base32.base32;\n\n        return [base32.base32.prefix, _decoder2.decode(source)];\n      }\n\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n\n        return [source[0], base.decode(source)];\n      }\n  }\n};\n\nvar toStringV0 = function toStringV0(bytes, cache, base) {\n  var prefix = base.prefix;\n\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid = base.encode(bytes).slice(1);\n\n    cache.set(prefix, _cid);\n    return _cid;\n  } else {\n    return cid;\n  }\n};\n\nvar toStringV1 = function toStringV1(bytes, cache, base) {\n  var prefix = base.prefix;\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid2 = base.encode(bytes);\n\n    cache.set(prefix, _cid2);\n    return _cid2;\n  } else {\n    return cid;\n  }\n};\n\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\n\nvar encodeCID = function encodeCID(version, code, multihash) {\n  var codeOffset = varint.encodingLength(version);\n  var hashOffset = codeOffset + varint.encodingLength(code);\n  var bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\n\nvar cidSymbol = Symbol.for('@ipld/js-cid/CID');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = '0.0.0-dev';\n\nvar deprecate = function deprecate(range, message) {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\n\nvar IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\nexports.CID = CID;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/multiformats/cjs/src/cid.js"],"names":["Object","defineProperty","exports","value","varint","require","digest","base58","base32","bytes","CID","version","code","multihash","byteOffset","byteLength","asCID","_baseCache","Map","defineProperties","hidden","readonly","DAG_PB_CODE","Error","SHA_256_CODE","createV0","digest$1","create","createV1","other","equals","base","toStringV0","base58btc","encoder","toStringV1","hash","Symbol","toStringTag","for","toString","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","decode","decodeFirst","cid","remainder","length","bytes$1","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","coerce","subarray","digestBytes","digestSize","Digest","multihashCode","codec","initialBytes","offset","next","i","RangeError","source","parseCIDtoBytes","prefix","set","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest: digest$1} = this.multihash;\n        const multihash = digest.create(code, digest$1);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [\n      cid,\n      bytes$1.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58.base58btc.prefix: {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.base32.prefix: {\n      const decoder = base || base32.base32;\n      return [\n        base32.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\nexports.CID = CID;\n"]},"metadata":{},"sourceType":"script"}