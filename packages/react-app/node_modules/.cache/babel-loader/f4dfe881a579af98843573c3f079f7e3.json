{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar util = require('./util');\n\nvar abi = require('./abi');\n\nvar TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * A collection of utility functions used for signing typed data\n */\n\nvar TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData: function encodeData(primaryType, data, types) {\n    var _this = this;\n\n    var useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var encodedTypes = ['bytes32'];\n    var encodedValues = [this.hashType(primaryType, types)];\n\n    if (useV4) {\n      var encodeField = function encodeField(name, type, value) {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null ? '0x0000000000000000000000000000000000000000000000000000000000000000' : util.keccak(_this.encodeData(type, value, types, useV4))];\n        }\n\n        if (value === undefined) throw new Error(\"missing value for field \".concat(name, \" of type \").concat(type));\n\n        if (type === 'bytes') {\n          return ['bytes32', util.keccak(value)];\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n\n          return ['bytes32', util.keccak(value)];\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          var parsedType = type.slice(0, type.lastIndexOf('['));\n          var typeValuePairs = value.map(function (item) {\n            return encodeField(name, parsedType, item);\n          });\n          return ['bytes32', util.keccak(abi.rawEncode(typeValuePairs.map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 1),\n                type = _ref2[0];\n\n            return type;\n          }), typeValuePairs.map(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                value = _ref4[1];\n\n            return value;\n          })))];\n        }\n\n        return [type, value];\n      };\n\n      var _iterator = _createForOfIteratorHelper(types[primaryType]),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n\n          var _encodeField = encodeField(field.name, field.type, data[field.name]),\n              _encodeField2 = _slicedToArray(_encodeField, 2),\n              type = _encodeField2[0],\n              value = _encodeField2[1];\n\n          encodedTypes.push(type);\n          encodedValues.push(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else {\n      var _iterator2 = _createForOfIteratorHelper(types[primaryType]),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _field = _step2.value;\n          var _value = data[_field.name];\n\n          if (_value !== undefined) {\n            if (_field.type === 'bytes') {\n              encodedTypes.push('bytes32');\n              _value = util.keccak(_value);\n              encodedValues.push(_value);\n            } else if (_field.type === 'string') {\n              encodedTypes.push('bytes32'); // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n\n              if (typeof _value === 'string') {\n                _value = Buffer.from(_value, 'utf8');\n              }\n\n              _value = util.keccak(_value);\n              encodedValues.push(_value);\n            } else if (types[_field.type] !== undefined) {\n              encodedTypes.push('bytes32');\n              _value = util.keccak(this.encodeData(_field.type, _value, types, useV4));\n              encodedValues.push(_value);\n            } else if (_field.type.lastIndexOf(']') === _field.type.length - 1) {\n              throw new Error('Arrays currently unimplemented in encodeData');\n            } else {\n              encodedTypes.push(_field.type);\n              encodedValues.push(_value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return abi.rawEncode(encodedTypes, encodedValues);\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType: function encodeType(primaryType, types) {\n    var result = '';\n    var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) {\n      return dep !== primaryType;\n    });\n    deps = [primaryType].concat(deps.sort());\n\n    var _iterator3 = _createForOfIteratorHelper(deps),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var type = _step3.value;\n        var children = types[type];\n\n        if (!children) {\n          throw new Error('No type definition specified: ' + type);\n        }\n\n        result += type + '(' + types[type].map(function (_ref5) {\n          var name = _ref5.name,\n              type = _ref5.type;\n          return type + ' ' + name;\n        }).join(',') + ')';\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return result;\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies: function findTypeDependencies(primaryType, types) {\n    var results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    primaryType = primaryType.match(/^\\w*/)[0];\n\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n\n    results.push(primaryType);\n\n    var _iterator4 = _createForOfIteratorHelper(types[primaryType]),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var field = _step4.value;\n\n        var _iterator5 = _createForOfIteratorHelper(this.findTypeDependencies(field.type, types, results)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var dep = _step5.value;\n            !results.includes(dep) && results.push(dep);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return results;\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct: function hashStruct(primaryType, data, types) {\n    var useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return util.keccak(this.encodeData(primaryType, data, types, useV4));\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType: function hashType(primaryType, types) {\n    return util.keccak(this.encodeType(primaryType, types));\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData: function sanitizeData(data) {\n    var sanitizedData = {};\n\n    for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key]);\n    }\n\n    if (sanitizedData.types) {\n      sanitizedData.types = Object.assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n\n    return sanitizedData;\n  },\n\n  /**\n   * Returns the hash of a typed message as per EIP-712 for signing\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash for signing\n   */\n  hash: function hash(typedData) {\n    var useV4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var sanitizedData = this.sanitizeData(typedData);\n    var parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n\n    return util.keccak(Buffer.concat(parts));\n  }\n};\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA: TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils: TypedDataUtils,\n  hashForSignTypedDataLegacy: function hashForSignTypedDataLegacy(msgParams) {\n    return typedSignatureHashLegacy(msgParams.data);\n  },\n  hashForSignTypedData_v3: function hashForSignTypedData_v3(msgParams) {\n    return TypedDataUtils.hash(msgParams.data, false);\n  },\n  hashForSignTypedData_v4: function hashForSignTypedData_v4(msgParams) {\n    return TypedDataUtils.hash(msgParams.data);\n  }\n};\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction typedSignatureHashLegacy(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !typedData.length) throw error;\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? util.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) throw error;\n    return e.type + ' ' + e.name;\n  });\n  return abi.soliditySHA3(['bytes32', 'bytes32'], [abi.soliditySHA3(new Array(typedData.length).fill('string'), schema), abi.soliditySHA3(types, data)]);\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/walletlink/dist/vendor-js/eth-eip712-util/index.js"],"names":["util","require","abi","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","TypedDataUtils","encodeData","data","useV4","encodedTypes","encodedValues","hashType","encodeField","value","undefined","keccak","Error","Buffer","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","rawEncode","field","push","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","Object","assign","EIP712Domain","hash","typedData","parts","module","exports","hashForSignTypedDataLegacy","msgParams","typedSignatureHashLegacy","hashForSignTypedData_v3","hashForSignTypedData_v4","error","e","toBuffer","schema","soliditySHA3","Array","fill"],"mappings":"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","sourcesContent":["const util = require('./util')\nconst abi = require('./abi')\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {type: 'string'},\n            type: {type: 'string'},\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: {type: 'string'},\n    domain: {type: 'object'},\n    message: {type: 'object'},\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    if(useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null ?\n            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n            util.keccak(this.encodeData(type, value, types, useV4))]\n        }\n\n        if(value === undefined)\n          throw new Error(`missing value for field ${name} of type ${type}`)\n\n        if (type === 'bytes') {\n          return ['bytes32', util.keccak(value)]\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          return ['bytes32', util.keccak(value)]\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['))\n          const typeValuePairs = value.map(item =>\n            encodeField(name, parsedType, item))\n          return ['bytes32', util.keccak(abi.rawEncode(\n            typeValuePairs.map(([type]) => type),\n            typeValuePairs.map(([, value]) => value),\n          ))]\n        }\n\n        return [type, value]\n      }\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name])\n        encodedTypes.push(type)\n        encodedValues.push(value)\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name]\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32')\n            value = util.keccak(value)\n            encodedValues.push(value)\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32')\n            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8')\n            }\n            value = util.keccak(value)\n            encodedValues.push(value)\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32')\n            value = util.keccak(this.encodeData(field.type, value, types, useV4))\n            encodedValues.push(value)\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData')\n          } else {\n            encodedTypes.push(field.type)\n            encodedValues.push(value)\n          }\n        }\n      }\n    }\n\n    return abi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error('No type definition specified: ' + type)\n      }\n      result += type + '(' + types[type].map(({ name, type }) => type + ' ' + name).join(',') + ')'\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    primaryType = primaryType.match(/^\\w*/)[0]\n    if (results.includes(primaryType) || types[primaryType] === undefined) { return results }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct (primaryType, data, types, useV4 = true) {\n    return util.keccak(this.encodeData(primaryType, data, types, useV4))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return util.keccak(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    if (sanitizedData.types) {\n      sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types)\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Returns the hash of a typed message as per EIP-712 for signing\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash for signing\n   */\n  hash (typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4))\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4))\n    }\n    return util.keccak(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  hashForSignTypedDataLegacy: function (msgParams) {\n    return typedSignatureHashLegacy(msgParams.data)\n  },\n\n  hashForSignTypedData_v3: function (msgParams) {\n    return TypedDataUtils.hash(msgParams.data, false)\n  },\n\n  hashForSignTypedData_v4: function (msgParams) {\n    return TypedDataUtils.hash(msgParams.data)\n  },\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHashLegacy(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? util.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return abi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      abi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      abi.soliditySHA3(types, data)\n    ]\n  )\n}\n"]},"metadata":{},"sourceType":"script"}