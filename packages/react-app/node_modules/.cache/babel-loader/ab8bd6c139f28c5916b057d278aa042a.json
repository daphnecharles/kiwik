{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict'; //\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n\n/* eslint-disable no-script-url */\n// protocols that never have a hostname.\nhostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\n/* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) {\n    return url;\n  }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, slashesDenoteHost) {\n  var i,\n      l,\n      lowerProto,\n      hec,\n      slashes,\n      rest = url; // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  } // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') {\n      hostEnd--;\n    }\n\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost(host); // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n\n    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n\n        if (!part) {\n          continue;\n        }\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n\n  if (rest) {\n    this.pathname = rest;\n  }\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function (host) {\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) {\n    this.hostname = host;\n  }\n};\n\nmodule.exports = urlParse;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/mdurl/parse.js"],"names":["Url","protocol","slashes","auth","port","hostname","hash","search","pathname","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","hostlessProtocol","slashedProtocol","urlParse","url","slashesDenoteHost","u","parse","prototype","i","l","lowerProto","hec","rest","trim","split","length","simplePath","exec","proto","toLowerCase","substr","match","hostEnd","indexOf","atSign","lastIndexOf","slice","host","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","join","qm","module","exports"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n"]},"metadata":{},"sourceType":"script"}