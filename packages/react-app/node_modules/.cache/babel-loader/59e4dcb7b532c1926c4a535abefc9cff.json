{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/kiwik/packages/react-app/src/components/EtherInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\"; // small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EtherInput(props) {\n  _s();\n\n  var _useState = useState(props.price ? \"USD\" : \"ETH\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mode = _useState2[0],\n      setMode = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      display = _useState4[0],\n      setDisplay = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  useEffect(function () {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n  return /*#__PURE__*/_jsxDEV(Input, {\n    placeholder: props.placeholder ? props.placeholder : \"amount in \" + mode,\n    autoFocus: props.autoFocus,\n    prefix: mode === \"USD\" ? \"$\" : \"Îž\",\n    value: display,\n    addonAfter: !props.price ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        if (mode === \"USD\") {\n          setMode(\"ETH\");\n          setDisplay(currentValue);\n        } else {\n          setMode(\"USD\");\n\n          if (currentValue) {\n            var usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n            setDisplay(usdValue);\n          } else {\n            setDisplay(currentValue);\n          }\n        }\n      },\n      children: mode === \"USD\" ? \"USD ðŸ”€\" : \"ETH ðŸ”€\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this),\n    onChange: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var newValue, possibleNewValue, ethValue;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                newValue = e.target.value;\n\n                if (mode === \"USD\") {\n                  possibleNewValue = parseFloat(newValue);\n\n                  if (possibleNewValue) {\n                    ethValue = possibleNewValue / props.price;\n                    setValue(ethValue);\n\n                    if (typeof props.onChange === \"function\") {\n                      props.onChange(ethValue);\n                    }\n\n                    setDisplay(newValue);\n                  } else {\n                    setDisplay(newValue);\n                  }\n                } else {\n                  setValue(newValue);\n\n                  if (typeof props.onChange === \"function\") {\n                    props.onChange(newValue);\n                  }\n\n                  setDisplay(newValue);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EtherInput, \"Dj2TPI0Whn++ciBZophnuMQMQDE=\");\n\n_c = EtherInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"EtherInput\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/components/EtherInput.jsx"],"names":["Input","React","useEffect","useState","EtherInput","props","price","mode","setMode","display","setDisplay","value","setValue","currentValue","placeholder","autoFocus","cursor","usdValue","parseFloat","toFixed","e","newValue","target","possibleNewValue","ethValue","onChange"],"mappings":"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","sourcesContent":["import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Îž\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD ðŸ”€\" : \"ETH ðŸ”€\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}