{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current block number of the network\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: block number\n */\n\nexport var useBlockNumber = function useBlockNumber(provider) {\n  var pollTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      blockNumber = _useState2[0],\n      setBlockNumber = _useState2[1];\n\n  var getBlockNumber = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var nextBlockNumber;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return provider.getBlockNumber();\n\n          case 2:\n            nextBlockNumber = _context.sent;\n\n            if (nextBlockNumber !== blockNumber) {\n              setBlockNumber(nextBlockNumber);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [blockNumber, provider]);\n  useOnRepetition(getBlockNumber, {\n    provider: provider,\n    pollTime: pollTime\n  });\n  return blockNumber;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useBlockNumber.js"],"names":["useCallback","useState","useOnRepetition","useBlockNumber","provider","pollTime","blockNumber","setBlockNumber","getBlockNumber","nextBlockNumber"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAA4B;AAAA,MAAjBC,QAAiB,uEAAN,CAAM;;AACtD,kBAAsCJ,QAAQ,CAAC,CAAD,CAA9C;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAMC,cAAc,GAAGR,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDI,QAAQ,CAACI,cAAT,EADC;;AAAA;AACzBC,YAAAA,eADyB;;AAE/B,gBAAIA,eAAe,KAAKH,WAAxB,EAAqC;AACjCC,cAAAA,cAAc,CAACE,eAAD,CAAd;AACH;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAK/B,CAACH,WAAD,EAAcF,QAAd,CAL+B,CAAlC;AAMAF,EAAAA,eAAe,CAACM,cAAD,EAAiB;AAAEJ,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,QAAQ,EAARA;AAAZ,GAAjB,CAAf;AACA,SAAOC,WAAP;AACH,CAVM","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current block number of the network\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: block number\n */\nexport const useBlockNumber = (provider, pollTime = 0) => {\n    const [blockNumber, setBlockNumber] = useState(0);\n    const getBlockNumber = useCallback(async () => {\n        const nextBlockNumber = await provider.getBlockNumber();\n        if (nextBlockNumber !== blockNumber) {\n            setBlockNumber(nextBlockNumber);\n        }\n    }, [blockNumber, provider]);\n    useOnRepetition(getBlockNumber, { provider, pollTime });\n    return blockNumber;\n};\n"]},"metadata":{},"sourceType":"module"}