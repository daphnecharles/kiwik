{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n\nfunction now() {\n  return new Date().getTime();\n} // Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\n\n\nfunction checkNetworks(networks) {\n  var result = null;\n\n  for (var i = 0; i < networks.length; i++) {\n    var network = networks[i]; // Null! We do not know our network; bail.\n\n    if (network == null) {\n      return null;\n    }\n\n    if (result) {\n      // Make sure the network matches the previous networks\n      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n        logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n      }\n    } else {\n      result = network;\n    }\n  }\n\n  return result;\n}\n\nfunction median(values, maxDelta) {\n  values = values.slice().sort();\n  var middle = Math.floor(values.length / 2); // Odd length; take the middle\n\n  if (values.length % 2) {\n    return values[middle];\n  } // Even length; take the average of the two middle\n\n\n  var a = values[middle - 1],\n      b = values[middle];\n\n  if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n    return null;\n  }\n\n  return (a + b) / 2;\n}\n\nfunction serialize(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return JSON.stringify(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return JSON.stringify(value.map(function (i) {\n      return serialize(i);\n    }));\n  } else if (typeof value === \"object\") {\n    var keys = Object.keys(value);\n    keys.sort();\n    return \"{\" + keys.map(function (key) {\n      var v = value[key];\n\n      if (typeof v === \"function\") {\n        v = \"[function]\";\n      } else {\n        v = serialize(v);\n      }\n\n      return JSON.stringify(key) + \":\" + v;\n    }).join(\",\") + \"}\";\n  }\n\n  throw new Error(\"unknown value type: \" + typeof value);\n} // Next request ID to use for emitting debug info\n\n\nvar nextRid = 1;\n;\n\nfunction stall(duration) {\n  var cancel = null;\n  var timer = null;\n  var promise = new Promise(function (resolve) {\n    cancel = function cancel() {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n\n      resolve();\n    };\n\n    timer = setTimeout(cancel, duration);\n  });\n\n  var wait = function wait(func) {\n    promise = promise.then(func);\n    return promise;\n  };\n\n  function getPromise() {\n    return promise;\n  }\n\n  return {\n    cancel: cancel,\n    getPromise: getPromise,\n    wait: wait\n  };\n}\n\nvar ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];\nvar ForwardProperties = [\"address\", \"args\", \"errorArgs\", \"errorSignature\", \"method\", \"transaction\"];\n;\n\nfunction exposeDebugConfig(config, now) {\n  var result = {\n    weight: config.weight\n  };\n  Object.defineProperty(result, \"provider\", {\n    get: function get() {\n      return config.provider;\n    }\n  });\n\n  if (config.start) {\n    result.start = config.start;\n  }\n\n  if (now) {\n    result.duration = now - config.start;\n  }\n\n  if (config.done) {\n    if (config.error) {\n      result.error = config.error;\n    } else {\n      result.result = config.result || null;\n    }\n  }\n\n  return result;\n}\n\nfunction normalizedTally(normalize, quorum) {\n  return function (configs) {\n    // Count the votes for each result\n    var tally = {};\n    configs.forEach(function (c) {\n      var value = normalize(c.result);\n\n      if (!tally[value]) {\n        tally[value] = {\n          count: 0,\n          result: c.result\n        };\n      }\n\n      tally[value].count++;\n    }); // Check for a quorum on any given result\n\n    var keys = Object.keys(tally);\n\n    for (var i = 0; i < keys.length; i++) {\n      var check = tally[keys[i]];\n\n      if (check.count >= quorum) {\n        return check.result;\n      }\n    } // No quroum\n\n\n    return undefined;\n  };\n}\n\nfunction getProcessFunc(provider, method, params) {\n  var normalize = serialize;\n\n  switch (method) {\n    case \"getBlockNumber\":\n      // Return the median value, unless there is (median + 1) is also\n      // present, in which case that is probably true and the median\n      // is going to be stale soon. In the event of a malicious node,\n      // the lie will be true soon enough.\n      return function (configs) {\n        var values = configs.map(function (c) {\n          return c.result;\n        }); // Get the median block number\n\n        var blockNumber = median(configs.map(function (c) {\n          return c.result;\n        }), 2);\n\n        if (blockNumber == null) {\n          return undefined;\n        }\n\n        blockNumber = Math.ceil(blockNumber); // If the next block height is present, its prolly safe to use\n\n        if (values.indexOf(blockNumber + 1) >= 0) {\n          blockNumber++;\n        } // Don't ever roll back the blockNumber\n\n\n        if (blockNumber >= provider._highestBlockNumber) {\n          provider._highestBlockNumber = blockNumber;\n        }\n\n        return provider._highestBlockNumber;\n      };\n\n    case \"getGasPrice\":\n      // Return the middle (round index up) value, similar to median\n      // but do not average even entries and choose the higher.\n      // Malicious actors must compromise 50% of the nodes to lie.\n      return function (configs) {\n        var values = configs.map(function (c) {\n          return c.result;\n        });\n        values.sort();\n        return values[Math.floor(values.length / 2)];\n      };\n\n    case \"getEtherPrice\":\n      // Returns the median price. Malicious actors must compromise at\n      // least 50% of the nodes to lie (in a meaningful way).\n      return function (configs) {\n        return median(configs.map(function (c) {\n          return c.result;\n        }));\n      };\n    // No additional normalizing required; serialize is enough\n\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorageAt\":\n    case \"call\":\n    case \"estimateGas\":\n    case \"getLogs\":\n      break;\n    // We drop the confirmations from transactions as it is approximate\n\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n      normalize = function normalize(tx) {\n        if (tx == null) {\n          return null;\n        }\n\n        tx = shallowCopy(tx);\n        tx.confirmations = -1;\n        return serialize(tx);\n      };\n\n      break;\n    // We drop the confirmations from transactions as it is approximate\n\n    case \"getBlock\":\n      // We drop the confirmations from transactions as it is approximate\n      if (params.includeTransactions) {\n        normalize = function normalize(block) {\n          if (block == null) {\n            return null;\n          }\n\n          block = shallowCopy(block);\n          block.transactions = block.transactions.map(function (tx) {\n            tx = shallowCopy(tx);\n            tx.confirmations = -1;\n            return tx;\n          });\n          return serialize(block);\n        };\n      } else {\n        normalize = function normalize(block) {\n          if (block == null) {\n            return null;\n          }\n\n          return serialize(block);\n        };\n      }\n\n      break;\n\n    default:\n      throw new Error(\"unknown method: \" + method);\n  } // Return the result if and only if the expected quorum is\n  // satisfied and agreed upon for the final result.\n\n\n  return normalizedTally(normalize, provider.quorum);\n} // If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\n\n\nfunction waitForSync(config, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = config.provider;\n\n            if (!(provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", provider);\n\n          case 3:\n            return _context.abrupt(\"return\", poll(function () {\n              return new Promise(function (resolve, reject) {\n                setTimeout(function () {\n                  // We are synced\n                  if (provider.blockNumber >= blockNumber) {\n                    return resolve(provider);\n                  } // We're done; just quit\n\n\n                  // We're done; just quit\n                  if (config.cancelled) {\n                    return resolve(null);\n                  } // Try again, next block\n\n\n                  // Try again, next block\n                  return resolve(undefined);\n                }, 0);\n              });\n            }, {\n              oncePoll: provider\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nfunction getRunner(config, currentBlockNumber, method, params) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var provider, filter;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            provider = config.provider;\n            _context2.t0 = method;\n            _context2.next = _context2.t0 === \"getBlockNumber\" ? 4 : _context2.t0 === \"getGasPrice\" ? 4 : _context2.t0 === \"getEtherPrice\" ? 5 : _context2.t0 === \"getBalance\" ? 8 : _context2.t0 === \"getTransactionCount\" ? 8 : _context2.t0 === \"getCode\" ? 8 : _context2.t0 === \"getStorageAt\" ? 13 : _context2.t0 === \"getBlock\" ? 18 : _context2.t0 === \"call\" ? 23 : _context2.t0 === \"estimateGas\" ? 23 : _context2.t0 === \"getTransaction\" ? 28 : _context2.t0 === \"getTransactionReceipt\" ? 28 : _context2.t0 === \"getLogs\" ? 29 : 35;\n            break;\n\n          case 4:\n            return _context2.abrupt(\"return\", provider[method]());\n\n          case 5:\n            if (!provider.getEtherPrice) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", provider.getEtherPrice());\n\n          case 7:\n            return _context2.abrupt(\"break\", 35);\n\n          case 8:\n            if (!(params.blockTag && isHexString(params.blockTag))) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return waitForSync(config, currentBlockNumber);\n\n          case 11:\n            provider = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", provider[method](params.address, params.blockTag || \"latest\"));\n\n          case 13:\n            if (!(params.blockTag && isHexString(params.blockTag))) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.next = 16;\n            return waitForSync(config, currentBlockNumber);\n\n          case 16:\n            provider = _context2.sent;\n\n          case 17:\n            return _context2.abrupt(\"return\", provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\"));\n\n          case 18:\n            if (!(params.blockTag && isHexString(params.blockTag))) {\n              _context2.next = 22;\n              break;\n            }\n\n            _context2.next = 21;\n            return waitForSync(config, currentBlockNumber);\n\n          case 21:\n            provider = _context2.sent;\n\n          case 22:\n            return _context2.abrupt(\"return\", provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash));\n\n          case 23:\n            if (!(params.blockTag && isHexString(params.blockTag))) {\n              _context2.next = 27;\n              break;\n            }\n\n            _context2.next = 26;\n            return waitForSync(config, currentBlockNumber);\n\n          case 26:\n            provider = _context2.sent;\n\n          case 27:\n            return _context2.abrupt(\"return\", provider[method](params.transaction));\n\n          case 28:\n            return _context2.abrupt(\"return\", provider[method](params.transactionHash));\n\n          case 29:\n            filter = params.filter;\n\n            if (!(filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock))) {\n              _context2.next = 34;\n              break;\n            }\n\n            _context2.next = 33;\n            return waitForSync(config, currentBlockNumber);\n\n          case 33:\n            provider = _context2.sent;\n\n          case 34:\n            return _context2.abrupt(\"return\", provider.getLogs(filter));\n\n          case 35:\n            return _context2.abrupt(\"return\", logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n              method: method,\n              params: params\n            }));\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexport var FallbackProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(FallbackProvider, _BaseProvider);\n\n  var _super = _createSuper(FallbackProvider);\n\n  function FallbackProvider(providers, quorum) {\n    var _this;\n\n    _classCallCheck(this, FallbackProvider);\n\n    logger.checkNew(this instanceof FallbackProvider ? this.constructor : void 0, FallbackProvider);\n\n    if (providers.length === 0) {\n      logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n    }\n\n    var providerConfigs = providers.map(function (configOrProvider, index) {\n      if (Provider.isProvider(configOrProvider)) {\n        var stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n        var priority = 1;\n        return Object.freeze({\n          provider: configOrProvider,\n          weight: 1,\n          stallTimeout: stallTimeout,\n          priority: priority\n        });\n      }\n\n      var config = shallowCopy(configOrProvider);\n\n      if (config.priority == null) {\n        config.priority = 1;\n      }\n\n      if (config.stallTimeout == null) {\n        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n      }\n\n      if (config.weight == null) {\n        config.weight = 1;\n      }\n\n      var weight = config.weight;\n\n      if (weight % 1 || weight > 512 || weight < 1) {\n        logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\".concat(index, \"].weight\"), weight);\n      }\n\n      return Object.freeze(config);\n    });\n    var total = providerConfigs.reduce(function (accum, c) {\n      return accum + c.weight;\n    }, 0);\n\n    if (quorum == null) {\n      quorum = total / 2;\n    } else if (quorum > total) {\n      logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n    } // Are all providers' networks are known\n\n\n    var networkOrReady = checkNetworks(providerConfigs.map(function (c) {\n      return c.provider.network;\n    })); // Not all networks are known; we must stall\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this.detectNetwork().then(resolve, reject);\n        }, 0);\n      });\n    }\n\n    _this = _super.call(this, networkOrReady); // Preserve a copy, so we do not get mutated\n\n    defineReadOnly(_assertThisInitialized(_this), \"providerConfigs\", Object.freeze(providerConfigs));\n    defineReadOnly(_assertThisInitialized(_this), \"quorum\", quorum);\n    _this._highestBlockNumber = -1;\n    return _this;\n  }\n\n  _createClass(FallbackProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var networks;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Promise.all(this.providerConfigs.map(function (c) {\n                  return c.provider.getNetwork();\n                }));\n\n              case 2:\n                networks = _context3.sent;\n                return _context3.abrupt(\"return\", checkNetworks(networks));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var results, _i, result, processFunc, configs, currentBlockNumber, i, first, _loop, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(method === \"sendTransaction\")) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                _context5.next = 3;\n                return Promise.all(this.providerConfigs.map(function (c) {\n                  return c.provider.sendTransaction(params.signedTransaction).then(function (result) {\n                    return result.hash;\n                  }, function (error) {\n                    return error;\n                  });\n                }));\n\n              case 3:\n                results = _context5.sent;\n                _i = 0;\n\n              case 5:\n                if (!(_i < results.length)) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                result = results[_i];\n\n                if (!(typeof result === \"string\")) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 9:\n                _i++;\n                _context5.next = 5;\n                break;\n\n              case 12:\n                throw results[0];\n\n              case 13:\n                if (!(this._highestBlockNumber === -1 && method !== \"getBlockNumber\")) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                _context5.next = 16;\n                return this.getBlockNumber();\n\n              case 16:\n                processFunc = getProcessFunc(this, method, params); // Shuffle the providers and then sort them by their priority; we\n                // shallowCopy them since we will store the result in them too\n\n                configs = shuffled(this.providerConfigs.map(shallowCopy));\n                configs.sort(function (a, b) {\n                  return a.priority - b.priority;\n                });\n                currentBlockNumber = this._highestBlockNumber;\n                i = 0;\n                first = true;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var t0, inflightWeight, _loop2, waiting, results, _result, errors;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          t0 = now(); // Compute the inflight weight (exclude anything past)\n\n                          inflightWeight = configs.filter(function (c) {\n                            return c.runner && t0 - c.start < c.stallTimeout;\n                          }).reduce(function (accum, c) {\n                            return accum + c.weight;\n                          }, 0); // Start running enough to meet quorum\n\n                          _loop2 = function _loop2() {\n                            var config = configs[i++];\n                            var rid = nextRid++;\n                            config.start = now();\n                            config.staller = stall(config.stallTimeout);\n                            config.staller.wait(function () {\n                              config.staller = null;\n                            });\n                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {\n                              config.done = true;\n                              config.result = result;\n\n                              if (_this2.listenerCount(\"debug\")) {\n                                _this2.emit(\"debug\", {\n                                  action: \"request\",\n                                  rid: rid,\n                                  backend: exposeDebugConfig(config, now()),\n                                  request: {\n                                    method: method,\n                                    params: deepCopy(params)\n                                  },\n                                  provider: _this2\n                                });\n                              }\n                            }, function (error) {\n                              config.done = true;\n                              config.error = error;\n\n                              if (_this2.listenerCount(\"debug\")) {\n                                _this2.emit(\"debug\", {\n                                  action: \"request\",\n                                  rid: rid,\n                                  backend: exposeDebugConfig(config, now()),\n                                  request: {\n                                    method: method,\n                                    params: deepCopy(params)\n                                  },\n                                  provider: _this2\n                                });\n                              }\n                            });\n\n                            if (_this2.listenerCount(\"debug\")) {\n                              _this2.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, null),\n                                request: {\n                                  method: method,\n                                  params: deepCopy(params)\n                                },\n                                provider: _this2\n                              });\n                            }\n\n                            inflightWeight += config.weight;\n                          };\n\n                          while (inflightWeight < _this2.quorum && i < configs.length) {\n                            _loop2();\n                          } // Wait for anything meaningful to finish or stall out\n\n\n                          waiting = [];\n                          configs.forEach(function (c) {\n                            if (c.done || !c.runner) {\n                              return;\n                            }\n\n                            waiting.push(c.runner);\n\n                            if (c.staller) {\n                              waiting.push(c.staller.getPromise());\n                            }\n                          });\n\n                          if (!waiting.length) {\n                            _context4.next = 9;\n                            break;\n                          }\n\n                          _context4.next = 9;\n                          return Promise.race(waiting);\n\n                        case 9:\n                          // Check the quorum and process the results; the process function\n                          // may additionally decide the quorum is not met\n                          results = configs.filter(function (c) {\n                            return c.done && c.error == null;\n                          });\n\n                          if (!(results.length >= _this2.quorum)) {\n                            _context4.next = 19;\n                            break;\n                          }\n\n                          _result = processFunc(results);\n\n                          if (!(_result !== undefined)) {\n                            _context4.next = 15;\n                            break;\n                          }\n\n                          // Shut down any stallers\n                          configs.forEach(function (c) {\n                            if (c.staller) {\n                              c.staller.cancel();\n                            }\n\n                            c.cancelled = true;\n                          });\n                          return _context4.abrupt(\"return\", {\n                            v: _result\n                          });\n\n                        case 15:\n                          if (first) {\n                            _context4.next = 18;\n                            break;\n                          }\n\n                          _context4.next = 18;\n                          return stall(100).getPromise();\n\n                        case 18:\n                          first = false;\n\n                        case 19:\n                          // No result, check for errors that should be forwarded\n                          errors = configs.reduce(function (accum, c) {\n                            if (!c.done || c.error == null) {\n                              return accum;\n                            }\n\n                            var code = c.error.code;\n\n                            if (ForwardErrors.indexOf(code) >= 0) {\n                              if (!accum[code]) {\n                                accum[code] = {\n                                  error: c.error,\n                                  weight: 0\n                                };\n                              }\n\n                              accum[code].weight += c.weight;\n                            }\n\n                            return accum;\n                          }, {});\n                          Object.keys(errors).forEach(function (errorCode) {\n                            var tally = errors[errorCode];\n\n                            if (tally.weight < _this2.quorum) {\n                              return;\n                            } // Shut down any stallers\n\n\n                            configs.forEach(function (c) {\n                              if (c.staller) {\n                                c.staller.cancel();\n                              }\n\n                              c.cancelled = true;\n                            });\n                            var e = tally.error;\n                            var props = {};\n                            ForwardProperties.forEach(function (name) {\n                              if (e[name] == null) {\n                                return;\n                              }\n\n                              props[name] = e[name];\n                            });\n                            logger.throwError(e.reason || e.message, errorCode, props);\n                          }); // All configs have run to completion; we will never get more data\n\n                          if (!(configs.filter(function (c) {\n                            return !c.done;\n                          }).length === 0)) {\n                            _context4.next = 23;\n                            break;\n                          }\n\n                          return _context4.abrupt(\"return\", \"break\");\n\n                        case 23:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n              case 23:\n                if (!true) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                return _context5.delegateYield(_loop(), \"t0\", 25);\n\n              case 25:\n                _ret = _context5.t0;\n\n                if (!(_ret === \"break\")) {\n                  _context5.next = 28;\n                  break;\n                }\n\n                return _context5.abrupt(\"break\", 32);\n\n              case 28:\n                if (!(typeof _ret === \"object\")) {\n                  _context5.next = 30;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _ret.v);\n\n              case 30:\n                _context5.next = 23;\n                break;\n\n              case 32:\n                // Shut down any stallers; shouldn't be any\n                configs.forEach(function (c) {\n                  if (c.staller) {\n                    c.staller.cancel();\n                  }\n\n                  c.cancelled = true;\n                });\n                return _context5.abrupt(\"return\", logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n                  method: method,\n                  params: params,\n                  //results: configs.map((c) => c.result),\n                  //errors: configs.map((c) => c.error),\n                  results: configs.map(function (c) {\n                    return exposeDebugConfig(c);\n                  }),\n                  provider: this\n                }));\n\n              case 34:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return FallbackProvider;\n}(BaseProvider);","map":{"version":3,"sources":["../src.ts/fallback-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction now() { return (new Date()).getTime(); }\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    let result = null;\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        }\n        else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n        return JSON.stringify(value);\n    }\n    else if (typeof (value) === \"string\") {\n        return value;\n    }\n    else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    }\n    else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    }\n    else if (typeof (value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof (v) === \"function\") {\n                v = \"[function]\";\n            }\n            else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof (value));\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n    let cancel = null;\n    let timer = null;\n    let promise = (new Promise((resolve) => {\n        cancel = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    }));\n    const wait = (func) => {\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return { cancel, getPromise, wait };\n}\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n;\nfunction exposeDebugConfig(config, now) {\n    const result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = (now - config.start);\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        }\n        else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function (configs) {\n        // Count the votes for each result\n        const tally = {};\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = { count: 0, result: c.result };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    let normalize = serialize;\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function (configs) {\n                return median(configs.map((c) => c.result));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function (tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            }\n            else {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const provider = (config.provider);\n        if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n            return provider;\n        }\n        return poll(() => {\n            return new Promise((resolve, reject) => {\n                setTimeout(function () {\n                    // We are synced\n                    if (provider.blockNumber >= blockNumber) {\n                        return resolve(provider);\n                    }\n                    // We're done; just quit\n                    if (config.cancelled) {\n                        return resolve(null);\n                    }\n                    // Try again, next block\n                    return resolve(undefined);\n                }, 0);\n            });\n        }, { oncePoll: provider });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let provider = config.provider;\n        switch (method) {\n            case \"getBlockNumber\":\n            case \"getGasPrice\":\n                return provider[method]();\n            case \"getEtherPrice\":\n                if (provider.getEtherPrice) {\n                    return provider.getEtherPrice();\n                }\n                break;\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.address, params.blockTag || \"latest\");\n            case \"getStorageAt\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n            case \"getBlock\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash);\n            case \"call\":\n            case \"estimateGas\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.transaction);\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n                return provider[method](params.transactionHash);\n            case \"getLogs\": {\n                let filter = params.filter;\n                if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getLogs(filter);\n            }\n        }\n        return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n        });\n    });\n}\nexport class FallbackProvider extends BaseProvider {\n    constructor(providers, quorum) {\n        logger.checkNew(new.target, FallbackProvider);\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        const providerConfigs = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n            const config = shallowCopy(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n            }\n            return Object.freeze(config);\n        });\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        }\n        else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n        this._highestBlockNumber = -1;\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n            return checkNetworks(networks);\n        });\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Sending transactions is special; always broadcast it to all backends\n            if (method === \"sendTransaction\") {\n                const results = yield Promise.all(this.providerConfigs.map((c) => {\n                    return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                        return result.hash;\n                    }, (error) => {\n                        return error;\n                    });\n                }));\n                // Any success is good enough (other errors are likely \"already seen\" errors\n                for (let i = 0; i < results.length; i++) {\n                    const result = results[i];\n                    if (typeof (result) === \"string\") {\n                        return result;\n                    }\n                }\n                // They were all an error; pick the first error\n                throw results[0];\n            }\n            // We need to make sure we are in sync with our backends, so we need\n            // to know this before we can make a lot of calls\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n                yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            // Shuffle the providers and then sort them by their priority; we\n            // shallowCopy them since we will store the result in them too\n            const configs = shuffled(this.providerConfigs.map(shallowCopy));\n            configs.sort((a, b) => (a.priority - b.priority));\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while (true) {\n                const t0 = now();\n                // Compute the inflight weight (exclude anything past)\n                let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                    .reduce((accum, c) => (accum + c.weight), 0);\n                // Start running enough to meet quorum\n                while (inflightWeight < this.quorum && i < configs.length) {\n                    const config = configs[i++];\n                    const rid = nextRid++;\n                    config.start = now();\n                    config.staller = stall(config.stallTimeout);\n                    config.staller.wait(() => { config.staller = null; });\n                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                        config.done = true;\n                        config.result = result;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    }, (error) => {\n                        config.done = true;\n                        config.error = error;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    });\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, null),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                    inflightWeight += config.weight;\n                }\n                // Wait for anything meaningful to finish or stall out\n                const waiting = [];\n                configs.forEach((c) => {\n                    if (c.done || !c.runner) {\n                        return;\n                    }\n                    waiting.push(c.runner);\n                    if (c.staller) {\n                        waiting.push(c.staller.getPromise());\n                    }\n                });\n                if (waiting.length) {\n                    yield Promise.race(waiting);\n                }\n                // Check the quorum and process the results; the process function\n                // may additionally decide the quorum is not met\n                const results = configs.filter((c) => (c.done && c.error == null));\n                if (results.length >= this.quorum) {\n                    const result = processFunc(results);\n                    if (result !== undefined) {\n                        // Shut down any stallers\n                        configs.forEach(c => {\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return result;\n                    }\n                    if (!first) {\n                        yield stall(100).getPromise();\n                    }\n                    first = false;\n                }\n                // No result, check for errors that should be forwarded\n                const errors = configs.reduce((accum, c) => {\n                    if (!c.done || c.error == null) {\n                        return accum;\n                    }\n                    const code = (c.error).code;\n                    if (ForwardErrors.indexOf(code) >= 0) {\n                        if (!accum[code]) {\n                            accum[code] = { error: c.error, weight: 0 };\n                        }\n                        accum[code].weight += c.weight;\n                    }\n                    return accum;\n                }, ({}));\n                Object.keys(errors).forEach((errorCode) => {\n                    const tally = errors[errorCode];\n                    if (tally.weight < this.quorum) {\n                        return;\n                    }\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) {\n                            c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                    });\n                    const e = (tally.error);\n                    const props = {};\n                    ForwardProperties.forEach((name) => {\n                        if (e[name] == null) {\n                            return;\n                        }\n                        props[name] = e[name];\n                    });\n                    logger.throwError(e.reason || e.message, errorCode, props);\n                });\n                // All configs have run to completion; we will never get more data\n                if (configs.filter((c) => !c.done).length === 0) {\n                    break;\n                }\n            }\n            // Shut down any stallers; shouldn't be any\n            configs.forEach(c => {\n                if (c.staller) {\n                    c.staller.cancel();\n                }\n                c.cancelled = true;\n            });\n            return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map((c) => exposeDebugConfig(c)),\n                provider: this\n            });\n        });\n    }\n}\n//# sourceMappingURL=fallback-provider.js.map"]},"metadata":{},"sourceType":"module"}