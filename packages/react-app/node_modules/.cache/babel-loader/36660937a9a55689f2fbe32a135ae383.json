{"ast":null,"code":"import _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { WordArray } from './core.js';\nimport { BlockCipher } from './cipher-core.js'; // Permuted Choice 1 constants\n\nvar PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]; // Permuted Choice 2 constants\n\nvar PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]; // Cumulative bit shift constants\n\nvar BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28]; // SBOXes and round permutation constants\n\nvar SBOX_P = [{\n  0x0: 0x808200,\n  0x10000000: 0x8000,\n  0x20000000: 0x808002,\n  0x30000000: 0x2,\n  0x40000000: 0x200,\n  0x50000000: 0x808202,\n  0x60000000: 0x800202,\n  0x70000000: 0x800000,\n  0x80000000: 0x202,\n  0x90000000: 0x800200,\n  0xa0000000: 0x8200,\n  0xb0000000: 0x808000,\n  0xc0000000: 0x8002,\n  0xd0000000: 0x800002,\n  0xe0000000: 0x0,\n  0xf0000000: 0x8202,\n  0x8000000: 0x0,\n  0x18000000: 0x808202,\n  0x28000000: 0x8202,\n  0x38000000: 0x8000,\n  0x48000000: 0x808200,\n  0x58000000: 0x200,\n  0x68000000: 0x808002,\n  0x78000000: 0x2,\n  0x88000000: 0x800200,\n  0x98000000: 0x8200,\n  0xa8000000: 0x808000,\n  0xb8000000: 0x800202,\n  0xc8000000: 0x800002,\n  0xd8000000: 0x8002,\n  0xe8000000: 0x202,\n  0xf8000000: 0x800000,\n  0x1: 0x8000,\n  0x10000001: 0x2,\n  0x20000001: 0x808200,\n  0x30000001: 0x800000,\n  0x40000001: 0x808002,\n  0x50000001: 0x8200,\n  0x60000001: 0x200,\n  0x70000001: 0x800202,\n  0x80000001: 0x808202,\n  0x90000001: 0x808000,\n  0xa0000001: 0x800002,\n  0xb0000001: 0x8202,\n  0xc0000001: 0x202,\n  0xd0000001: 0x800200,\n  0xe0000001: 0x8002,\n  0xf0000001: 0x0,\n  0x8000001: 0x808202,\n  0x18000001: 0x808000,\n  0x28000001: 0x800000,\n  0x38000001: 0x200,\n  0x48000001: 0x8000,\n  0x58000001: 0x800002,\n  0x68000001: 0x2,\n  0x78000001: 0x8202,\n  0x88000001: 0x8002,\n  0x98000001: 0x800202,\n  0xa8000001: 0x202,\n  0xb8000001: 0x808200,\n  0xc8000001: 0x800200,\n  0xd8000001: 0x0,\n  0xe8000001: 0x8200,\n  0xf8000001: 0x808002\n}, {\n  0x0: 0x40084010,\n  0x1000000: 0x4000,\n  0x2000000: 0x80000,\n  0x3000000: 0x40080010,\n  0x4000000: 0x40000010,\n  0x5000000: 0x40084000,\n  0x6000000: 0x40004000,\n  0x7000000: 0x10,\n  0x8000000: 0x84000,\n  0x9000000: 0x40004010,\n  0xa000000: 0x40000000,\n  0xb000000: 0x84010,\n  0xc000000: 0x80010,\n  0xd000000: 0x0,\n  0xe000000: 0x4010,\n  0xf000000: 0x40080000,\n  0x800000: 0x40004000,\n  0x1800000: 0x84010,\n  0x2800000: 0x10,\n  0x3800000: 0x40004010,\n  0x4800000: 0x40084010,\n  0x5800000: 0x40000000,\n  0x6800000: 0x80000,\n  0x7800000: 0x40080010,\n  0x8800000: 0x80010,\n  0x9800000: 0x0,\n  0xa800000: 0x4000,\n  0xb800000: 0x40080000,\n  0xc800000: 0x40000010,\n  0xd800000: 0x84000,\n  0xe800000: 0x40084000,\n  0xf800000: 0x4010,\n  0x10000000: 0x0,\n  0x11000000: 0x40080010,\n  0x12000000: 0x40004010,\n  0x13000000: 0x40084000,\n  0x14000000: 0x40080000,\n  0x15000000: 0x10,\n  0x16000000: 0x84010,\n  0x17000000: 0x4000,\n  0x18000000: 0x4010,\n  0x19000000: 0x80000,\n  0x1a000000: 0x80010,\n  0x1b000000: 0x40000010,\n  0x1c000000: 0x84000,\n  0x1d000000: 0x40004000,\n  0x1e000000: 0x40000000,\n  0x1f000000: 0x40084010,\n  0x10800000: 0x84010,\n  0x11800000: 0x80000,\n  0x12800000: 0x40080000,\n  0x13800000: 0x4000,\n  0x14800000: 0x40004000,\n  0x15800000: 0x40084010,\n  0x16800000: 0x10,\n  0x17800000: 0x40000000,\n  0x18800000: 0x40084000,\n  0x19800000: 0x40000010,\n  0x1a800000: 0x40004010,\n  0x1b800000: 0x80010,\n  0x1c800000: 0x0,\n  0x1d800000: 0x4010,\n  0x1e800000: 0x40080010,\n  0x1f800000: 0x84000\n}, {\n  0x0: 0x104,\n  0x100000: 0x0,\n  0x200000: 0x4000100,\n  0x300000: 0x10104,\n  0x400000: 0x10004,\n  0x500000: 0x4000004,\n  0x600000: 0x4010104,\n  0x700000: 0x4010000,\n  0x800000: 0x4000000,\n  0x900000: 0x4010100,\n  0xa00000: 0x10100,\n  0xb00000: 0x4010004,\n  0xc00000: 0x4000104,\n  0xd00000: 0x10000,\n  0xe00000: 0x4,\n  0xf00000: 0x100,\n  0x80000: 0x4010100,\n  0x180000: 0x4010004,\n  0x280000: 0x0,\n  0x380000: 0x4000100,\n  0x480000: 0x4000004,\n  0x580000: 0x10000,\n  0x680000: 0x10004,\n  0x780000: 0x104,\n  0x880000: 0x4,\n  0x980000: 0x100,\n  0xa80000: 0x4010000,\n  0xb80000: 0x10104,\n  0xc80000: 0x10100,\n  0xd80000: 0x4000104,\n  0xe80000: 0x4010104,\n  0xf80000: 0x4000000,\n  0x1000000: 0x4010100,\n  0x1100000: 0x10004,\n  0x1200000: 0x10000,\n  0x1300000: 0x4000100,\n  0x1400000: 0x100,\n  0x1500000: 0x4010104,\n  0x1600000: 0x4000004,\n  0x1700000: 0x0,\n  0x1800000: 0x4000104,\n  0x1900000: 0x4000000,\n  0x1a00000: 0x4,\n  0x1b00000: 0x10100,\n  0x1c00000: 0x4010000,\n  0x1d00000: 0x104,\n  0x1e00000: 0x10104,\n  0x1f00000: 0x4010004,\n  0x1080000: 0x4000000,\n  0x1180000: 0x104,\n  0x1280000: 0x4010100,\n  0x1380000: 0x0,\n  0x1480000: 0x10004,\n  0x1580000: 0x4000100,\n  0x1680000: 0x100,\n  0x1780000: 0x4010004,\n  0x1880000: 0x10000,\n  0x1980000: 0x4010104,\n  0x1a80000: 0x10104,\n  0x1b80000: 0x4000004,\n  0x1c80000: 0x4000104,\n  0x1d80000: 0x4010000,\n  0x1e80000: 0x4,\n  0x1f80000: 0x10100\n}, {\n  0x0: 0x80401000,\n  0x10000: 0x80001040,\n  0x20000: 0x401040,\n  0x30000: 0x80400000,\n  0x40000: 0x0,\n  0x50000: 0x401000,\n  0x60000: 0x80000040,\n  0x70000: 0x400040,\n  0x80000: 0x80000000,\n  0x90000: 0x400000,\n  0xa0000: 0x40,\n  0xb0000: 0x80001000,\n  0xc0000: 0x80400040,\n  0xd0000: 0x1040,\n  0xe0000: 0x1000,\n  0xf0000: 0x80401040,\n  0x8000: 0x80001040,\n  0x18000: 0x40,\n  0x28000: 0x80400040,\n  0x38000: 0x80001000,\n  0x48000: 0x401000,\n  0x58000: 0x80401040,\n  0x68000: 0x0,\n  0x78000: 0x80400000,\n  0x88000: 0x1000,\n  0x98000: 0x80401000,\n  0xa8000: 0x400000,\n  0xb8000: 0x1040,\n  0xc8000: 0x80000000,\n  0xd8000: 0x400040,\n  0xe8000: 0x401040,\n  0xf8000: 0x80000040,\n  0x100000: 0x400040,\n  0x110000: 0x401000,\n  0x120000: 0x80000040,\n  0x130000: 0x0,\n  0x140000: 0x1040,\n  0x150000: 0x80400040,\n  0x160000: 0x80401000,\n  0x170000: 0x80001040,\n  0x180000: 0x80401040,\n  0x190000: 0x80000000,\n  0x1a0000: 0x80400000,\n  0x1b0000: 0x401040,\n  0x1c0000: 0x80001000,\n  0x1d0000: 0x400000,\n  0x1e0000: 0x40,\n  0x1f0000: 0x1000,\n  0x108000: 0x80400000,\n  0x118000: 0x80401040,\n  0x128000: 0x0,\n  0x138000: 0x401000,\n  0x148000: 0x400040,\n  0x158000: 0x80000000,\n  0x168000: 0x80001040,\n  0x178000: 0x40,\n  0x188000: 0x80000040,\n  0x198000: 0x1000,\n  0x1a8000: 0x80001000,\n  0x1b8000: 0x80400040,\n  0x1c8000: 0x1040,\n  0x1d8000: 0x80401000,\n  0x1e8000: 0x400000,\n  0x1f8000: 0x401040\n}, {\n  0x0: 0x80,\n  0x1000: 0x1040000,\n  0x2000: 0x40000,\n  0x3000: 0x20000000,\n  0x4000: 0x20040080,\n  0x5000: 0x1000080,\n  0x6000: 0x21000080,\n  0x7000: 0x40080,\n  0x8000: 0x1000000,\n  0x9000: 0x20040000,\n  0xa000: 0x20000080,\n  0xb000: 0x21040080,\n  0xc000: 0x21040000,\n  0xd000: 0x0,\n  0xe000: 0x1040080,\n  0xf000: 0x21000000,\n  0x800: 0x1040080,\n  0x1800: 0x21000080,\n  0x2800: 0x80,\n  0x3800: 0x1040000,\n  0x4800: 0x40000,\n  0x5800: 0x20040080,\n  0x6800: 0x21040000,\n  0x7800: 0x20000000,\n  0x8800: 0x20040000,\n  0x9800: 0x0,\n  0xa800: 0x21040080,\n  0xb800: 0x1000080,\n  0xc800: 0x20000080,\n  0xd800: 0x21000000,\n  0xe800: 0x1000000,\n  0xf800: 0x40080,\n  0x10000: 0x40000,\n  0x11000: 0x80,\n  0x12000: 0x20000000,\n  0x13000: 0x21000080,\n  0x14000: 0x1000080,\n  0x15000: 0x21040000,\n  0x16000: 0x20040080,\n  0x17000: 0x1000000,\n  0x18000: 0x21040080,\n  0x19000: 0x21000000,\n  0x1a000: 0x1040000,\n  0x1b000: 0x20040000,\n  0x1c000: 0x40080,\n  0x1d000: 0x20000080,\n  0x1e000: 0x0,\n  0x1f000: 0x1040080,\n  0x10800: 0x21000080,\n  0x11800: 0x1000000,\n  0x12800: 0x1040000,\n  0x13800: 0x20040080,\n  0x14800: 0x20000000,\n  0x15800: 0x1040080,\n  0x16800: 0x80,\n  0x17800: 0x21040000,\n  0x18800: 0x40080,\n  0x19800: 0x21040080,\n  0x1a800: 0x0,\n  0x1b800: 0x21000000,\n  0x1c800: 0x1000080,\n  0x1d800: 0x40000,\n  0x1e800: 0x20040000,\n  0x1f800: 0x20000080\n}, {\n  0x0: 0x10000008,\n  0x100: 0x2000,\n  0x200: 0x10200000,\n  0x300: 0x10202008,\n  0x400: 0x10002000,\n  0x500: 0x200000,\n  0x600: 0x200008,\n  0x700: 0x10000000,\n  0x800: 0x0,\n  0x900: 0x10002008,\n  0xa00: 0x202000,\n  0xb00: 0x8,\n  0xc00: 0x10200008,\n  0xd00: 0x202008,\n  0xe00: 0x2008,\n  0xf00: 0x10202000,\n  0x80: 0x10200000,\n  0x180: 0x10202008,\n  0x280: 0x8,\n  0x380: 0x200000,\n  0x480: 0x202008,\n  0x580: 0x10000008,\n  0x680: 0x10002000,\n  0x780: 0x2008,\n  0x880: 0x200008,\n  0x980: 0x2000,\n  0xa80: 0x10002008,\n  0xb80: 0x10200008,\n  0xc80: 0x0,\n  0xd80: 0x10202000,\n  0xe80: 0x202000,\n  0xf80: 0x10000000,\n  0x1000: 0x10002000,\n  0x1100: 0x10200008,\n  0x1200: 0x10202008,\n  0x1300: 0x2008,\n  0x1400: 0x200000,\n  0x1500: 0x10000000,\n  0x1600: 0x10000008,\n  0x1700: 0x202000,\n  0x1800: 0x202008,\n  0x1900: 0x0,\n  0x1a00: 0x8,\n  0x1b00: 0x10200000,\n  0x1c00: 0x2000,\n  0x1d00: 0x10002008,\n  0x1e00: 0x10202000,\n  0x1f00: 0x200008,\n  0x1080: 0x8,\n  0x1180: 0x202000,\n  0x1280: 0x200000,\n  0x1380: 0x10000008,\n  0x1480: 0x10002000,\n  0x1580: 0x2008,\n  0x1680: 0x10202008,\n  0x1780: 0x10200000,\n  0x1880: 0x10202000,\n  0x1980: 0x10200008,\n  0x1a80: 0x2000,\n  0x1b80: 0x202008,\n  0x1c80: 0x200008,\n  0x1d80: 0x0,\n  0x1e80: 0x10000000,\n  0x1f80: 0x10002008\n}, {\n  0x0: 0x100000,\n  0x10: 0x2000401,\n  0x20: 0x400,\n  0x30: 0x100401,\n  0x40: 0x2100401,\n  0x50: 0x0,\n  0x60: 0x1,\n  0x70: 0x2100001,\n  0x80: 0x2000400,\n  0x90: 0x100001,\n  0xa0: 0x2000001,\n  0xb0: 0x2100400,\n  0xc0: 0x2100000,\n  0xd0: 0x401,\n  0xe0: 0x100400,\n  0xf0: 0x2000000,\n  0x8: 0x2100001,\n  0x18: 0x0,\n  0x28: 0x2000401,\n  0x38: 0x2100400,\n  0x48: 0x100000,\n  0x58: 0x2000001,\n  0x68: 0x2000000,\n  0x78: 0x401,\n  0x88: 0x100401,\n  0x98: 0x2000400,\n  0xa8: 0x2100000,\n  0xb8: 0x100001,\n  0xc8: 0x400,\n  0xd8: 0x2100401,\n  0xe8: 0x1,\n  0xf8: 0x100400,\n  0x100: 0x2000000,\n  0x110: 0x100000,\n  0x120: 0x2000401,\n  0x130: 0x2100001,\n  0x140: 0x100001,\n  0x150: 0x2000400,\n  0x160: 0x2100400,\n  0x170: 0x100401,\n  0x180: 0x401,\n  0x190: 0x2100401,\n  0x1a0: 0x100400,\n  0x1b0: 0x1,\n  0x1c0: 0x0,\n  0x1d0: 0x2100000,\n  0x1e0: 0x2000001,\n  0x1f0: 0x400,\n  0x108: 0x100400,\n  0x118: 0x2000401,\n  0x128: 0x2100001,\n  0x138: 0x1,\n  0x148: 0x2000000,\n  0x158: 0x100000,\n  0x168: 0x401,\n  0x178: 0x2100400,\n  0x188: 0x2000001,\n  0x198: 0x2100000,\n  0x1a8: 0x0,\n  0x1b8: 0x2100401,\n  0x1c8: 0x100401,\n  0x1d8: 0x400,\n  0x1e8: 0x2000400,\n  0x1f8: 0x100001\n}, {\n  0x0: 0x8000820,\n  0x1: 0x20000,\n  0x2: 0x8000000,\n  0x3: 0x20,\n  0x4: 0x20020,\n  0x5: 0x8020820,\n  0x6: 0x8020800,\n  0x7: 0x800,\n  0x8: 0x8020000,\n  0x9: 0x8000800,\n  0xa: 0x20800,\n  0xb: 0x8020020,\n  0xc: 0x820,\n  0xd: 0x0,\n  0xe: 0x8000020,\n  0xf: 0x20820,\n  0x80000000: 0x800,\n  0x80000001: 0x8020820,\n  0x80000002: 0x8000820,\n  0x80000003: 0x8000000,\n  0x80000004: 0x8020000,\n  0x80000005: 0x20800,\n  0x80000006: 0x20820,\n  0x80000007: 0x20,\n  0x80000008: 0x8000020,\n  0x80000009: 0x820,\n  0x8000000a: 0x20020,\n  0x8000000b: 0x8020800,\n  0x8000000c: 0x0,\n  0x8000000d: 0x8020020,\n  0x8000000e: 0x8000800,\n  0x8000000f: 0x20000,\n  0x10: 0x20820,\n  0x11: 0x8020800,\n  0x12: 0x20,\n  0x13: 0x800,\n  0x14: 0x8000800,\n  0x15: 0x8000020,\n  0x16: 0x8020020,\n  0x17: 0x20000,\n  0x18: 0x0,\n  0x19: 0x20020,\n  0x1a: 0x8020000,\n  0x1b: 0x8000820,\n  0x1c: 0x8020820,\n  0x1d: 0x20800,\n  0x1e: 0x820,\n  0x1f: 0x8000000,\n  0x80000010: 0x20000,\n  0x80000011: 0x800,\n  0x80000012: 0x8020020,\n  0x80000013: 0x20820,\n  0x80000014: 0x20,\n  0x80000015: 0x8020000,\n  0x80000016: 0x8000000,\n  0x80000017: 0x8000820,\n  0x80000018: 0x8020820,\n  0x80000019: 0x8000020,\n  0x8000001a: 0x8000800,\n  0x8000001b: 0x0,\n  0x8000001c: 0x20800,\n  0x8000001d: 0x820,\n  0x8000001e: 0x20020,\n  0x8000001f: 0x8020800\n}]; // Masks that select the SBOX input\n\nvar SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f]; // Swap bits across the left and right words\n\nfunction exchangeLR(offset, mask) {\n  var t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n  this._rBlock ^= t;\n  this._lBlock ^= t << offset;\n}\n\nfunction exchangeRL(offset, mask) {\n  var t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n  this._lBlock ^= t;\n  this._rBlock ^= t << offset;\n}\n/**\n * DES block cipher algorithm.\n */\n\n\nexport var DESAlgo = /*#__PURE__*/function (_BlockCipher) {\n  _inherits(DESAlgo, _BlockCipher);\n\n  var _super = _createSuper(DESAlgo);\n\n  function DESAlgo() {\n    _classCallCheck(this, DESAlgo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DESAlgo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      // Shortcuts\n      var key = this._key;\n      var keyWords = key.words; // Select 56 bits according to PC1\n\n      var keyBits = [];\n\n      for (var i = 0; i < 56; i += 1) {\n        var keyBitPos = PC1[i] - 1;\n        keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n      } // Assemble 16 subkeys\n\n\n      this._subKeys = [];\n      var subKeys = this._subKeys;\n\n      for (var nSubKey = 0; nSubKey < 16; nSubKey += 1) {\n        // Create subkey\n        subKeys[nSubKey] = [];\n        var subKey = subKeys[nSubKey]; // Shortcut\n\n        var bitShift = BIT_SHIFTS[nSubKey]; // Select 48 bits according to PC2\n\n        for (var _i = 0; _i < 24; _i += 1) {\n          // Select from the left 28 key bits\n          subKey[_i / 6 | 0] |= keyBits[(PC2[_i] - 1 + bitShift) % 28] << 31 - _i % 6; // Select from the right 28 key bits\n\n          subKey[4 + (_i / 6 | 0)] |= keyBits[28 + (PC2[_i + 24] - 1 + bitShift) % 28] << 31 - _i % 6;\n        } // Since each subkey is applied to an expanded 32-bit input,\n        // the subkey can be broken into 8 values scaled to 32-bits,\n        // which allows the key to be used without expansion\n\n\n        subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n\n        for (var _i2 = 1; _i2 < 7; _i2 += 1) {\n          subKey[_i2] >>>= (_i2 - 1) * 4 + 3;\n        }\n\n        subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n      } // Compute inverse subkeys\n\n\n      this._invSubKeys = [];\n      var invSubKeys = this._invSubKeys;\n\n      for (var _i3 = 0; _i3 < 16; _i3 += 1) {\n        invSubKeys[_i3] = subKeys[15 - _i3];\n      }\n    }\n  }, {\n    key: \"encryptBlock\",\n    value: function encryptBlock(M, offset) {\n      this._doCryptBlock(M, offset, this._subKeys);\n    }\n  }, {\n    key: \"decryptBlock\",\n    value: function decryptBlock(M, offset) {\n      this._doCryptBlock(M, offset, this._invSubKeys);\n    }\n  }, {\n    key: \"_doCryptBlock\",\n    value: function _doCryptBlock(M, offset, subKeys) {\n      var _M = M; // Get input\n\n      this._lBlock = M[offset];\n      this._rBlock = M[offset + 1]; // Initial permutation\n\n      exchangeLR.call(this, 4, 0x0f0f0f0f);\n      exchangeLR.call(this, 16, 0x0000ffff);\n      exchangeRL.call(this, 2, 0x33333333);\n      exchangeRL.call(this, 8, 0x00ff00ff);\n      exchangeLR.call(this, 1, 0x55555555); // Rounds\n\n      for (var round = 0; round < 16; round += 1) {\n        // Shortcuts\n        var subKey = subKeys[round];\n        var lBlock = this._lBlock;\n        var rBlock = this._rBlock; // Feistel function\n\n        var f = 0;\n\n        for (var i = 0; i < 8; i += 1) {\n          f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n        }\n\n        this._lBlock = rBlock;\n        this._rBlock = lBlock ^ f;\n      } // Undo swap from last round\n\n\n      var t = this._lBlock;\n      this._lBlock = this._rBlock;\n      this._rBlock = t; // Final permutation\n\n      exchangeLR.call(this, 1, 0x55555555);\n      exchangeRL.call(this, 8, 0x00ff00ff);\n      exchangeRL.call(this, 2, 0x33333333);\n      exchangeLR.call(this, 16, 0x0000ffff);\n      exchangeLR.call(this, 4, 0x0f0f0f0f); // Set output\n\n      _M[offset] = this._lBlock;\n      _M[offset + 1] = this._rBlock;\n    }\n  }]);\n\n  return DESAlgo;\n}(BlockCipher);\nDESAlgo.keySize = 64 / 32;\nDESAlgo.ivSize = 64 / 32;\nDESAlgo.blockSize = 64 / 32;\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n */\n\nexport var DES = BlockCipher._createHelper(DESAlgo);\n/**\n * Triple-DES block cipher algorithm.\n */\n\nexport var TripleDESAlgo = /*#__PURE__*/function (_BlockCipher2) {\n  _inherits(TripleDESAlgo, _BlockCipher2);\n\n  var _super2 = _createSuper(TripleDESAlgo);\n\n  function TripleDESAlgo() {\n    _classCallCheck(this, TripleDESAlgo);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(TripleDESAlgo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      // Shortcuts\n      var key = this._key;\n      var keyWords = key.words; // Make sure the key length is valid (64, 128 or >= 192 bit)\n\n      if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n        throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n      } // Extend the key according to the keying options defined in 3DES standard\n\n\n      var key1 = keyWords.slice(0, 2);\n      var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n      var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6); // Create DES instances\n\n      this._des1 = DESAlgo.createEncryptor(WordArray.create(key1));\n      this._des2 = DESAlgo.createEncryptor(WordArray.create(key2));\n      this._des3 = DESAlgo.createEncryptor(WordArray.create(key3));\n    }\n  }, {\n    key: \"encryptBlock\",\n    value: function encryptBlock(M, offset) {\n      this._des1.encryptBlock(M, offset);\n\n      this._des2.decryptBlock(M, offset);\n\n      this._des3.encryptBlock(M, offset);\n    }\n  }, {\n    key: \"decryptBlock\",\n    value: function decryptBlock(M, offset) {\n      this._des3.decryptBlock(M, offset);\n\n      this._des2.encryptBlock(M, offset);\n\n      this._des1.decryptBlock(M, offset);\n    }\n  }]);\n\n  return TripleDESAlgo;\n}(BlockCipher);\nTripleDESAlgo.keySize = 192 / 32;\nTripleDESAlgo.ivSize = 64 / 32;\nTripleDESAlgo.blockSize = 64 / 32;\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n */\n\nexport var TripleDES = BlockCipher._createHelper(TripleDESAlgo);","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/tripledes.js"],"names":["WordArray","BlockCipher","PC1","PC2","BIT_SHIFTS","SBOX_P","SBOX_MASK","exchangeLR","offset","mask","t","_lBlock","_rBlock","exchangeRL","DESAlgo","key","_key","keyWords","words","keyBits","i","keyBitPos","_subKeys","subKeys","nSubKey","subKey","bitShift","_invSubKeys","invSubKeys","M","_doCryptBlock","_M","call","round","lBlock","rBlock","f","keySize","ivSize","blockSize","DES","_createHelper","TripleDESAlgo","length","Error","key1","slice","key2","key3","_des1","createEncryptor","create","_des2","_des3","encryptBlock","decryptBlock","TripleDES"],"mappings":";;;;AAAA,SACEA,SADF,QAEO,WAFP;AAGA,SACEC,WADF,QAEO,kBAFP,C,CAIA;;AACA,IAAMC,GAAG,GAAG,CACV,EADU,EACN,EADM,EACF,EADE,EACE,EADF,EACM,EADN,EACU,EADV,EACc,CADd,EACiB,CADjB,EAEV,EAFU,EAEN,EAFM,EAEF,EAFE,EAEE,EAFF,EAEM,EAFN,EAEU,EAFV,EAEc,EAFd,EAEkB,CAFlB,EAGV,EAHU,EAGN,EAHM,EAGF,EAHE,EAGE,EAHF,EAGM,EAHN,EAGU,EAHV,EAGc,EAHd,EAGkB,CAHlB,EAIV,EAJU,EAIN,EAJM,EAIF,EAJE,EAIE,EAJF,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,EAJlB,EAKV,EALU,EAKN,EALM,EAKF,EALE,EAKE,CALF,EAKK,EALL,EAKS,EALT,EAKa,EALb,EAKiB,EALjB,EAMV,EANU,EAMN,EANM,EAMF,EANE,EAME,CANF,EAMK,EANL,EAMS,EANT,EAMa,EANb,EAMiB,EANjB,EAOV,EAPU,EAON,EAPM,EAOF,EAPE,EAOE,CAPF,EAOK,EAPL,EAOS,EAPT,EAOa,EAPb,EAOiB,CAPja,CAAb,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,EAAxD,CAAnB,C,CAEA;;AACA,IAAMC,MAAM,GAAG,CACb;AACE,OAAK,QADP;AAEE,cAAY,MAFd;AAGE,cAAY,QAHd;AAIE,cAAY,GAJd;AAKE,cAAY,KALd;AAME,cAAY,QANd;AAOE,cAAY,QAPd;AAQE,cAAY,QARd;AASE,cAAY,KATd;AAUE,cAAY,QAVd;AAWE,cAAY,MAXd;AAYE,cAAY,QAZd;AAaE,cAAY,MAbd;AAcE,cAAY,QAdd;AAeE,cAAY,GAfd;AAgBE,cAAY,MAhBd;AAiBE,aAAW,GAjBb;AAkBE,cAAY,QAlBd;AAmBE,cAAY,MAnBd;AAoBE,cAAY,MApBd;AAqBE,cAAY,QArBd;AAsBE,cAAY,KAtBd;AAuBE,cAAY,QAvBd;AAwBE,cAAY,GAxBd;AAyBE,cAAY,QAzBd;AA0BE,cAAY,MA1Bd;AA2BE,cAAY,QA3Bd;AA4BE,cAAY,QA5Bd;AA6BE,cAAY,QA7Bd;AA8BE,cAAY,MA9Bd;AA+BE,cAAY,KA/Bd;AAgCE,cAAY,QAhCd;AAiCE,OAAK,MAjCP;AAkCE,cAAY,GAlCd;AAmCE,cAAY,QAnCd;AAoCE,cAAY,QApCd;AAqCE,cAAY,QArCd;AAsCE,cAAY,MAtCd;AAuCE,cAAY,KAvCd;AAwCE,cAAY,QAxCd;AAyCE,cAAY,QAzCd;AA0CE,cAAY,QA1Cd;AA2CE,cAAY,QA3Cd;AA4CE,cAAY,MA5Cd;AA6CE,cAAY,KA7Cd;AA8CE,cAAY,QA9Cd;AA+CE,cAAY,MA/Cd;AAgDE,cAAY,GAhDd;AAiDE,aAAW,QAjDb;AAkDE,cAAY,QAlDd;AAmDE,cAAY,QAnDd;AAoDE,cAAY,KApDd;AAqDE,cAAY,MArDd;AAsDE,cAAY,QAtDd;AAuDE,cAAY,GAvDd;AAwDE,cAAY,MAxDd;AAyDE,cAAY,MAzDd;AA0DE,cAAY,QA1Dd;AA2DE,cAAY,KA3Dd;AA4DE,cAAY,QA5Dd;AA6DE,cAAY,QA7Dd;AA8DE,cAAY,GA9Dd;AA+DE,cAAY,MA/Dd;AAgEE,cAAY;AAhEd,CADa,EAmEb;AACE,OAAK,UADP;AAEE,aAAW,MAFb;AAGE,aAAW,OAHb;AAIE,aAAW,UAJb;AAKE,aAAW,UALb;AAME,aAAW,UANb;AAOE,aAAW,UAPb;AAQE,aAAW,IARb;AASE,aAAW,OATb;AAUE,aAAW,UAVb;AAWE,aAAW,UAXb;AAYE,aAAW,OAZb;AAaE,aAAW,OAbb;AAcE,aAAW,GAdb;AAeE,aAAW,MAfb;AAgBE,aAAW,UAhBb;AAiBE,YAAU,UAjBZ;AAkBE,aAAW,OAlBb;AAmBE,aAAW,IAnBb;AAoBE,aAAW,UApBb;AAqBE,aAAW,UArBb;AAsBE,aAAW,UAtBb;AAuBE,aAAW,OAvBb;AAwBE,aAAW,UAxBb;AAyBE,aAAW,OAzBb;AA0BE,aAAW,GA1Bb;AA2BE,aAAW,MA3Bb;AA4BE,aAAW,UA5Bb;AA6BE,aAAW,UA7Bb;AA8BE,aAAW,OA9Bb;AA+BE,aAAW,UA/Bb;AAgCE,aAAW,MAhCb;AAiCE,cAAY,GAjCd;AAkCE,cAAY,UAlCd;AAmCE,cAAY,UAnCd;AAoCE,cAAY,UApCd;AAqCE,cAAY,UArCd;AAsCE,cAAY,IAtCd;AAuCE,cAAY,OAvCd;AAwCE,cAAY,MAxCd;AAyCE,cAAY,MAzCd;AA0CE,cAAY,OA1Cd;AA2CE,cAAY,OA3Cd;AA4CE,cAAY,UA5Cd;AA6CE,cAAY,OA7Cd;AA8CE,cAAY,UA9Cd;AA+CE,cAAY,UA/Cd;AAgDE,cAAY,UAhDd;AAiDE,cAAY,OAjDd;AAkDE,cAAY,OAlDd;AAmDE,cAAY,UAnDd;AAoDE,cAAY,MApDd;AAqDE,cAAY,UArDd;AAsDE,cAAY,UAtDd;AAuDE,cAAY,IAvDd;AAwDE,cAAY,UAxDd;AAyDE,cAAY,UAzDd;AA0DE,cAAY,UA1Dd;AA2DE,cAAY,UA3Dd;AA4DE,cAAY,OA5Dd;AA6DE,cAAY,GA7Dd;AA8DE,cAAY,MA9Dd;AA+DE,cAAY,UA/Dd;AAgEE,cAAY;AAhEd,CAnEa,EAqIb;AACE,OAAK,KADP;AAEE,YAAU,GAFZ;AAGE,YAAU,SAHZ;AAIE,YAAU,OAJZ;AAKE,YAAU,OALZ;AAME,YAAU,SANZ;AAOE,YAAU,SAPZ;AAQE,YAAU,SARZ;AASE,YAAU,SATZ;AAUE,YAAU,SAVZ;AAWE,YAAU,OAXZ;AAYE,YAAU,SAZZ;AAaE,YAAU,SAbZ;AAcE,YAAU,OAdZ;AAeE,YAAU,GAfZ;AAgBE,YAAU,KAhBZ;AAiBE,WAAS,SAjBX;AAkBE,YAAU,SAlBZ;AAmBE,YAAU,GAnBZ;AAoBE,YAAU,SApBZ;AAqBE,YAAU,SArBZ;AAsBE,YAAU,OAtBZ;AAuBE,YAAU,OAvBZ;AAwBE,YAAU,KAxBZ;AAyBE,YAAU,GAzBZ;AA0BE,YAAU,KA1BZ;AA2BE,YAAU,SA3BZ;AA4BE,YAAU,OA5BZ;AA6BE,YAAU,OA7BZ;AA8BE,YAAU,SA9BZ;AA+BE,YAAU,SA/BZ;AAgCE,YAAU,SAhCZ;AAiCE,aAAW,SAjCb;AAkCE,aAAW,OAlCb;AAmCE,aAAW,OAnCb;AAoCE,aAAW,SApCb;AAqCE,aAAW,KArCb;AAsCE,aAAW,SAtCb;AAuCE,aAAW,SAvCb;AAwCE,aAAW,GAxCb;AAyCE,aAAW,SAzCb;AA0CE,aAAW,SA1Cb;AA2CE,aAAW,GA3Cb;AA4CE,aAAW,OA5Cb;AA6CE,aAAW,SA7Cb;AA8CE,aAAW,KA9Cb;AA+CE,aAAW,OA/Cb;AAgDE,aAAW,SAhDb;AAiDE,aAAW,SAjDb;AAkDE,aAAW,KAlDb;AAmDE,aAAW,SAnDb;AAoDE,aAAW,GApDb;AAqDE,aAAW,OArDb;AAsDE,aAAW,SAtDb;AAuDE,aAAW,KAvDb;AAwDE,aAAW,SAxDb;AAyDE,aAAW,OAzDb;AA0DE,aAAW,SA1Db;AA2DE,aAAW,OA3Db;AA4DE,aAAW,SA5Db;AA6DE,aAAW,SA7Db;AA8DE,aAAW,SA9Db;AA+DE,aAAW,GA/Db;AAgEE,aAAW;AAhEb,CArIa,EAuMb;AACE,OAAK,UADP;AAEE,WAAS,UAFX;AAGE,WAAS,QAHX;AAIE,WAAS,UAJX;AAKE,WAAS,GALX;AAME,WAAS,QANX;AAOE,WAAS,UAPX;AAQE,WAAS,QARX;AASE,WAAS,UATX;AAUE,WAAS,QAVX;AAWE,WAAS,IAXX;AAYE,WAAS,UAZX;AAaE,WAAS,UAbX;AAcE,WAAS,MAdX;AAeE,WAAS,MAfX;AAgBE,WAAS,UAhBX;AAiBE,UAAQ,UAjBV;AAkBE,WAAS,IAlBX;AAmBE,WAAS,UAnBX;AAoBE,WAAS,UApBX;AAqBE,WAAS,QArBX;AAsBE,WAAS,UAtBX;AAuBE,WAAS,GAvBX;AAwBE,WAAS,UAxBX;AAyBE,WAAS,MAzBX;AA0BE,WAAS,UA1BX;AA2BE,WAAS,QA3BX;AA4BE,WAAS,MA5BX;AA6BE,WAAS,UA7BX;AA8BE,WAAS,QA9BX;AA+BE,WAAS,QA/BX;AAgCE,WAAS,UAhCX;AAiCE,YAAU,QAjCZ;AAkCE,YAAU,QAlCZ;AAmCE,YAAU,UAnCZ;AAoCE,YAAU,GApCZ;AAqCE,YAAU,MArCZ;AAsCE,YAAU,UAtCZ;AAuCE,YAAU,UAvCZ;AAwCE,YAAU,UAxCZ;AAyCE,YAAU,UAzCZ;AA0CE,YAAU,UA1CZ;AA2CE,YAAU,UA3CZ;AA4CE,YAAU,QA5CZ;AA6CE,YAAU,UA7CZ;AA8CE,YAAU,QA9CZ;AA+CE,YAAU,IA/CZ;AAgDE,YAAU,MAhDZ;AAiDE,YAAU,UAjDZ;AAkDE,YAAU,UAlDZ;AAmDE,YAAU,GAnDZ;AAoDE,YAAU,QApDZ;AAqDE,YAAU,QArDZ;AAsDE,YAAU,UAtDZ;AAuDE,YAAU,UAvDZ;AAwDE,YAAU,IAxDZ;AAyDE,YAAU,UAzDZ;AA0DE,YAAU,MA1DZ;AA2DE,YAAU,UA3DZ;AA4DE,YAAU,UA5DZ;AA6DE,YAAU,MA7DZ;AA8DE,YAAU,UA9DZ;AA+DE,YAAU,QA/DZ;AAgEE,YAAU;AAhEZ,CAvMa,EAyQb;AACE,OAAK,IADP;AAEE,UAAQ,SAFV;AAGE,UAAQ,OAHV;AAIE,UAAQ,UAJV;AAKE,UAAQ,UALV;AAME,UAAQ,SANV;AAOE,UAAQ,UAPV;AAQE,UAAQ,OARV;AASE,UAAQ,SATV;AAUE,UAAQ,UAVV;AAWE,UAAQ,UAXV;AAYE,UAAQ,UAZV;AAaE,UAAQ,UAbV;AAcE,UAAQ,GAdV;AAeE,UAAQ,SAfV;AAgBE,UAAQ,UAhBV;AAiBE,SAAO,SAjBT;AAkBE,UAAQ,UAlBV;AAmBE,UAAQ,IAnBV;AAoBE,UAAQ,SApBV;AAqBE,UAAQ,OArBV;AAsBE,UAAQ,UAtBV;AAuBE,UAAQ,UAvBV;AAwBE,UAAQ,UAxBV;AAyBE,UAAQ,UAzBV;AA0BE,UAAQ,GA1BV;AA2BE,UAAQ,UA3BV;AA4BE,UAAQ,SA5BV;AA6BE,UAAQ,UA7BV;AA8BE,UAAQ,UA9BV;AA+BE,UAAQ,SA/BV;AAgCE,UAAQ,OAhCV;AAiCE,WAAS,OAjCX;AAkCE,WAAS,IAlCX;AAmCE,WAAS,UAnCX;AAoCE,WAAS,UApCX;AAqCE,WAAS,SArCX;AAsCE,WAAS,UAtCX;AAuCE,WAAS,UAvCX;AAwCE,WAAS,SAxCX;AAyCE,WAAS,UAzCX;AA0CE,WAAS,UA1CX;AA2CE,WAAS,SA3CX;AA4CE,WAAS,UA5CX;AA6CE,WAAS,OA7CX;AA8CE,WAAS,UA9CX;AA+CE,WAAS,GA/CX;AAgDE,WAAS,SAhDX;AAiDE,WAAS,UAjDX;AAkDE,WAAS,SAlDX;AAmDE,WAAS,SAnDX;AAoDE,WAAS,UApDX;AAqDE,WAAS,UArDX;AAsDE,WAAS,SAtDX;AAuDE,WAAS,IAvDX;AAwDE,WAAS,UAxDX;AAyDE,WAAS,OAzDX;AA0DE,WAAS,UA1DX;AA2DE,WAAS,GA3DX;AA4DE,WAAS,UA5DX;AA6DE,WAAS,SA7DX;AA8DE,WAAS,OA9DX;AA+DE,WAAS,UA/DX;AAgEE,WAAS;AAhEX,CAzQa,EA2Ub;AACE,OAAK,UADP;AAEE,SAAO,MAFT;AAGE,SAAO,UAHT;AAIE,SAAO,UAJT;AAKE,SAAO,UALT;AAME,SAAO,QANT;AAOE,SAAO,QAPT;AAQE,SAAO,UART;AASE,SAAO,GATT;AAUE,SAAO,UAVT;AAWE,SAAO,QAXT;AAYE,SAAO,GAZT;AAaE,SAAO,UAbT;AAcE,SAAO,QAdT;AAeE,SAAO,MAfT;AAgBE,SAAO,UAhBT;AAiBE,QAAM,UAjBR;AAkBE,SAAO,UAlBT;AAmBE,SAAO,GAnBT;AAoBE,SAAO,QApBT;AAqBE,SAAO,QArBT;AAsBE,SAAO,UAtBT;AAuBE,SAAO,UAvBT;AAwBE,SAAO,MAxBT;AAyBE,SAAO,QAzBT;AA0BE,SAAO,MA1BT;AA2BE,SAAO,UA3BT;AA4BE,SAAO,UA5BT;AA6BE,SAAO,GA7BT;AA8BE,SAAO,UA9BT;AA+BE,SAAO,QA/BT;AAgCE,SAAO,UAhCT;AAiCE,UAAQ,UAjCV;AAkCE,UAAQ,UAlCV;AAmCE,UAAQ,UAnCV;AAoCE,UAAQ,MApCV;AAqCE,UAAQ,QArCV;AAsCE,UAAQ,UAtCV;AAuCE,UAAQ,UAvCV;AAwCE,UAAQ,QAxCV;AAyCE,UAAQ,QAzCV;AA0CE,UAAQ,GA1CV;AA2CE,UAAQ,GA3CV;AA4CE,UAAQ,UA5CV;AA6CE,UAAQ,MA7CV;AA8CE,UAAQ,UA9CV;AA+CE,UAAQ,UA/CV;AAgDE,UAAQ,QAhDV;AAiDE,UAAQ,GAjDV;AAkDE,UAAQ,QAlDV;AAmDE,UAAQ,QAnDV;AAoDE,UAAQ,UApDV;AAqDE,UAAQ,UArDV;AAsDE,UAAQ,MAtDV;AAuDE,UAAQ,UAvDV;AAwDE,UAAQ,UAxDV;AAyDE,UAAQ,UAzDV;AA0DE,UAAQ,UA1DV;AA2DE,UAAQ,MA3DV;AA4DE,UAAQ,QA5DV;AA6DE,UAAQ,QA7DV;AA8DE,UAAQ,GA9DV;AA+DE,UAAQ,UA/DV;AAgEE,UAAQ;AAhEV,CA3Ua,EA6Yb;AACE,OAAK,QADP;AAEE,QAAM,SAFR;AAGE,QAAM,KAHR;AAIE,QAAM,QAJR;AAKE,QAAM,SALR;AAME,QAAM,GANR;AAOE,QAAM,GAPR;AAQE,QAAM,SARR;AASE,QAAM,SATR;AAUE,QAAM,QAVR;AAWE,QAAM,SAXR;AAYE,QAAM,SAZR;AAaE,QAAM,SAbR;AAcE,QAAM,KAdR;AAeE,QAAM,QAfR;AAgBE,QAAM,SAhBR;AAiBE,OAAK,SAjBP;AAkBE,QAAM,GAlBR;AAmBE,QAAM,SAnBR;AAoBE,QAAM,SApBR;AAqBE,QAAM,QArBR;AAsBE,QAAM,SAtBR;AAuBE,QAAM,SAvBR;AAwBE,QAAM,KAxBR;AAyBE,QAAM,QAzBR;AA0BE,QAAM,SA1BR;AA2BE,QAAM,SA3BR;AA4BE,QAAM,QA5BR;AA6BE,QAAM,KA7BR;AA8BE,QAAM,SA9BR;AA+BE,QAAM,GA/BR;AAgCE,QAAM,QAhCR;AAiCE,SAAO,SAjCT;AAkCE,SAAO,QAlCT;AAmCE,SAAO,SAnCT;AAoCE,SAAO,SApCT;AAqCE,SAAO,QArCT;AAsCE,SAAO,SAtCT;AAuCE,SAAO,SAvCT;AAwCE,SAAO,QAxCT;AAyCE,SAAO,KAzCT;AA0CE,SAAO,SA1CT;AA2CE,SAAO,QA3CT;AA4CE,SAAO,GA5CT;AA6CE,SAAO,GA7CT;AA8CE,SAAO,SA9CT;AA+CE,SAAO,SA/CT;AAgDE,SAAO,KAhDT;AAiDE,SAAO,QAjDT;AAkDE,SAAO,SAlDT;AAmDE,SAAO,SAnDT;AAoDE,SAAO,GApDT;AAqDE,SAAO,SArDT;AAsDE,SAAO,QAtDT;AAuDE,SAAO,KAvDT;AAwDE,SAAO,SAxDT;AAyDE,SAAO,SAzDT;AA0DE,SAAO,SA1DT;AA2DE,SAAO,GA3DT;AA4DE,SAAO,SA5DT;AA6DE,SAAO,QA7DT;AA8DE,SAAO,KA9DT;AA+DE,SAAO,SA/DT;AAgEE,SAAO;AAhET,CA7Ya,EA+cb;AACE,OAAK,SADP;AAEE,OAAK,OAFP;AAGE,OAAK,SAHP;AAIE,OAAK,IAJP;AAKE,OAAK,OALP;AAME,OAAK,SANP;AAOE,OAAK,SAPP;AAQE,OAAK,KARP;AASE,OAAK,SATP;AAUE,OAAK,SAVP;AAWE,OAAK,OAXP;AAYE,OAAK,SAZP;AAaE,OAAK,KAbP;AAcE,OAAK,GAdP;AAeE,OAAK,SAfP;AAgBE,OAAK,OAhBP;AAiBE,cAAY,KAjBd;AAkBE,cAAY,SAlBd;AAmBE,cAAY,SAnBd;AAoBE,cAAY,SApBd;AAqBE,cAAY,SArBd;AAsBE,cAAY,OAtBd;AAuBE,cAAY,OAvBd;AAwBE,cAAY,IAxBd;AAyBE,cAAY,SAzBd;AA0BE,cAAY,KA1Bd;AA2BE,cAAY,OA3Bd;AA4BE,cAAY,SA5Bd;AA6BE,cAAY,GA7Bd;AA8BE,cAAY,SA9Bd;AA+BE,cAAY,SA/Bd;AAgCE,cAAY,OAhCd;AAiCE,QAAM,OAjCR;AAkCE,QAAM,SAlCR;AAmCE,QAAM,IAnCR;AAoCE,QAAM,KApCR;AAqCE,QAAM,SArCR;AAsCE,QAAM,SAtCR;AAuCE,QAAM,SAvCR;AAwCE,QAAM,OAxCR;AAyCE,QAAM,GAzCR;AA0CE,QAAM,OA1CR;AA2CE,QAAM,SA3CR;AA4CE,QAAM,SA5CR;AA6CE,QAAM,SA7CR;AA8CE,QAAM,OA9CR;AA+CE,QAAM,KA/CR;AAgDE,QAAM,SAhDR;AAiDE,cAAY,OAjDd;AAkDE,cAAY,KAlDd;AAmDE,cAAY,SAnDd;AAoDE,cAAY,OApDd;AAqDE,cAAY,IArDd;AAsDE,cAAY,SAtDd;AAuDE,cAAY,SAvDd;AAwDE,cAAY,SAxDd;AAyDE,cAAY,SAzDd;AA0DE,cAAY,SA1Dd;AA2DE,cAAY,SA3Dd;AA4DE,cAAY,GA5Dd;AA6DE,cAAY,OA7Dd;AA8DE,cAAY,KA9Dd;AA+DE,cAAY,OA/Dd;AAgEE,cAAY;AAhEd,CA/ca,CAAf,C,CAmhBA;;AACA,IAAMC,SAAS,GAAG,CAChB,UADgB,EACJ,UADI,EACQ,UADR,EACoB,UADpB,EAEhB,UAFgB,EAEJ,UAFI,EAEQ,UAFR,EAEoB,UAFpB,CAAlB,C,CAKA;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAChC,MAAMC,CAAC,GAAG,CAAE,KAAKC,OAAL,KAAiBH,MAAlB,GAA4B,KAAKI,OAAlC,IAA6CH,IAAvD;AACA,OAAKG,OAAL,IAAgBF,CAAhB;AACA,OAAKC,OAAL,IAAgBD,CAAC,IAAIF,MAArB;AACD;;AAED,SAASK,UAAT,CAAoBL,MAApB,EAA4BC,IAA5B,EAAkC;AAChC,MAAMC,CAAC,GAAG,CAAE,KAAKE,OAAL,KAAiBJ,MAAlB,GAA4B,KAAKG,OAAlC,IAA6CF,IAAvD;AACA,OAAKE,OAAL,IAAgBD,CAAhB;AACA,OAAKE,OAAL,IAAgBF,CAAC,IAAIF,MAArB;AACD;AAED;AACA;AACA;;;AACA,WAAaM,OAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,oBAAW;AACT;AACA,UAAMC,GAAG,GAAG,KAAKC,IAAjB;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,KAArB,CAHS,CAKT;;AACA,UAAMC,OAAO,GAAG,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,YAAMC,SAAS,GAAGnB,GAAG,CAACkB,CAAD,CAAH,GAAS,CAA3B;AACAD,QAAAA,OAAO,CAACC,CAAD,CAAP,GAAcH,QAAQ,CAACI,SAAS,KAAK,CAAf,CAAR,KAA+B,KAAMA,SAAS,GAAG,EAAlD,GAA0D,CAAvE;AACD,OAVQ,CAYT;;;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACA,UAAMC,OAAO,GAAG,KAAKD,QAArB;;AACA,WAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAG,EAAhC,EAAoCA,OAAO,IAAI,CAA/C,EAAkD;AAChD;AACAD,QAAAA,OAAO,CAACC,OAAD,CAAP,GAAmB,EAAnB;AACA,YAAMC,MAAM,GAAGF,OAAO,CAACC,OAAD,CAAtB,CAHgD,CAKhD;;AACA,YAAME,QAAQ,GAAGtB,UAAU,CAACoB,OAAD,CAA3B,CANgD,CAQhD;;AACA,aAAK,IAAIJ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,EAApB,EAAwBA,EAAC,IAAI,CAA7B,EAAgC;AAC9B;AACAK,UAAAA,MAAM,CAAEL,EAAC,GAAG,CAAL,GAAU,CAAX,CAAN,IAAuBD,OAAO,CAAC,CAAEhB,GAAG,CAACiB,EAAD,CAAH,GAAS,CAAV,GAAeM,QAAhB,IAA4B,EAA7B,CAAP,IAA4C,KAAMN,EAAC,GAAG,CAA7E,CAF8B,CAI9B;;AACAK,UAAAA,MAAM,CAAC,KAAML,EAAC,GAAG,CAAL,GAAU,CAAf,CAAD,CAAN,IACKD,OAAO,CAAC,KAAM,CAAEhB,GAAG,CAACiB,EAAC,GAAG,EAAL,CAAH,GAAc,CAAf,GAAoBM,QAArB,IAAiC,EAAxC,CAAP,IACC,KAAMN,EAAC,GAAG,CAFhB;AAGD,SAjB+C,CAmBhD;AACA;AACA;;;AACAK,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAaA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAd,GAAoBA,MAAM,CAAC,CAAD,CAAN,KAAc,EAA9C;;AACA,aAAK,IAAIL,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,CAApB,EAAuBA,GAAC,IAAI,CAA5B,EAA+B;AAC7BK,UAAAA,MAAM,CAACL,GAAD,CAAN,MAAgB,CAACA,GAAC,GAAG,CAAL,IAAU,CAAV,GAAc,CAA9B;AACD;;AACDK,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAaA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAd,GAAoBA,MAAM,CAAC,CAAD,CAAN,KAAc,EAA9C;AACD,OA1CQ,CA4CT;;;AACA,WAAKE,WAAL,GAAmB,EAAnB;AACA,UAAMC,UAAU,GAAG,KAAKD,WAAxB;;AACA,WAAK,IAAIP,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,EAApB,EAAwBA,GAAC,IAAI,CAA7B,EAAgC;AAC9BQ,QAAAA,UAAU,CAACR,GAAD,CAAV,GAAgBG,OAAO,CAAC,KAAKH,GAAN,CAAvB;AACD;AACF;AAnDH;AAAA;AAAA,WAqDE,sBAAaS,CAAb,EAAgBrB,MAAhB,EAAwB;AACtB,WAAKsB,aAAL,CAAmBD,CAAnB,EAAsBrB,MAAtB,EAA8B,KAAKc,QAAnC;AACD;AAvDH;AAAA;AAAA,WAyDE,sBAAaO,CAAb,EAAgBrB,MAAhB,EAAwB;AACtB,WAAKsB,aAAL,CAAmBD,CAAnB,EAAsBrB,MAAtB,EAA8B,KAAKmB,WAAnC;AACD;AA3DH;AAAA;AAAA,WA6DE,uBAAcE,CAAd,EAAiBrB,MAAjB,EAAyBe,OAAzB,EAAkC;AAChC,UAAMQ,EAAE,GAAGF,CAAX,CADgC,CAGhC;;AACA,WAAKlB,OAAL,GAAekB,CAAC,CAACrB,MAAD,CAAhB;AACA,WAAKI,OAAL,GAAeiB,CAAC,CAACrB,MAAM,GAAG,CAAV,CAAhB,CALgC,CAOhC;;AACAD,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAzB,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,EAAtB,EAA0B,UAA1B;AACAnB,MAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAnB,MAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAzB,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB,EAZgC,CAchC;;AACA,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,EAA5B,EAAgCA,KAAK,IAAI,CAAzC,EAA4C;AAC1C;AACA,YAAMR,MAAM,GAAGF,OAAO,CAACU,KAAD,CAAtB;AACA,YAAMC,MAAM,GAAG,KAAKvB,OAApB;AACA,YAAMwB,MAAM,GAAG,KAAKvB,OAApB,CAJ0C,CAM1C;;AACA,YAAIwB,CAAC,GAAG,CAAR;;AACA,aAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7BgB,UAAAA,CAAC,IAAI/B,MAAM,CAACe,CAAD,CAAN,CAAU,CAAC,CAACe,MAAM,GAAGV,MAAM,CAACL,CAAD,CAAhB,IAAuBd,SAAS,CAACc,CAAD,CAAjC,MAA0C,CAApD,CAAL;AACD;;AACD,aAAKT,OAAL,GAAewB,MAAf;AACA,aAAKvB,OAAL,GAAesB,MAAM,GAAGE,CAAxB;AACD,OA5B+B,CA8BhC;;;AACA,UAAM1B,CAAC,GAAG,KAAKC,OAAf;AACA,WAAKA,OAAL,GAAe,KAAKC,OAApB;AACA,WAAKA,OAAL,GAAeF,CAAf,CAjCgC,CAmChC;;AACAH,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAnB,MAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAnB,MAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB;AACAzB,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,EAAtB,EAA0B,UAA1B;AACAzB,MAAAA,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,UAAzB,EAxCgC,CA0ChC;;AACAD,MAAAA,EAAE,CAACvB,MAAD,CAAF,GAAa,KAAKG,OAAlB;AACAoB,MAAAA,EAAE,CAACvB,MAAM,GAAG,CAAV,CAAF,GAAiB,KAAKI,OAAtB;AACD;AA1GH;;AAAA;AAAA,EAA6BX,WAA7B;AA4GAa,OAAO,CAACuB,OAAR,GAAkB,KAAK,EAAvB;AACAvB,OAAO,CAACwB,MAAR,GAAiB,KAAK,EAAtB;AACAxB,OAAO,CAACyB,SAAR,GAAoB,KAAK,EAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,GAAG,GAAGvC,WAAW,CAACwC,aAAZ,CAA0B3B,OAA1B,CAAZ;AAEP;AACA;AACA;;AACA,WAAa4B,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,oBAAW;AACT;AACA,UAAM3B,GAAG,GAAG,KAAKC,IAAjB;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,KAArB,CAHS,CAIT;;AACA,UAAID,QAAQ,CAAC0B,MAAT,KAAoB,CAApB,IAAyB1B,QAAQ,CAAC0B,MAAT,KAAoB,CAA7C,IAAkD1B,QAAQ,CAAC0B,MAAT,GAAkB,CAAxE,EAA2E;AACzE,cAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;AACD,OAPQ,CAST;;;AACA,UAAMC,IAAI,GAAG5B,QAAQ,CAAC6B,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAb;AACA,UAAMC,IAAI,GAAG9B,QAAQ,CAAC0B,MAAT,GAAkB,CAAlB,GAAsB1B,QAAQ,CAAC6B,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAtB,GAA6C7B,QAAQ,CAAC6B,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAA1D;AACA,UAAME,IAAI,GAAG/B,QAAQ,CAAC0B,MAAT,GAAkB,CAAlB,GAAsB1B,QAAQ,CAAC6B,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAtB,GAA6C7B,QAAQ,CAAC6B,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAA1D,CAZS,CAcT;;AACA,WAAKG,KAAL,GAAanC,OAAO,CAACoC,eAAR,CAAwBlD,SAAS,CAACmD,MAAV,CAAiBN,IAAjB,CAAxB,CAAb;AACA,WAAKO,KAAL,GAAatC,OAAO,CAACoC,eAAR,CAAwBlD,SAAS,CAACmD,MAAV,CAAiBJ,IAAjB,CAAxB,CAAb;AACA,WAAKM,KAAL,GAAavC,OAAO,CAACoC,eAAR,CAAwBlD,SAAS,CAACmD,MAAV,CAAiBH,IAAjB,CAAxB,CAAb;AACD;AAnBH;AAAA;AAAA,WAqBE,sBAAanB,CAAb,EAAgBrB,MAAhB,EAAwB;AACtB,WAAKyC,KAAL,CAAWK,YAAX,CAAwBzB,CAAxB,EAA2BrB,MAA3B;;AACA,WAAK4C,KAAL,CAAWG,YAAX,CAAwB1B,CAAxB,EAA2BrB,MAA3B;;AACA,WAAK6C,KAAL,CAAWC,YAAX,CAAwBzB,CAAxB,EAA2BrB,MAA3B;AACD;AAzBH;AAAA;AAAA,WA2BE,sBAAaqB,CAAb,EAAgBrB,MAAhB,EAAwB;AACtB,WAAK6C,KAAL,CAAWE,YAAX,CAAwB1B,CAAxB,EAA2BrB,MAA3B;;AACA,WAAK4C,KAAL,CAAWE,YAAX,CAAwBzB,CAAxB,EAA2BrB,MAA3B;;AACA,WAAKyC,KAAL,CAAWM,YAAX,CAAwB1B,CAAxB,EAA2BrB,MAA3B;AACD;AA/BH;;AAAA;AAAA,EAAmCP,WAAnC;AAiCAyC,aAAa,CAACL,OAAd,GAAwB,MAAM,EAA9B;AACAK,aAAa,CAACJ,MAAd,GAAuB,KAAK,EAA5B;AACAI,aAAa,CAACH,SAAd,GAA0B,KAAK,EAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMiB,SAAS,GAAGvD,WAAW,CAACwC,aAAZ,CAA0BC,aAA1B,CAAlB","sourcesContent":["import {\n  WordArray,\n} from './core.js';\nimport {\n  BlockCipher,\n} from './cipher-core.js';\n\n// Permuted Choice 1 constants\nconst PC1 = [\n  57, 49, 41, 33, 25, 17, 9, 1,\n  58, 50, 42, 34, 26, 18, 10, 2,\n  59, 51, 43, 35, 27, 19, 11, 3,\n  60, 52, 44, 36, 63, 55, 47, 39,\n  31, 23, 15, 7, 62, 54, 46, 38,\n  30, 22, 14, 6, 61, 53, 45, 37,\n  29, 21, 13, 5, 28, 20, 12, 4,\n];\n\n// Permuted Choice 2 constants\nconst PC2 = [\n  14, 17, 11, 24, 1, 5,\n  3, 28, 15, 6, 21, 10,\n  23, 19, 12, 4, 26, 8,\n  16, 7, 27, 20, 13, 2,\n  41, 52, 31, 37, 47, 55,\n  30, 40, 51, 45, 33, 48,\n  44, 49, 39, 56, 34, 53,\n  46, 42, 50, 36, 29, 32,\n];\n\n// Cumulative bit shift constants\nconst BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n// SBOXes and round permutation constants\nconst SBOX_P = [\n  {\n    0x0: 0x808200,\n    0x10000000: 0x8000,\n    0x20000000: 0x808002,\n    0x30000000: 0x2,\n    0x40000000: 0x200,\n    0x50000000: 0x808202,\n    0x60000000: 0x800202,\n    0x70000000: 0x800000,\n    0x80000000: 0x202,\n    0x90000000: 0x800200,\n    0xa0000000: 0x8200,\n    0xb0000000: 0x808000,\n    0xc0000000: 0x8002,\n    0xd0000000: 0x800002,\n    0xe0000000: 0x0,\n    0xf0000000: 0x8202,\n    0x8000000: 0x0,\n    0x18000000: 0x808202,\n    0x28000000: 0x8202,\n    0x38000000: 0x8000,\n    0x48000000: 0x808200,\n    0x58000000: 0x200,\n    0x68000000: 0x808002,\n    0x78000000: 0x2,\n    0x88000000: 0x800200,\n    0x98000000: 0x8200,\n    0xa8000000: 0x808000,\n    0xb8000000: 0x800202,\n    0xc8000000: 0x800002,\n    0xd8000000: 0x8002,\n    0xe8000000: 0x202,\n    0xf8000000: 0x800000,\n    0x1: 0x8000,\n    0x10000001: 0x2,\n    0x20000001: 0x808200,\n    0x30000001: 0x800000,\n    0x40000001: 0x808002,\n    0x50000001: 0x8200,\n    0x60000001: 0x200,\n    0x70000001: 0x800202,\n    0x80000001: 0x808202,\n    0x90000001: 0x808000,\n    0xa0000001: 0x800002,\n    0xb0000001: 0x8202,\n    0xc0000001: 0x202,\n    0xd0000001: 0x800200,\n    0xe0000001: 0x8002,\n    0xf0000001: 0x0,\n    0x8000001: 0x808202,\n    0x18000001: 0x808000,\n    0x28000001: 0x800000,\n    0x38000001: 0x200,\n    0x48000001: 0x8000,\n    0x58000001: 0x800002,\n    0x68000001: 0x2,\n    0x78000001: 0x8202,\n    0x88000001: 0x8002,\n    0x98000001: 0x800202,\n    0xa8000001: 0x202,\n    0xb8000001: 0x808200,\n    0xc8000001: 0x800200,\n    0xd8000001: 0x0,\n    0xe8000001: 0x8200,\n    0xf8000001: 0x808002,\n  },\n  {\n    0x0: 0x40084010,\n    0x1000000: 0x4000,\n    0x2000000: 0x80000,\n    0x3000000: 0x40080010,\n    0x4000000: 0x40000010,\n    0x5000000: 0x40084000,\n    0x6000000: 0x40004000,\n    0x7000000: 0x10,\n    0x8000000: 0x84000,\n    0x9000000: 0x40004010,\n    0xa000000: 0x40000000,\n    0xb000000: 0x84010,\n    0xc000000: 0x80010,\n    0xd000000: 0x0,\n    0xe000000: 0x4010,\n    0xf000000: 0x40080000,\n    0x800000: 0x40004000,\n    0x1800000: 0x84010,\n    0x2800000: 0x10,\n    0x3800000: 0x40004010,\n    0x4800000: 0x40084010,\n    0x5800000: 0x40000000,\n    0x6800000: 0x80000,\n    0x7800000: 0x40080010,\n    0x8800000: 0x80010,\n    0x9800000: 0x0,\n    0xa800000: 0x4000,\n    0xb800000: 0x40080000,\n    0xc800000: 0x40000010,\n    0xd800000: 0x84000,\n    0xe800000: 0x40084000,\n    0xf800000: 0x4010,\n    0x10000000: 0x0,\n    0x11000000: 0x40080010,\n    0x12000000: 0x40004010,\n    0x13000000: 0x40084000,\n    0x14000000: 0x40080000,\n    0x15000000: 0x10,\n    0x16000000: 0x84010,\n    0x17000000: 0x4000,\n    0x18000000: 0x4010,\n    0x19000000: 0x80000,\n    0x1a000000: 0x80010,\n    0x1b000000: 0x40000010,\n    0x1c000000: 0x84000,\n    0x1d000000: 0x40004000,\n    0x1e000000: 0x40000000,\n    0x1f000000: 0x40084010,\n    0x10800000: 0x84010,\n    0x11800000: 0x80000,\n    0x12800000: 0x40080000,\n    0x13800000: 0x4000,\n    0x14800000: 0x40004000,\n    0x15800000: 0x40084010,\n    0x16800000: 0x10,\n    0x17800000: 0x40000000,\n    0x18800000: 0x40084000,\n    0x19800000: 0x40000010,\n    0x1a800000: 0x40004010,\n    0x1b800000: 0x80010,\n    0x1c800000: 0x0,\n    0x1d800000: 0x4010,\n    0x1e800000: 0x40080010,\n    0x1f800000: 0x84000,\n  },\n  {\n    0x0: 0x104,\n    0x100000: 0x0,\n    0x200000: 0x4000100,\n    0x300000: 0x10104,\n    0x400000: 0x10004,\n    0x500000: 0x4000004,\n    0x600000: 0x4010104,\n    0x700000: 0x4010000,\n    0x800000: 0x4000000,\n    0x900000: 0x4010100,\n    0xa00000: 0x10100,\n    0xb00000: 0x4010004,\n    0xc00000: 0x4000104,\n    0xd00000: 0x10000,\n    0xe00000: 0x4,\n    0xf00000: 0x100,\n    0x80000: 0x4010100,\n    0x180000: 0x4010004,\n    0x280000: 0x0,\n    0x380000: 0x4000100,\n    0x480000: 0x4000004,\n    0x580000: 0x10000,\n    0x680000: 0x10004,\n    0x780000: 0x104,\n    0x880000: 0x4,\n    0x980000: 0x100,\n    0xa80000: 0x4010000,\n    0xb80000: 0x10104,\n    0xc80000: 0x10100,\n    0xd80000: 0x4000104,\n    0xe80000: 0x4010104,\n    0xf80000: 0x4000000,\n    0x1000000: 0x4010100,\n    0x1100000: 0x10004,\n    0x1200000: 0x10000,\n    0x1300000: 0x4000100,\n    0x1400000: 0x100,\n    0x1500000: 0x4010104,\n    0x1600000: 0x4000004,\n    0x1700000: 0x0,\n    0x1800000: 0x4000104,\n    0x1900000: 0x4000000,\n    0x1a00000: 0x4,\n    0x1b00000: 0x10100,\n    0x1c00000: 0x4010000,\n    0x1d00000: 0x104,\n    0x1e00000: 0x10104,\n    0x1f00000: 0x4010004,\n    0x1080000: 0x4000000,\n    0x1180000: 0x104,\n    0x1280000: 0x4010100,\n    0x1380000: 0x0,\n    0x1480000: 0x10004,\n    0x1580000: 0x4000100,\n    0x1680000: 0x100,\n    0x1780000: 0x4010004,\n    0x1880000: 0x10000,\n    0x1980000: 0x4010104,\n    0x1a80000: 0x10104,\n    0x1b80000: 0x4000004,\n    0x1c80000: 0x4000104,\n    0x1d80000: 0x4010000,\n    0x1e80000: 0x4,\n    0x1f80000: 0x10100,\n  },\n  {\n    0x0: 0x80401000,\n    0x10000: 0x80001040,\n    0x20000: 0x401040,\n    0x30000: 0x80400000,\n    0x40000: 0x0,\n    0x50000: 0x401000,\n    0x60000: 0x80000040,\n    0x70000: 0x400040,\n    0x80000: 0x80000000,\n    0x90000: 0x400000,\n    0xa0000: 0x40,\n    0xb0000: 0x80001000,\n    0xc0000: 0x80400040,\n    0xd0000: 0x1040,\n    0xe0000: 0x1000,\n    0xf0000: 0x80401040,\n    0x8000: 0x80001040,\n    0x18000: 0x40,\n    0x28000: 0x80400040,\n    0x38000: 0x80001000,\n    0x48000: 0x401000,\n    0x58000: 0x80401040,\n    0x68000: 0x0,\n    0x78000: 0x80400000,\n    0x88000: 0x1000,\n    0x98000: 0x80401000,\n    0xa8000: 0x400000,\n    0xb8000: 0x1040,\n    0xc8000: 0x80000000,\n    0xd8000: 0x400040,\n    0xe8000: 0x401040,\n    0xf8000: 0x80000040,\n    0x100000: 0x400040,\n    0x110000: 0x401000,\n    0x120000: 0x80000040,\n    0x130000: 0x0,\n    0x140000: 0x1040,\n    0x150000: 0x80400040,\n    0x160000: 0x80401000,\n    0x170000: 0x80001040,\n    0x180000: 0x80401040,\n    0x190000: 0x80000000,\n    0x1a0000: 0x80400000,\n    0x1b0000: 0x401040,\n    0x1c0000: 0x80001000,\n    0x1d0000: 0x400000,\n    0x1e0000: 0x40,\n    0x1f0000: 0x1000,\n    0x108000: 0x80400000,\n    0x118000: 0x80401040,\n    0x128000: 0x0,\n    0x138000: 0x401000,\n    0x148000: 0x400040,\n    0x158000: 0x80000000,\n    0x168000: 0x80001040,\n    0x178000: 0x40,\n    0x188000: 0x80000040,\n    0x198000: 0x1000,\n    0x1a8000: 0x80001000,\n    0x1b8000: 0x80400040,\n    0x1c8000: 0x1040,\n    0x1d8000: 0x80401000,\n    0x1e8000: 0x400000,\n    0x1f8000: 0x401040,\n  },\n  {\n    0x0: 0x80,\n    0x1000: 0x1040000,\n    0x2000: 0x40000,\n    0x3000: 0x20000000,\n    0x4000: 0x20040080,\n    0x5000: 0x1000080,\n    0x6000: 0x21000080,\n    0x7000: 0x40080,\n    0x8000: 0x1000000,\n    0x9000: 0x20040000,\n    0xa000: 0x20000080,\n    0xb000: 0x21040080,\n    0xc000: 0x21040000,\n    0xd000: 0x0,\n    0xe000: 0x1040080,\n    0xf000: 0x21000000,\n    0x800: 0x1040080,\n    0x1800: 0x21000080,\n    0x2800: 0x80,\n    0x3800: 0x1040000,\n    0x4800: 0x40000,\n    0x5800: 0x20040080,\n    0x6800: 0x21040000,\n    0x7800: 0x20000000,\n    0x8800: 0x20040000,\n    0x9800: 0x0,\n    0xa800: 0x21040080,\n    0xb800: 0x1000080,\n    0xc800: 0x20000080,\n    0xd800: 0x21000000,\n    0xe800: 0x1000000,\n    0xf800: 0x40080,\n    0x10000: 0x40000,\n    0x11000: 0x80,\n    0x12000: 0x20000000,\n    0x13000: 0x21000080,\n    0x14000: 0x1000080,\n    0x15000: 0x21040000,\n    0x16000: 0x20040080,\n    0x17000: 0x1000000,\n    0x18000: 0x21040080,\n    0x19000: 0x21000000,\n    0x1a000: 0x1040000,\n    0x1b000: 0x20040000,\n    0x1c000: 0x40080,\n    0x1d000: 0x20000080,\n    0x1e000: 0x0,\n    0x1f000: 0x1040080,\n    0x10800: 0x21000080,\n    0x11800: 0x1000000,\n    0x12800: 0x1040000,\n    0x13800: 0x20040080,\n    0x14800: 0x20000000,\n    0x15800: 0x1040080,\n    0x16800: 0x80,\n    0x17800: 0x21040000,\n    0x18800: 0x40080,\n    0x19800: 0x21040080,\n    0x1a800: 0x0,\n    0x1b800: 0x21000000,\n    0x1c800: 0x1000080,\n    0x1d800: 0x40000,\n    0x1e800: 0x20040000,\n    0x1f800: 0x20000080,\n  },\n  {\n    0x0: 0x10000008,\n    0x100: 0x2000,\n    0x200: 0x10200000,\n    0x300: 0x10202008,\n    0x400: 0x10002000,\n    0x500: 0x200000,\n    0x600: 0x200008,\n    0x700: 0x10000000,\n    0x800: 0x0,\n    0x900: 0x10002008,\n    0xa00: 0x202000,\n    0xb00: 0x8,\n    0xc00: 0x10200008,\n    0xd00: 0x202008,\n    0xe00: 0x2008,\n    0xf00: 0x10202000,\n    0x80: 0x10200000,\n    0x180: 0x10202008,\n    0x280: 0x8,\n    0x380: 0x200000,\n    0x480: 0x202008,\n    0x580: 0x10000008,\n    0x680: 0x10002000,\n    0x780: 0x2008,\n    0x880: 0x200008,\n    0x980: 0x2000,\n    0xa80: 0x10002008,\n    0xb80: 0x10200008,\n    0xc80: 0x0,\n    0xd80: 0x10202000,\n    0xe80: 0x202000,\n    0xf80: 0x10000000,\n    0x1000: 0x10002000,\n    0x1100: 0x10200008,\n    0x1200: 0x10202008,\n    0x1300: 0x2008,\n    0x1400: 0x200000,\n    0x1500: 0x10000000,\n    0x1600: 0x10000008,\n    0x1700: 0x202000,\n    0x1800: 0x202008,\n    0x1900: 0x0,\n    0x1a00: 0x8,\n    0x1b00: 0x10200000,\n    0x1c00: 0x2000,\n    0x1d00: 0x10002008,\n    0x1e00: 0x10202000,\n    0x1f00: 0x200008,\n    0x1080: 0x8,\n    0x1180: 0x202000,\n    0x1280: 0x200000,\n    0x1380: 0x10000008,\n    0x1480: 0x10002000,\n    0x1580: 0x2008,\n    0x1680: 0x10202008,\n    0x1780: 0x10200000,\n    0x1880: 0x10202000,\n    0x1980: 0x10200008,\n    0x1a80: 0x2000,\n    0x1b80: 0x202008,\n    0x1c80: 0x200008,\n    0x1d80: 0x0,\n    0x1e80: 0x10000000,\n    0x1f80: 0x10002008,\n  },\n  {\n    0x0: 0x100000,\n    0x10: 0x2000401,\n    0x20: 0x400,\n    0x30: 0x100401,\n    0x40: 0x2100401,\n    0x50: 0x0,\n    0x60: 0x1,\n    0x70: 0x2100001,\n    0x80: 0x2000400,\n    0x90: 0x100001,\n    0xa0: 0x2000001,\n    0xb0: 0x2100400,\n    0xc0: 0x2100000,\n    0xd0: 0x401,\n    0xe0: 0x100400,\n    0xf0: 0x2000000,\n    0x8: 0x2100001,\n    0x18: 0x0,\n    0x28: 0x2000401,\n    0x38: 0x2100400,\n    0x48: 0x100000,\n    0x58: 0x2000001,\n    0x68: 0x2000000,\n    0x78: 0x401,\n    0x88: 0x100401,\n    0x98: 0x2000400,\n    0xa8: 0x2100000,\n    0xb8: 0x100001,\n    0xc8: 0x400,\n    0xd8: 0x2100401,\n    0xe8: 0x1,\n    0xf8: 0x100400,\n    0x100: 0x2000000,\n    0x110: 0x100000,\n    0x120: 0x2000401,\n    0x130: 0x2100001,\n    0x140: 0x100001,\n    0x150: 0x2000400,\n    0x160: 0x2100400,\n    0x170: 0x100401,\n    0x180: 0x401,\n    0x190: 0x2100401,\n    0x1a0: 0x100400,\n    0x1b0: 0x1,\n    0x1c0: 0x0,\n    0x1d0: 0x2100000,\n    0x1e0: 0x2000001,\n    0x1f0: 0x400,\n    0x108: 0x100400,\n    0x118: 0x2000401,\n    0x128: 0x2100001,\n    0x138: 0x1,\n    0x148: 0x2000000,\n    0x158: 0x100000,\n    0x168: 0x401,\n    0x178: 0x2100400,\n    0x188: 0x2000001,\n    0x198: 0x2100000,\n    0x1a8: 0x0,\n    0x1b8: 0x2100401,\n    0x1c8: 0x100401,\n    0x1d8: 0x400,\n    0x1e8: 0x2000400,\n    0x1f8: 0x100001,\n  },\n  {\n    0x0: 0x8000820,\n    0x1: 0x20000,\n    0x2: 0x8000000,\n    0x3: 0x20,\n    0x4: 0x20020,\n    0x5: 0x8020820,\n    0x6: 0x8020800,\n    0x7: 0x800,\n    0x8: 0x8020000,\n    0x9: 0x8000800,\n    0xa: 0x20800,\n    0xb: 0x8020020,\n    0xc: 0x820,\n    0xd: 0x0,\n    0xe: 0x8000020,\n    0xf: 0x20820,\n    0x80000000: 0x800,\n    0x80000001: 0x8020820,\n    0x80000002: 0x8000820,\n    0x80000003: 0x8000000,\n    0x80000004: 0x8020000,\n    0x80000005: 0x20800,\n    0x80000006: 0x20820,\n    0x80000007: 0x20,\n    0x80000008: 0x8000020,\n    0x80000009: 0x820,\n    0x8000000a: 0x20020,\n    0x8000000b: 0x8020800,\n    0x8000000c: 0x0,\n    0x8000000d: 0x8020020,\n    0x8000000e: 0x8000800,\n    0x8000000f: 0x20000,\n    0x10: 0x20820,\n    0x11: 0x8020800,\n    0x12: 0x20,\n    0x13: 0x800,\n    0x14: 0x8000800,\n    0x15: 0x8000020,\n    0x16: 0x8020020,\n    0x17: 0x20000,\n    0x18: 0x0,\n    0x19: 0x20020,\n    0x1a: 0x8020000,\n    0x1b: 0x8000820,\n    0x1c: 0x8020820,\n    0x1d: 0x20800,\n    0x1e: 0x820,\n    0x1f: 0x8000000,\n    0x80000010: 0x20000,\n    0x80000011: 0x800,\n    0x80000012: 0x8020020,\n    0x80000013: 0x20820,\n    0x80000014: 0x20,\n    0x80000015: 0x8020000,\n    0x80000016: 0x8000000,\n    0x80000017: 0x8000820,\n    0x80000018: 0x8020820,\n    0x80000019: 0x8000020,\n    0x8000001a: 0x8000800,\n    0x8000001b: 0x0,\n    0x8000001c: 0x20800,\n    0x8000001d: 0x820,\n    0x8000001e: 0x20020,\n    0x8000001f: 0x8020800,\n  },\n];\n\n// Masks that select the SBOX input\nconst SBOX_MASK = [\n  0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n  0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f,\n];\n\n// Swap bits across the left and right words\nfunction exchangeLR(offset, mask) {\n  const t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n  this._rBlock ^= t;\n  this._lBlock ^= t << offset;\n}\n\nfunction exchangeRL(offset, mask) {\n  const t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n  this._lBlock ^= t;\n  this._rBlock ^= t << offset;\n}\n\n/**\n * DES block cipher algorithm.\n */\nexport class DESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n\n    // Select 56 bits according to PC1\n    const keyBits = [];\n    for (let i = 0; i < 56; i += 1) {\n      const keyBitPos = PC1[i] - 1;\n      keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - (keyBitPos % 32))) & 1;\n    }\n\n    // Assemble 16 subkeys\n    this._subKeys = [];\n    const subKeys = this._subKeys;\n    for (let nSubKey = 0; nSubKey < 16; nSubKey += 1) {\n      // Create subkey\n      subKeys[nSubKey] = [];\n      const subKey = subKeys[nSubKey];\n\n      // Shortcut\n      const bitShift = BIT_SHIFTS[nSubKey];\n\n      // Select 48 bits according to PC2\n      for (let i = 0; i < 24; i += 1) {\n        // Select from the left 28 key bits\n        subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - (i % 6));\n\n        // Select from the right 28 key bits\n        subKey[4 + ((i / 6) | 0)]\n          |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)]\n          << (31 - (i % 6));\n      }\n\n      // Since each subkey is applied to an expanded 32-bit input,\n      // the subkey can be broken into 8 values scaled to 32-bits,\n      // which allows the key to be used without expansion\n      subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n      for (let i = 1; i < 7; i += 1) {\n        subKey[i] >>>= ((i - 1) * 4 + 3);\n      }\n      subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n    }\n\n    // Compute inverse subkeys\n    this._invSubKeys = [];\n    const invSubKeys = this._invSubKeys;\n    for (let i = 0; i < 16; i += 1) {\n      invSubKeys[i] = subKeys[15 - i];\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._subKeys);\n  }\n\n  decryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._invSubKeys);\n  }\n\n  _doCryptBlock(M, offset, subKeys) {\n    const _M = M;\n\n    // Get input\n    this._lBlock = M[offset];\n    this._rBlock = M[offset + 1];\n\n    // Initial permutation\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeLR.call(this, 1, 0x55555555);\n\n    // Rounds\n    for (let round = 0; round < 16; round += 1) {\n      // Shortcuts\n      const subKey = subKeys[round];\n      const lBlock = this._lBlock;\n      const rBlock = this._rBlock;\n\n      // Feistel function\n      let f = 0;\n      for (let i = 0; i < 8; i += 1) {\n        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n      }\n      this._lBlock = rBlock;\n      this._rBlock = lBlock ^ f;\n    }\n\n    // Undo swap from last round\n    const t = this._lBlock;\n    this._lBlock = this._rBlock;\n    this._rBlock = t;\n\n    // Final permutation\n    exchangeLR.call(this, 1, 0x55555555);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n    // Set output\n    _M[offset] = this._lBlock;\n    _M[offset + 1] = this._rBlock;\n  }\n}\nDESAlgo.keySize = 64 / 32;\nDESAlgo.ivSize = 64 / 32;\nDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n */\nexport const DES = BlockCipher._createHelper(DESAlgo);\n\n/**\n * Triple-DES block cipher algorithm.\n */\nexport class TripleDESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    // Make sure the key length is valid (64, 128 or >= 192 bit)\n    if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n      throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n    }\n\n    // Extend the key according to the keying options defined in 3DES standard\n    const key1 = keyWords.slice(0, 2);\n    const key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n    const key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n    // Create DES instances\n    this._des1 = DESAlgo.createEncryptor(WordArray.create(key1));\n    this._des2 = DESAlgo.createEncryptor(WordArray.create(key2));\n    this._des3 = DESAlgo.createEncryptor(WordArray.create(key3));\n  }\n\n  encryptBlock(M, offset) {\n    this._des1.encryptBlock(M, offset);\n    this._des2.decryptBlock(M, offset);\n    this._des3.encryptBlock(M, offset);\n  }\n\n  decryptBlock(M, offset) {\n    this._des3.decryptBlock(M, offset);\n    this._des2.encryptBlock(M, offset);\n    this._des1.decryptBlock(M, offset);\n  }\n}\nTripleDESAlgo.keySize = 192 / 32;\nTripleDESAlgo.ivSize = 64 / 32;\nTripleDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n */\nexport const TripleDES = BlockCipher._createHelper(TripleDESAlgo);\n"]},"metadata":{},"sourceType":"module"}