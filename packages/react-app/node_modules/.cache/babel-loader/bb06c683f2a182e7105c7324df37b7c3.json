{"ast":null,"code":"// heading (#, ##, ...)\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch,\n      level,\n      tmp,\n      token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23\n  /* # */\n  || pos >= max) {\n    return false;\n  } // count heading level\n\n\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n\n  while (ch === 0x23\n  /* # */\n  && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || pos < max && !isSpace(ch)) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  } // Let's cut tails like '    ###  ' from the end of string\n\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n  token = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map = [startLine, state.line];\n  token = state.push('inline', '', 0);\n  token.content = state.src.slice(pos, max).trim();\n  token.map = [startLine, state.line];\n  token.children = [];\n  token = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_block/heading.js"],"names":["isSpace","require","module","exports","heading","state","startLine","endLine","silent","ch","level","tmp","token","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","src","charCodeAt","skipSpacesBack","skipCharsBack","line","push","String","markup","slice","map","content","trim","children"],"mappings":"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","sourcesContent":["// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}