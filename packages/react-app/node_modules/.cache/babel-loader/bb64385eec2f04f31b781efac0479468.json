{"ast":null,"code":"'use strict';\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\n\nfunction Protocols(proto) {\n  if (typeof proto === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto];\n    }\n\n    throw new Error('no protocol with code: ' + proto);\n  } else if (typeof proto === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto];\n    }\n\n    throw new Error('no protocol with name: ' + proto);\n  }\n\n  throw new Error('invalid protocol id type: ' + proto);\n}\n\nvar V = -1;\nProtocols.lengthPrefixedVarSize = V;\nProtocols.V = V;\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\n\nProtocols.table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [42, V, 'ip6zone'], [53, V, 'dns', 'resolvable'], [54, V, 'dns4', 'resolvable'], [55, V, 'dns6', 'resolvable'], [56, V, 'dnsaddr', 'resolvable'], [132, 16, 'sctp'], [273, 16, 'udp'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [277, 0, 'p2p-stardust'], [290, 0, 'p2p-circuit'], [301, 0, 'udt'], [302, 0, 'utp'], [400, V, 'unix', false, 'path'], // `ipfs` is added before `p2p` for legacy support.\n// All text representations will default to `p2p`, but `ipfs` will\n// still be supported\n[421, V, 'ipfs'], // `p2p` is the preferred name for 421, and is now the default\n[421, V, 'p2p'], [443, 0, 'https'], [444, 96, 'onion'], [445, 296, 'onion3'], [446, V, 'garlic64'], [460, 0, 'quic'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [480, 0, 'http'], [777, V, 'memory']];\n/** @type {Record<string,Protocol>} */\n\nProtocols.names = {};\n/** @type {Record<number,Protocol>} */\n\nProtocols.codes = {}; // populate tables\n\nProtocols.table.map(function (row) {\n  var proto = p.apply(null, row);\n  Protocols.codes[proto.code] = proto;\n  Protocols.names[proto.name] = proto;\n  return null;\n});\nProtocols.object = p;\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\n\nfunction p(code, size, name, resolvable, path) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  };\n}\n\nmodule.exports = Protocols;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/multiaddr/src/protocols-table.js"],"names":["Protocols","proto","codes","Error","names","V","lengthPrefixedVarSize","table","map","row","p","apply","code","name","object","size","resolvable","path","Boolean","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', 'resolvable'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, 'path'],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n/** @type {Record<string,Protocol>} */\nProtocols.names = {}\n/** @type {Record<number,Protocol>} */\nProtocols.codes = {}\n\n// populate tables\nProtocols.table.map(row => {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n  return null\n})\n\nProtocols.object = p\n\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\nfunction p (code, size, name, resolvable, path) {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nmodule.exports = Protocols\n"]},"metadata":{},"sourceType":"script"}