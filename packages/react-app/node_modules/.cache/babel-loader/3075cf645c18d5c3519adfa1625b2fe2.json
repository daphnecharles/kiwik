{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags;\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\") + (regexp.global ? \"g\" : \"\") + (regexp.multiline ? \"m\" : \"\");\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp),\n        target = current;\n\n    for (var i = 0; i < flags.length; i++) {\n      if (target.indexOf(flags.charAt(i)) == -1) target += flags.charAt(i);\n    }\n\n    return current == target ? regexp : new RegExp(regexp.source, target);\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch;\n      var string = doc.getLine(line),\n          match = regexp.exec(string);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunk = 1;\n\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break;\n        var curLine = doc.getLine(line++);\n        string = string == null ? curLine : string + \"\\n\" + curLine;\n      }\n\n      chunk = chunk * 2;\n      regexp.lastIndex = start.ch;\n      var match = regexp.exec(string);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = start.line + before.length - 1,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match,\n        from = 0;\n\n    while (from <= string.length) {\n      regexp.lastIndex = from;\n      var newMatch = regexp.exec(string);\n      if (!newMatch) break;\n      var end = newMatch.index + newMatch[0].length;\n      if (end > string.length - endMargin) break;\n      if (!match || end > match.index + match[0].length) match = newMatch;\n      from = newMatch.index + 1;\n    }\n\n    return match;\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line);\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunkSize = 1,\n        endMargin = doc.getLine(start.line).length - start.ch;\n\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--);\n        string = string == null ? curLine : curLine + \"\\n\" + string;\n      }\n\n      chunkSize *= 2;\n      var match = lastMatchIn(string, regexp, endMargin);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = line + before.length,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  var doFold, noFold;\n\n  if (String.prototype.normalize) {\n    doFold = function doFold(str) {\n      return str.normalize(\"NFD\").toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str.normalize(\"NFD\");\n    };\n  } else {\n    doFold = function doFold(str) {\n      return str.toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str;\n    };\n  } // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n\n\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos;\n\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min;\n      var mid = min + max >> 1;\n      var len = foldFunc(orig.slice(0, mid)).length;\n      if (len == pos) return mid;else if (len > pos) max = mid;else min = mid + 1;\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch),\n          string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0]);\n        if (found == -1) continue search;\n        var start = adjustPos(orig, string, found, fold) + ch;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n        };\n      } else {\n        var cutFrom = string.length - lines[0].length;\n        if (string.slice(cutFrom) != lines[0]) continue search;\n\n        for (var i = 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search;\n        }\n\n        var end = doc.getLine(line + lines.length - 1),\n            endString = fold(end),\n            lastLine = lines[lines.length - 1];\n        if (endString.slice(0, lastLine.length) != lastLine) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n          to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line);\n      if (ch > -1) orig = orig.slice(0, ch);\n      var string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0]);\n        if (found == -1) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold)),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n        };\n      } else {\n        var lastLine = lines[lines.length - 1];\n        if (string.slice(0, lastLine.length) != lastLine) continue search;\n\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search;\n        }\n\n        var top = doc.getLine(line + 1 - lines.length),\n            topString = fold(top);\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search;\n        return {\n          from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n          to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false;\n    this.afterEmptyMatch = false;\n    this.doc = doc;\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {\n      from: pos,\n      to: pos\n    };\n    var caseFold;\n\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold;\n    } else {\n      // Backwards compat for when caseFold was the 4th argument\n      caseFold = options;\n      options = null;\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false;\n\n      this.matches = function (reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold);\n      };\n    } else {\n      query = ensureFlags(query, \"gm\");\n      if (!options || options.multiline !== false) this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos);\n      };else this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos);\n      };\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function findNext() {\n      return this.find(false);\n    },\n    findPrevious: function findPrevious() {\n      return this.find(true);\n    },\n    find: function find(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch);\n\n        if (reverse) {\n          head.ch--;\n\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n          return this.atOccurrence = false;\n        }\n      }\n\n      var result = this.matches(reverse, head);\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n\n      if (result) {\n        this.pos = result;\n        this.atOccurrence = true;\n        return this.pos.match || true;\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n        this.pos = {\n          from: end,\n          to: end\n        };\n        return this.atOccurrence = false;\n      }\n    },\n    from: function from() {\n      if (this.atOccurrence) return this.pos.from;\n    },\n    to: function to() {\n      if (this.atOccurrence) return this.pos.to;\n    },\n    replace: function replace(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n  CodeMirror.defineExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n  CodeMirror.defineExtension(\"selectMatches\", function (query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({\n        anchor: cur.from(),\n        head: cur.to()\n      });\n    }\n\n    if (ranges.length) this.setSelections(ranges, 0);\n  });\n});","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/codemirror/addon/search/searchcursor.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Pos","regexpFlags","regexp","flags","ignoreCase","global","multiline","ensureFlags","current","target","i","length","indexOf","charAt","RegExp","source","maybeMultiline","test","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","searchRegexpForwardMultiline","chunk","curLine","before","slice","split","inside","startLine","startCh","lastMatchIn","endMargin","newMatch","end","searchRegexpBackward","first","firstLine","searchRegexpBackwardMultiline","chunkSize","doFold","noFold","String","prototype","normalize","str","toLowerCase","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","searchStringForward","query","caseFold","fold","lines","search","found","cutFrom","endString","searchStringBackward","lastIndexOf","top","topString","SearchCursor","options","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","findNext","find","findPrevious","head","cmpPos","result","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","setSelections"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"]},"metadata":{},"sourceType":"script"}