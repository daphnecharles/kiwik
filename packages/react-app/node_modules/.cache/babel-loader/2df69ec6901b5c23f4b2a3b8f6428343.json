{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar Zeros = new Uint8Array(32);\nZeros.fill(0);\nvar Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n  try {\n    var comps = name.split(\".\");\n\n    for (var i = 0; i < comps.length; i++) {\n      if (nameprep(comps[i]).length === 0) {\n        throw new Error(\"empty\");\n      }\n    }\n\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n  }\n\n  var current = name;\n  var result = Zeros;\n\n  while (current.length) {\n    var partition = current.match(Partition);\n\n    if (partition == null || partition[2] === \"\") {\n      logger.throwArgumentError(\"invalid ENS address; missing component\", \"name\", name);\n    }\n\n    var label = toUtf8Bytes(nameprep(partition[3]));\n    result = keccak256(concat([result, keccak256(label)]));\n    current = partition[2] || \"\";\n  }\n\n  return hexlify(result);\n}","map":{"version":3,"sources":["../src.ts/namehash.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,OAAjB,QAAgC,sBAAhC;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,wBAAtC;AACA,SAAS,SAAT,QAA0B,0BAA1B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,IAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAd;AACA,KAAK,CAAC,IAAN,CAAW,CAAX;AAEA,IAAM,SAAS,GAAG,IAAI,MAAJ,CAAW,qBAAX,CAAlB;AAEA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAkC;AACpC,MAAI;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,UAAI,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,CAAR,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,cAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GARD,CAQE,OAAO,KAAP,EAAc,CAAG;;AACnB,SAAO,KAAP;AACH;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA+B;AACjC;AACA,MAAI,OAAO,IAAP,KAAiB,QAArB,EAA+B;AAC3B,IAAA,MAAM,CAAC,kBAAP,CAA0B,gCAA1B,EAA4D,MAA5D,EAAoE,IAApE;AACH;;AAED,MAAI,OAAO,GAAG,IAAd;AACA,MAAI,MAAM,GAAwB,KAAlC;;AACA,SAAO,OAAO,CAAC,MAAf,EAAuB;AACnB,QAAM,SAAS,GAAG,OAAO,CAAC,KAAR,CAAc,SAAd,CAAlB;;AACA,QAAI,SAAS,IAAI,IAAb,IAAqB,SAAS,CAAC,CAAD,CAAT,KAAiB,EAA1C,EAA8C;AAC1C,MAAA,MAAM,CAAC,kBAAP,CAA0B,wCAA1B,EAAoE,MAApE,EAA4E,IAA5E;AACH;;AACD,QAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAD,CAAV,CAAT,CAAzB;AACA,IAAA,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,MAAD,EAAS,SAAS,CAAC,KAAD,CAAlB,CAAD,CAAP,CAAlB;AAEA,IAAA,OAAO,GAAG,SAAS,CAAC,CAAD,CAAT,IAAgB,EAA1B;AACH;;AAED,SAAO,OAAO,CAAC,MAAD,CAAd;AACH","sourceRoot":"","sourcesContent":["import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n    try {\n        const comps = name.split(\".\");\n        for (let i = 0; i < comps.length; i++) {\n            if (nameprep(comps[i]).length === 0) {\n                throw new Error(\"empty\");\n            }\n        }\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function namehash(name) {\n    /* istanbul ignore if */\n    if (typeof (name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let current = name;\n    let result = Zeros;\n    while (current.length) {\n        const partition = current.match(Partition);\n        if (partition == null || partition[2] === \"\") {\n            logger.throwArgumentError(\"invalid ENS address; missing component\", \"name\", name);\n        }\n        const label = toUtf8Bytes(nameprep(partition[3]));\n        result = keccak256(concat([result, keccak256(label)]));\n        current = partition[2] || \"\";\n    }\n    return hexlify(result);\n}\n//# sourceMappingURL=namehash.js.map"]},"metadata":{},"sourceType":"module"}