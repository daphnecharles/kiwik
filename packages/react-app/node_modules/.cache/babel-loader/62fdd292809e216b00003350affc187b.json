{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\n\nvar graphql_language_service_parser_1 = require(\"graphql-language-service-parser\");\n\ncodemirror_1.default.defineMode('graphql-variables', function (config) {\n  var parser = graphql_language_service_parser_1.onlineParser({\n    eatWhitespace: function eatWhitespace(stream) {\n      return stream.eatSpace();\n    },\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config: config,\n    startState: parser.startState,\n    token: parser.token,\n    indent: indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: 'brace',\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: '[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  var _a, _b;\n\n  var levels = state.levels;\n  var level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n\nvar LexRules = {\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  Keyword: /^true|false|null/\n};\nvar ParseRules = {\n  Document: [graphql_language_service_parser_1.p('{'), graphql_language_service_parser_1.list('Variable', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p('}')],\n  Variable: [namedKey('variable'), graphql_language_service_parser_1.p(':'), 'Value'],\n  Value: function Value(token) {\n    switch (token.kind) {\n      case 'Number':\n        return 'NumberValue';\n\n      case 'String':\n        return 'StringValue';\n\n      case 'Punctuation':\n        switch (token.value) {\n          case '[':\n            return 'ListValue';\n\n          case '{':\n            return 'ObjectValue';\n        }\n\n        return null;\n\n      case 'Keyword':\n        switch (token.value) {\n          case 'true':\n          case 'false':\n            return 'BooleanValue';\n\n          case 'null':\n            return 'NullValue';\n        }\n\n        return null;\n    }\n  },\n  NumberValue: [graphql_language_service_parser_1.t('Number', 'number')],\n  StringValue: [graphql_language_service_parser_1.t('String', 'string')],\n  BooleanValue: [graphql_language_service_parser_1.t('Keyword', 'builtin')],\n  NullValue: [graphql_language_service_parser_1.t('Keyword', 'keyword')],\n  ListValue: [graphql_language_service_parser_1.p('['), graphql_language_service_parser_1.list('Value', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p(']')],\n  ObjectValue: [graphql_language_service_parser_1.p('{'), graphql_language_service_parser_1.list('ObjectField', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p('}')],\n  ObjectField: [namedKey('attribute'), graphql_language_service_parser_1.p(':'), 'Value']\n};\n\nfunction namedKey(style) {\n  return {\n    style: style,\n    match: function match(token) {\n      return token.kind === 'String';\n    },\n    update: function update(state, token) {\n      state.name = token.value.slice(1, -1);\n    }\n  };\n}","map":{"version":3,"sources":["../src/variables/mode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\nvar graphql_language_service_parser_1 = require(\"graphql-language-service-parser\");\ncodemirror_1.default.defineMode('graphql-variables', function (config) {\n    var parser = graphql_language_service_parser_1.onlineParser({\n        eatWhitespace: function (stream) { return stream.eatSpace(); },\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config: config,\n        startState: parser.startState,\n        token: parser.token,\n        indent: indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nfunction indent(state, textAfter) {\n    var _a, _b;\n    var levels = state.levels;\n    var level = !levels || levels.length === 0\n        ? state.indentLevel\n        : levels[levels.length - 1] -\n            (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\nvar LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nvar ParseRules = {\n    Document: [graphql_language_service_parser_1.p('{'), graphql_language_service_parser_1.list('Variable', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p('}')],\n    Variable: [namedKey('variable'), graphql_language_service_parser_1.p(':'), 'Value'],\n    Value: function (token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [graphql_language_service_parser_1.t('Number', 'number')],\n    StringValue: [graphql_language_service_parser_1.t('String', 'string')],\n    BooleanValue: [graphql_language_service_parser_1.t('Keyword', 'builtin')],\n    NullValue: [graphql_language_service_parser_1.t('Keyword', 'keyword')],\n    ListValue: [graphql_language_service_parser_1.p('['), graphql_language_service_parser_1.list('Value', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p(']')],\n    ObjectValue: [graphql_language_service_parser_1.p('{'), graphql_language_service_parser_1.list('ObjectField', graphql_language_service_parser_1.opt(graphql_language_service_parser_1.p(','))), graphql_language_service_parser_1.p('}')],\n    ObjectField: [namedKey('attribute'), graphql_language_service_parser_1.p(':'), 'Value'],\n};\nfunction namedKey(style) {\n    return {\n        style: style,\n        match: function (token) { return token.kind === 'String'; },\n        update: function (state, token) {\n            state.name = token.value.slice(1, -1);\n        },\n    };\n}\n//# sourceMappingURL=mode.js.map"]},"metadata":{},"sourceType":"script"}