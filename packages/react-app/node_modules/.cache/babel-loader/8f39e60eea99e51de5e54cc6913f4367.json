{"ast":null,"code":"import _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axios from 'axios';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Gets the gas price from Eth Gas Station\n * @param targetNetwork (TNetwork)\n * @param speed (TGasStationSpeed) 'fast', 'fastest', 'safeLow', 'average'\n * @param pollTime (number) :: if > 0 use polling, else use instead of onBlock event\n * @returns (number) gas price in gwei\n */\n\nexport var useGasPrice = function useGasPrice(targetNetwork, speed) {\n  var pollTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 39999;\n  var multiplier = 100000000;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      gasPrice = _useState2[0],\n      setGasPrice = _useState2[1];\n\n  var loadGasPrice = useCallback(function () {\n    if (targetNetwork === null || targetNetwork === void 0 ? void 0 : targetNetwork.gasPrice) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if (navigator.onLine) {\n        axios.get('https://ethgasstation.info/json/ethgasAPI.json').then(function (response) {\n          var _a;\n\n          var result = (_a = response.data) !== null && _a !== void 0 ? _a : {};\n          var newGasPrice = result[speed] * multiplier;\n          if (!newGasPrice) newGasPrice = result['fast'] * multiplier;\n\n          if (newGasPrice !== gasPrice) {\n            setGasPrice(newGasPrice);\n          }\n        }).catch(function (error) {\n          console.log('⚠ Could not get gas Price!', error);\n          setGasPrice(undefined);\n        });\n      }\n    }\n  }, [gasPrice, speed, targetNetwork.gasPrice]);\n  useOnRepetition(loadGasPrice, {\n    pollTime: pollTime,\n    leadingTrigger: true\n  });\n  return gasPrice;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useGasPrice.js"],"names":["axios","useCallback","useState","useOnRepetition","useGasPrice","targetNetwork","speed","pollTime","multiplier","gasPrice","setGasPrice","loadGasPrice","navigator","onLine","get","then","response","_a","result","data","newGasPrice","catch","error","console","log","undefined","leadingTrigger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,aAAD,EAAgBC,KAAhB,EAA4C;AAAA,MAArBC,QAAqB,uEAAV,KAAU;AACnE,MAAMC,UAAU,GAAG,SAAnB;;AACA,kBAAgCN,QAAQ,EAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,YAAY,GAAGV,WAAW,CAAC,YAAM;AACnC,QAAII,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACI,QAAhF,EAA0F;AACtFC,MAAAA,WAAW,CAACL,aAAa,CAACI,QAAf,CAAX;AACH,KAFD,MAGK;AACD,UAAIG,SAAS,CAACC,MAAd,EAAsB;AAClBb,QAAAA,KAAK,CACAc,GADL,CACS,gDADT,EAEKC,IAFL,CAEU,UAACC,QAAD,EAAc;AACpB,cAAIC,EAAJ;;AACA,cAAMC,MAAM,GAAG,CAACD,EAAE,GAAGD,QAAQ,CAACG,IAAf,MAAyB,IAAzB,IAAiCF,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,EAArE;AACA,cAAIG,WAAW,GAAGF,MAAM,CAACZ,KAAD,CAAN,GAAgBE,UAAlC;AACA,cAAI,CAACY,WAAL,EACIA,WAAW,GAAGF,MAAM,CAAC,MAAD,CAAN,GAAiBV,UAA/B;;AACJ,cAAIY,WAAW,KAAKX,QAApB,EAA8B;AAC1BC,YAAAA,WAAW,CAACU,WAAD,CAAX;AACH;AACJ,SAXD,EAYKC,KAZL,CAYW,UAACC,KAAD,EAAW;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACAZ,UAAAA,WAAW,CAACe,SAAD,CAAX;AACH,SAfD;AAgBH;AACJ;AACJ,GAxB+B,EAwB7B,CAAChB,QAAD,EAAWH,KAAX,EAAkBD,aAAa,CAACI,QAAhC,CAxB6B,CAAhC;AAyBAN,EAAAA,eAAe,CAACQ,YAAD,EAAe;AAAEJ,IAAAA,QAAQ,EAARA,QAAF;AAAYmB,IAAAA,cAAc,EAAE;AAA5B,GAAf,CAAf;AACA,SAAOjB,QAAP;AACH,CA9BM","sourcesContent":["import axios from 'axios';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Gets the gas price from Eth Gas Station\n * @param targetNetwork (TNetwork)\n * @param speed (TGasStationSpeed) 'fast', 'fastest', 'safeLow', 'average'\n * @param pollTime (number) :: if > 0 use polling, else use instead of onBlock event\n * @returns (number) gas price in gwei\n */\nexport const useGasPrice = (targetNetwork, speed, pollTime = 39999) => {\n    const multiplier = 100000000;\n    const [gasPrice, setGasPrice] = useState();\n    const loadGasPrice = useCallback(() => {\n        if (targetNetwork === null || targetNetwork === void 0 ? void 0 : targetNetwork.gasPrice) {\n            setGasPrice(targetNetwork.gasPrice);\n        }\n        else {\n            if (navigator.onLine) {\n                axios\n                    .get('https://ethgasstation.info/json/ethgasAPI.json')\n                    .then((response) => {\n                    var _a;\n                    const result = (_a = response.data) !== null && _a !== void 0 ? _a : {};\n                    let newGasPrice = result[speed] * multiplier;\n                    if (!newGasPrice)\n                        newGasPrice = result['fast'] * multiplier;\n                    if (newGasPrice !== gasPrice) {\n                        setGasPrice(newGasPrice);\n                    }\n                })\n                    .catch((error) => {\n                    console.log('⚠ Could not get gas Price!', error);\n                    setGasPrice(undefined);\n                });\n            }\n        }\n    }, [gasPrice, speed, targetNetwork.gasPrice]);\n    useOnRepetition(loadGasPrice, { pollTime, leadingTrigger: true });\n    return gasPrice;\n};\n"]},"metadata":{},"sourceType":"module"}