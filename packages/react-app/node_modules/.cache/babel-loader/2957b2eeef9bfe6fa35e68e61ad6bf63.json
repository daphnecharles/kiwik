{"ast":null,"code":"'use strict';\n\nvar encodeCache = {}; // Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\n\nfunction getEncodeCache(exclude) {\n  var i,\n      ch,\n      cache = encodeCache[exclude];\n\n  if (cache) {\n    return cache;\n  }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n} // Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\n\n\nfunction encode(string, exclude, keepEscaped) {\n  var i,\n      l,\n      code,\n      nextCode,\n      cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25\n    /* % */\n    && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\nmodule.exports = encode;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/mdurl/encode.js"],"names":["encodeCache","getEncodeCache","exclude","i","ch","cache","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","encode","string","keepEscaped","l","code","nextCode","result","defaultChars","encodeURIComponent","componentChars","module","exports"],"mappings":"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","sourcesContent":["\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n"]},"metadata":{},"sourceType":"script"}