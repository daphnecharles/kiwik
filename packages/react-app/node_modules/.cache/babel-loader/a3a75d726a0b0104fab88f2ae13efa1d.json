{"ast":null,"code":"/*!\r\n * @name JavaScript/NodeJS Merge v1.2.1\r\n * @author yeikos\r\n * @repository https://github.com/yeikos/js.merge\r\n\r\n * Copyright 2014 yeikos - MIT license\r\n * https://raw.github.com/yeikos/js.merge/master/LICENSE\r\n */\n;\n\n(function (isNode) {\n  /**\r\n   * Merge one or more objects \r\n   * @param bool? clone\r\n   * @param mixed,... arguments\r\n   * @return object\r\n   */\n  var Public = function Public(clone) {\n    return merge(clone === true, false, arguments);\n  },\n      publicName = 'merge';\n  /**\r\n   * Merge two or more objects recursively \r\n   * @param bool? clone\r\n   * @param mixed,... arguments\r\n   * @return object\r\n   */\n\n\n  Public.recursive = function (clone) {\n    return merge(clone === true, true, arguments);\n  };\n  /**\r\n   * Clone the input removing any reference\r\n   * @param mixed input\r\n   * @return mixed\r\n   */\n\n\n  Public.clone = function (input) {\n    var output = input,\n        type = typeOf(input),\n        index,\n        size;\n\n    if (type === 'array') {\n      output = [];\n      size = input.length;\n\n      for (index = 0; index < size; ++index) {\n        output[index] = Public.clone(input[index]);\n      }\n    } else if (type === 'object') {\n      output = {};\n\n      for (index in input) {\n        output[index] = Public.clone(input[index]);\n      }\n    }\n\n    return output;\n  };\n  /**\r\n   * Merge two objects recursively\r\n   * @param mixed input\r\n   * @param mixed extend\r\n   * @return mixed\r\n   */\n\n\n  function merge_recursive(base, extend) {\n    if (typeOf(base) !== 'object') return extend;\n\n    for (var key in extend) {\n      if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {\n        base[key] = merge_recursive(base[key], extend[key]);\n      } else {\n        base[key] = extend[key];\n      }\n    }\n\n    return base;\n  }\n  /**\r\n   * Merge two or more objects\r\n   * @param bool clone\r\n   * @param bool recursive\r\n   * @param array argv\r\n   * @return object\r\n   */\n\n\n  function merge(clone, recursive, argv) {\n    var result = argv[0],\n        size = argv.length;\n    if (clone || typeOf(result) !== 'object') result = {};\n\n    for (var index = 0; index < size; ++index) {\n      var item = argv[index],\n          type = typeOf(item);\n      if (type !== 'object') continue;\n\n      for (var key in item) {\n        if (key === '__proto__') continue;\n        var sitem = clone ? Public.clone(item[key]) : item[key];\n\n        if (recursive) {\n          result[key] = merge_recursive(result[key], sitem);\n        } else {\n          result[key] = sitem;\n        }\n      }\n    }\n\n    return result;\n  }\n  /**\r\n   * Get type of variable\r\n   * @param mixed input\r\n   * @return string\r\n   *\r\n   * @see http://jsperf.com/typeofvar\r\n   */\n\n\n  function typeOf(input) {\n    return {}.toString.call(input).slice(8, -1).toLowerCase();\n  }\n\n  if (isNode) {\n    module.exports = Public;\n  } else {\n    window[publicName] = Public;\n  }\n})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/merge/merge.js"],"names":["isNode","Public","clone","merge","arguments","publicName","recursive","input","output","type","typeOf","index","size","length","merge_recursive","base","extend","key","argv","result","item","sitem","toString","call","slice","toLowerCase","module","exports","window"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAC,CAAC,UAASA,MAAT,EAAiB;AAElB;AACD;AACA;AACA;AACA;AACA;AAEC,MAAIC,MAAM,GAAG,SAATA,MAAS,CAASC,KAAT,EAAgB;AAE5B,WAAOC,KAAK,CAACD,KAAK,KAAK,IAAX,EAAiB,KAAjB,EAAwBE,SAAxB,CAAZ;AAEA,GAJD;AAAA,MAIGC,UAAU,GAAG,OAJhB;AAMA;AACD;AACA;AACA;AACA;AACA;;;AAECJ,EAAAA,MAAM,CAACK,SAAP,GAAmB,UAASJ,KAAT,EAAgB;AAElC,WAAOC,KAAK,CAACD,KAAK,KAAK,IAAX,EAAiB,IAAjB,EAAuBE,SAAvB,CAAZ;AAEA,GAJD;AAMA;AACD;AACA;AACA;AACA;;;AAECH,EAAAA,MAAM,CAACC,KAAP,GAAe,UAASK,KAAT,EAAgB;AAE9B,QAAIC,MAAM,GAAGD,KAAb;AAAA,QACCE,IAAI,GAAGC,MAAM,CAACH,KAAD,CADd;AAAA,QAECI,KAFD;AAAA,QAEQC,IAFR;;AAIA,QAAIH,IAAI,KAAK,OAAb,EAAsB;AAErBD,MAAAA,MAAM,GAAG,EAAT;AACAI,MAAAA,IAAI,GAAGL,KAAK,CAACM,MAAb;;AAEA,WAAKF,KAAK,GAAC,CAAX,EAAaA,KAAK,GAACC,IAAnB,EAAwB,EAAED,KAA1B;AAECH,QAAAA,MAAM,CAACG,KAAD,CAAN,GAAgBV,MAAM,CAACC,KAAP,CAAaK,KAAK,CAACI,KAAD,CAAlB,CAAhB;AAFD;AAIA,KATD,MASO,IAAIF,IAAI,KAAK,QAAb,EAAuB;AAE7BD,MAAAA,MAAM,GAAG,EAAT;;AAEA,WAAKG,KAAL,IAAcJ,KAAd;AAECC,QAAAA,MAAM,CAACG,KAAD,CAAN,GAAgBV,MAAM,CAACC,KAAP,CAAaK,KAAK,CAACI,KAAD,CAAlB,CAAhB;AAFD;AAIA;;AAED,WAAOH,MAAP;AAEA,GA3BD;AA6BA;AACD;AACA;AACA;AACA;AACA;;;AAEC,WAASM,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;AAEtC,QAAIN,MAAM,CAACK,IAAD,CAAN,KAAiB,QAArB,EAEC,OAAOC,MAAP;;AAED,SAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AAEvB,UAAIN,MAAM,CAACK,IAAI,CAACE,GAAD,CAAL,CAAN,KAAsB,QAAtB,IAAkCP,MAAM,CAACM,MAAM,CAACC,GAAD,CAAP,CAAN,KAAwB,QAA9D,EAAwE;AAEvEF,QAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYH,eAAe,CAACC,IAAI,CAACE,GAAD,CAAL,EAAYD,MAAM,CAACC,GAAD,CAAlB,CAA3B;AAEA,OAJD,MAIO;AAENF,QAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYD,MAAM,CAACC,GAAD,CAAlB;AAEA;AAED;;AAED,WAAOF,IAAP;AAEA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEC,WAASZ,KAAT,CAAeD,KAAf,EAAsBI,SAAtB,EAAiCY,IAAjC,EAAuC;AAEtC,QAAIC,MAAM,GAAGD,IAAI,CAAC,CAAD,CAAjB;AAAA,QACCN,IAAI,GAAGM,IAAI,CAACL,MADb;AAGA,QAAIX,KAAK,IAAIQ,MAAM,CAACS,MAAD,CAAN,KAAmB,QAAhC,EAECA,MAAM,GAAG,EAAT;;AAED,SAAK,IAAIR,KAAK,GAAC,CAAf,EAAiBA,KAAK,GAACC,IAAvB,EAA4B,EAAED,KAA9B,EAAqC;AAEpC,UAAIS,IAAI,GAAGF,IAAI,CAACP,KAAD,CAAf;AAAA,UAECF,IAAI,GAAGC,MAAM,CAACU,IAAD,CAFd;AAIA,UAAIX,IAAI,KAAK,QAAb,EAAuB;;AAEvB,WAAK,IAAIQ,GAAT,IAAgBG,IAAhB,EAAsB;AAErB,YAAIH,GAAG,KAAK,WAAZ,EAAyB;AAEzB,YAAII,KAAK,GAAGnB,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAakB,IAAI,CAACH,GAAD,CAAjB,CAAH,GAA6BG,IAAI,CAACH,GAAD,CAAlD;;AAEA,YAAIX,SAAJ,EAAe;AAEda,UAAAA,MAAM,CAACF,GAAD,CAAN,GAAcH,eAAe,CAACK,MAAM,CAACF,GAAD,CAAP,EAAcI,KAAd,CAA7B;AAEA,SAJD,MAIO;AAENF,UAAAA,MAAM,CAACF,GAAD,CAAN,GAAcI,KAAd;AAEA;AAED;AAED;;AAED,WAAOF,MAAP;AAEA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEC,WAAST,MAAT,CAAgBH,KAAhB,EAAuB;AAEtB,WAAQ,EAAD,CAAKe,QAAL,CAAcC,IAAd,CAAmBhB,KAAnB,EAA0BiB,KAA1B,CAAgC,CAAhC,EAAmC,CAAC,CAApC,EAAuCC,WAAvC,EAAP;AAEA;;AAED,MAAIzB,MAAJ,EAAY;AAEX0B,IAAAA,MAAM,CAACC,OAAP,GAAiB1B,MAAjB;AAEA,GAJD,MAIO;AAEN2B,IAAAA,MAAM,CAACvB,UAAD,CAAN,GAAqBJ,MAArB;AAEA;AAED,CAvKA,EAuKE,OAAOyB,MAAP,KAAkB,QAAlB,IAA8BA,MAA9B,IAAwC,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAAlE,IAA8ED,MAAM,CAACC,OAvKvF","sourcesContent":["/*!\r\n * @name JavaScript/NodeJS Merge v1.2.1\r\n * @author yeikos\r\n * @repository https://github.com/yeikos/js.merge\r\n\r\n * Copyright 2014 yeikos - MIT license\r\n * https://raw.github.com/yeikos/js.merge/master/LICENSE\r\n */\r\n\r\n;(function(isNode) {\r\n\r\n\t/**\r\n\t * Merge one or more objects \r\n\t * @param bool? clone\r\n\t * @param mixed,... arguments\r\n\t * @return object\r\n\t */\r\n\r\n\tvar Public = function(clone) {\r\n\r\n\t\treturn merge(clone === true, false, arguments);\r\n\r\n\t}, publicName = 'merge';\r\n\r\n\t/**\r\n\t * Merge two or more objects recursively \r\n\t * @param bool? clone\r\n\t * @param mixed,... arguments\r\n\t * @return object\r\n\t */\r\n\r\n\tPublic.recursive = function(clone) {\r\n\r\n\t\treturn merge(clone === true, true, arguments);\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Clone the input removing any reference\r\n\t * @param mixed input\r\n\t * @return mixed\r\n\t */\r\n\r\n\tPublic.clone = function(input) {\r\n\r\n\t\tvar output = input,\r\n\t\t\ttype = typeOf(input),\r\n\t\t\tindex, size;\r\n\r\n\t\tif (type === 'array') {\r\n\r\n\t\t\toutput = [];\r\n\t\t\tsize = input.length;\r\n\r\n\t\t\tfor (index=0;index<size;++index)\r\n\r\n\t\t\t\toutput[index] = Public.clone(input[index]);\r\n\r\n\t\t} else if (type === 'object') {\r\n\r\n\t\t\toutput = {};\r\n\r\n\t\t\tfor (index in input)\r\n\r\n\t\t\t\toutput[index] = Public.clone(input[index]);\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Merge two objects recursively\r\n\t * @param mixed input\r\n\t * @param mixed extend\r\n\t * @return mixed\r\n\t */\r\n\r\n\tfunction merge_recursive(base, extend) {\r\n\r\n\t\tif (typeOf(base) !== 'object')\r\n\r\n\t\t\treturn extend;\r\n\r\n\t\tfor (var key in extend) {\r\n\r\n\t\t\tif (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {\r\n\r\n\t\t\t\tbase[key] = merge_recursive(base[key], extend[key]);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbase[key] = extend[key];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn base;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Merge two or more objects\r\n\t * @param bool clone\r\n\t * @param bool recursive\r\n\t * @param array argv\r\n\t * @return object\r\n\t */\r\n\r\n\tfunction merge(clone, recursive, argv) {\r\n\r\n\t\tvar result = argv[0],\r\n\t\t\tsize = argv.length;\r\n\r\n\t\tif (clone || typeOf(result) !== 'object')\r\n\r\n\t\t\tresult = {};\r\n\r\n\t\tfor (var index=0;index<size;++index) {\r\n\r\n\t\t\tvar item = argv[index],\r\n\r\n\t\t\t\ttype = typeOf(item);\r\n\r\n\t\t\tif (type !== 'object') continue;\r\n\r\n\t\t\tfor (var key in item) {\r\n\r\n\t\t\t\tif (key === '__proto__') continue;\r\n\r\n\t\t\t\tvar sitem = clone ? Public.clone(item[key]) : item[key];\r\n\r\n\t\t\t\tif (recursive) {\r\n\r\n\t\t\t\t\tresult[key] = merge_recursive(result[key], sitem);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresult[key] = sitem;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get type of variable\r\n\t * @param mixed input\r\n\t * @return string\r\n\t *\r\n\t * @see http://jsperf.com/typeofvar\r\n\t */\r\n\r\n\tfunction typeOf(input) {\r\n\r\n\t\treturn ({}).toString.call(input).slice(8, -1).toLowerCase();\r\n\r\n\t}\r\n\r\n\tif (isNode) {\r\n\r\n\t\tmodule.exports = Public;\r\n\r\n\t} else {\r\n\r\n\t\twindow[publicName] = Public;\r\n\r\n\t}\r\n\r\n})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);"]},"metadata":{},"sourceType":"script"}