{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/kiwik/packages/react-app/src/components/MultiAddressInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { Select } from \"antd\";\nimport { ethers } from \"ethers\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport Blockie from \"./Blockie\"; // probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar isENS = function isENS() {\n  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n};\n\nexport default function MultiAddressInput(props) {\n  _s();\n\n  var _this = this;\n\n  var ensProvider = props.ensProvider,\n      onChange = props.onChange;\n\n  var _useState = useState(props.value || []),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchResults = _useState4[0],\n      setSearchResults = _useState4[1];\n\n  var children = useMemo(function () {\n    if (searchResults.length < 1) {\n      return [];\n    } // use search result to format children\n\n\n    return searchResults.map(function (i) {\n      var _i$address, _i$address2;\n\n      return /*#__PURE__*/_jsxDEV(Select.Option, {\n        value: i.address,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginRight: \"3px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Blockie, {\n              address: i.address,\n              size: 5,\n              scale: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, _this), i.ens ? i.ens : ((_i$address = i.address) === null || _i$address === void 0 ? void 0 : _i$address.substr(0, 5)) + \"...\" + ((_i$address2 = i.address) === null || _i$address2 === void 0 ? void 0 : _i$address2.substr(-4))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, _this)\n      }, i.address, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, _this);\n    });\n  }, [searchResults.length]); // const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  // const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  var manageSearch = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newValue) {\n      var address, isResolvedAddress, possibleAddress, possibleENS;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof newValue !== \"undefined\")) {\n                _context.next = 27;\n                break;\n              }\n\n              address = newValue;\n              isResolvedAddress = true;\n\n              if (!isENS(address)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.prev = 4;\n              _context.next = 7;\n              return ensProvider.resolveName(address);\n\n            case 7:\n              possibleAddress = _context.sent;\n\n              if (possibleAddress) {\n                isResolvedAddress = true;\n                address = possibleAddress;\n              } // eslint-disable-next-line no-empty\n\n\n              _context.next = 13;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](4);\n\n            case 13:\n              _context.next = 26;\n              break;\n\n            case 15:\n              if (!ethers.utils.isAddress(address)) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.prev = 16;\n              _context.next = 19;\n              return ensProvider.lookupAddress(address);\n\n            case 19:\n              possibleENS = _context.sent;\n              address = possibleENS;\n              isResolvedAddress = false;\n              _context.next = 26;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t1 = _context[\"catch\"](16);\n\n            case 26:\n              return _context.abrupt(\"return\", {\n                resolvedTo: address,\n                isResolvedAddress: isResolvedAddress\n              });\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 11], [16, 24]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [ensProvider, onChange]);\n\n  var handleSearch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(val) {\n      var formattedVal, resolution, _ref3, _ref4, address, ens;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"Searching: \", val);\n              formattedVal = val.toLowerCase();\n              _context2.next = 4;\n              return manageSearch(formattedVal);\n\n            case 4:\n              resolution = _context2.sent;\n              console.log(resolution);\n              _ref3 = resolution.isResolvedAddress ? [resolution.resolvedTo, val] : [val, resolution.resolvedTo], _ref4 = _slicedToArray(_ref3, 2), address = _ref4[0], ens = _ref4[1];\n\n              if (resolution.resolvedTo !== val) {\n                setSearchResults([{\n                  address: address,\n                  isResolvedAddress: resolution.isResolvedAddress,\n                  ens: ens\n                }]);\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSearch(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleOnChange = function handleOnChange(e) {\n    console.log(e);\n    setSearchResults([]);\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.map(function (i) {\n        return i.value;\n      }));\n    }\n  }; // <Blockie address={currentValue} size={8} scale={3} />\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      showSearch: true,\n      showArrow: false,\n      defaultActiveFirstOption: false,\n      onSearch: handleSearch,\n      filterOption: false,\n      labelInValue: true,\n      mode: \"multiple\",\n      id: \"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n      ,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      value: value,\n      onChange: handleOnChange,\n      notFoundContent: null,\n      style: {\n        width: \"100%\"\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiAddressInput, \"Hk1DQxyolsfiY5QcnCkFx6VkWnY=\");\n\n_c = MultiAddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiAddressInput\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/components/MultiAddressInput.jsx"],"names":["Select","ethers","React","useCallback","useMemo","useState","Blockie","isENS","address","endsWith","MultiAddressInput","props","ensProvider","onChange","value","setValue","searchResults","setSearchResults","children","length","map","i","display","alignItems","marginRight","ens","substr","manageSearch","newValue","isResolvedAddress","resolveName","possibleAddress","utils","isAddress","lookupAddress","possibleENS","resolvedTo","handleSearch","val","console","log","formattedVal","toLowerCase","resolution","handleOnChange","e","placeholder","width"],"mappings":"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","sourcesContent":["import { Select } from \"antd\";\nimport { ethers } from \"ethers\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function MultiAddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value || []);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    }\n\n    // use search result to format children\n    return searchResults.map(i => (\n      <Select.Option key={i.address} value={i.address}>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <div style={{ marginRight: \"3px\" }}>\n            <Blockie address={i.address} size={5} scale={3} />\n          </div>\n          {i.ens ? i.ens : i.address?.substr(0, 5) + \"...\" + i.address?.substr(-4)}\n        </div>\n      </Select.Option>\n    ));\n  }, [searchResults.length]);\n\n  // const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  // const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const manageSearch = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        let isResolvedAddress = true;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n\n            if (possibleAddress) {\n              isResolvedAddress = true;\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        } else if (ethers.utils.isAddress(address)) {\n          try {\n            const possibleENS = await ensProvider.lookupAddress(address);\n\n            address = possibleENS;\n            isResolvedAddress = false;\n          } catch (e) {}\n        }\n        return { resolvedTo: address, isResolvedAddress };\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const handleSearch = async val => {\n    console.log(`Searching: `, val);\n    const formattedVal = val.toLowerCase();\n    const resolution = await manageSearch(formattedVal);\n\n    console.log(resolution);\n\n    const [address, ens] = resolution.isResolvedAddress ? [resolution.resolvedTo, val] : [val, resolution.resolvedTo];\n\n    if (resolution.resolvedTo !== val) {\n      setSearchResults([{ address, isResolvedAddress: resolution.isResolvedAddress, ens }]);\n    }\n  };\n\n  const handleOnChange = e => {\n    console.log(e);\n    setSearchResults([]);\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.map(i => i.value));\n    }\n  };\n\n  // <Blockie address={currentValue} size={8} scale={3} />\n\n  return (\n    <div>\n      <Select\n        showSearch\n        showArrow={false}\n        defaultActiveFirstOption={false}\n        onSearch={handleSearch}\n        filterOption={false}\n        labelInValue={true}\n        mode=\"multiple\"\n        id=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        name=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        value={value}\n        onChange={handleOnChange}\n        notFoundContent={null}\n        style={{ width: \"100%\" }}\n      >\n        {children}\n      </Select>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}