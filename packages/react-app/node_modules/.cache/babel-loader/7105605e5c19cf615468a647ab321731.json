{"ast":null,"code":"// Code block (4 spaces padded)\n'use strict';\n\nmodule.exports = function code(state, startLine, endLine\n/*, silent*/\n) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n\n    break;\n  }\n\n  state.line = last;\n  token = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map = [startLine, state.line];\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_block/code.js"],"names":["module","exports","code","state","startLine","endLine","nextLine","last","token","sCount","blkIndent","isEmpty","line","push","content","getLines","map"],"mappings":"AAAA;AAEA;;AAGAA,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,KAAd,EAAqBC,SAArB,EAAgCC;AAAO;AAAvC,EAAqD;AACpE,MAAIC,QAAJ,EAAcC,IAAd,EAAoBC,KAApB;;AAEA,MAAIL,KAAK,CAACM,MAAN,CAAaL,SAAb,IAA0BD,KAAK,CAACO,SAAhC,GAA4C,CAAhD,EAAmD;AAAE,WAAO,KAAP;AAAe;;AAEpEH,EAAAA,IAAI,GAAGD,QAAQ,GAAGF,SAAS,GAAG,CAA9B;;AAEA,SAAOE,QAAQ,GAAGD,OAAlB,EAA2B;AACzB,QAAIF,KAAK,CAACQ,OAAN,CAAcL,QAAd,CAAJ,EAA6B;AAC3BA,MAAAA,QAAQ;AACR;AACD;;AAED,QAAIH,KAAK,CAACM,MAAN,CAAaH,QAAb,IAAyBH,KAAK,CAACO,SAA/B,IAA4C,CAAhD,EAAmD;AACjDJ,MAAAA,QAAQ;AACRC,MAAAA,IAAI,GAAGD,QAAP;AACA;AACD;;AACD;AACD;;AAEDH,EAAAA,KAAK,CAACS,IAAN,GAAaL,IAAb;AAEAC,EAAAA,KAAK,GAAWL,KAAK,CAACU,IAAN,CAAW,YAAX,EAAyB,MAAzB,EAAiC,CAAjC,CAAhB;AACAL,EAAAA,KAAK,CAACM,OAAN,GAAgBX,KAAK,CAACY,QAAN,CAAeX,SAAf,EAA0BG,IAA1B,EAAgC,IAAIJ,KAAK,CAACO,SAA1C,EAAqD,KAArD,IAA8D,IAA9E;AACAF,EAAAA,KAAK,CAACQ,GAAN,GAAgB,CAAEZ,SAAF,EAAaD,KAAK,CAACS,IAAnB,CAAhB;AAEA,SAAO,IAAP;AACD,CA5BD","sourcesContent":["// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}