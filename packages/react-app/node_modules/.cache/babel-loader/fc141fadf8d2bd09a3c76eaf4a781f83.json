{"ast":null,"code":"var _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar safeStringify = require('fast-safe-stringify');\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors.\n * Permits any integer error code.\n */\n\n\nvar JsonRpcError = /*#__PURE__*/function (_Error) {\n  \"use strict\";\n\n  _inherits(JsonRpcError, _Error);\n\n  var _super = _createSuper(JsonRpcError);\n\n  /**\n   * Create a JSON RPC error.\n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  function JsonRpcError(code, message, data) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcError);\n\n    if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.');\n    if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string.');\n    _this = _super.call(this, message);\n    _this.code = code;\n    if (data !== undefined) _this.data = data;\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   * @returns {object} The serialized error. \n   */\n\n\n  _createClass(JsonRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n      if (this.data !== undefined) serialized.data = this.data;\n      if (this.stack) serialized.stack = this.stack;\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     * @returns {string} The serialized error as a string.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return safeStringify(this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n\n  return JsonRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * @class EthJsonRpcError\n * Error subclass implementing Ethereum JSON RPC errors.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\n\n\nvar EthJsonRpcError = /*#__PURE__*/function (_JsonRpcError) {\n  \"use strict\";\n\n  _inherits(EthJsonRpcError, _JsonRpcError);\n\n  var _super2 = _createSuper(EthJsonRpcError);\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  function EthJsonRpcError(code, message, data) {\n    _classCallCheck(this, EthJsonRpcError);\n\n    if (!isValidEthCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    return _super2.call(this, code, message, data);\n  }\n\n  return EthJsonRpcError;\n}(JsonRpcError); // Internal\n\n\nfunction isValidEthCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return;\n  }\n\n  return value;\n} // Exports\n\n\nmodule.exports = {\n  JsonRpcError: JsonRpcError,\n  EthJsonRpcError: EthJsonRpcError\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-json-rpc-errors/src/classes.js"],"names":["safeStringify","require","JsonRpcError","code","message","data","Number","isInteger","Error","undefined","serialized","stack","serialize","stringifyReplacer","EthJsonRpcError","isValidEthCode","_","value","module","exports"],"mappings":";;;;;;;;;;AACA,IAAMA,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;IACMC,Y;;;;;;;AAEJ;AACF;AACA;AACA;AACA;AACA;AACE,wBAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,IAA5B,EAAkC;AAAA;;AAAA;;AAEhC,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAL,EAA6B,MAAM,IAAIK,KAAJ,CACjC,4BADiC,CAAN;AAG7B,QAAI,CAACJ,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C,MAAM,IAAII,KAAJ,CACjD,sCADiD,CAAN;AAI7C,8BAAMJ,OAAN;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,QAAIE,IAAI,KAAKI,SAAb,EAAwB,MAAKJ,IAAL,GAAYA,IAAZ;AAXQ;AAYjC;AAED;AACF;AACA;AACA;;;;;WACE,qBAAY;AACV,UAAMK,UAAU,GAAG;AACjBP,QAAAA,IAAI,EAAE,KAAKA,IADM;AAEjBC,QAAAA,OAAO,EAAE,KAAKA;AAFG,OAAnB;AAIA,UAAI,KAAKC,IAAL,KAAcI,SAAlB,EAA6BC,UAAU,CAACL,IAAX,GAAkB,KAAKA,IAAvB;AAC7B,UAAI,KAAKM,KAAT,EAAgBD,UAAU,CAACC,KAAX,GAAmB,KAAKA,KAAxB;AAChB,aAAOD,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,oBAAW;AACT,aAAOV,aAAa,CAClB,KAAKY,SAAL,EADkB,EAElBC,iBAFkB,EAGlB,CAHkB,CAApB;AAKD;;;;iCA/CwBL,K;AAkD3B;AACA;AACA;AACA;AACA;;;IACMM,e;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,2BAAYX,IAAZ,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;AAAA;;AAC/B,QAAI,CAACU,cAAc,CAACZ,IAAD,CAAnB,EAA2B;AACzB,YAAM,IAAIK,KAAJ,CACJ,2DADI,CAAN;AAGD;;AAL8B,8BAMzBL,IANyB,EAMnBC,OANmB,EAMVC,IANU;AAOhC;;;EAd2BH,Y,GAiB9B;;;AAEA,SAASa,cAAT,CAAwBZ,IAAxB,EAA8B;AAC5B,SAAOG,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,KAA0BA,IAAI,IAAI,IAAlC,IAA0CA,IAAI,IAAI,IAAzD;AACD;;AAED,SAASU,iBAAT,CAA2BG,CAA3B,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,KAAK,YAAd,EAA4B;AAC1B;AACD;;AACD,SAAOA,KAAP;AACD,C,CAED;;;AAEAC,MAAM,CAACC,OAAP,GAAkB;AAChBjB,EAAAA,YAAY,EAAZA,YADgB;AAEhBY,EAAAA,eAAe,EAAfA;AAFgB,CAAlB","sourcesContent":["\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors.\n * Permits any integer error code.\n */\nclass JsonRpcError extends Error {\n\n  /**\n   * Create a JSON RPC error.\n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) throw new Error(\n      '\"code\" must be an integer.'\n    )\n    if (!message || typeof message !== 'string') throw new Error(\n      '\"message\" must be a nonempty string.'\n    )\n\n    super(message)\n    this.code = code\n    if (data !== undefined) this.data = data\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   * @returns {object} The serialized error. \n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) serialized.data = this.data\n    if (this.stack) serialized.stack = this.stack\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * @returns {string} The serialized error as a string.\n   */\n  toString() {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2\n    )\n  }\n}\n\n/**\n * @class EthJsonRpcError\n * Error subclass implementing Ethereum JSON RPC errors.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthJsonRpcError extends JsonRpcError {\n  /**\n   * Create an Ethereum JSON RPC error.\n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\n      )\n    }\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports =  {\n  JsonRpcError,\n  EthJsonRpcError,\n}\n"]},"metadata":{},"sourceType":"script"}