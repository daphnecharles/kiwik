{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar basics = require('multiformats/basics');\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name: name,\n    prefix: prefix,\n    encoder: {\n      name: name,\n      prefix: prefix,\n      encode: encode\n    },\n    decoder: {\n      decode: decode\n    }\n  };\n}\n\nvar string = createCodec('utf8', 'u', function (buf) {\n  var decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, function (str) {\n  var encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nvar ascii = createCodec('ascii', 'a', function (buf) {\n  var string = 'a';\n\n  for (var i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n\n  return string;\n}, function (str) {\n  str = str.substring(1);\n  var buf = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n});\n\nvar BASES = _objectSpread({\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii\n}, basics.bases);\n\nmodule.exports = BASES;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/uint8arrays/cjs/src/util/bases.js"],"names":["basics","require","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","Uint8Array","charCodeAt","BASES","utf8","hex","bases","base16","latin1","binary","module","exports"],"mappings":"AAAA;;;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,MAA3C,EAAmD;AACjD,SAAO;AACLH,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,MAAM,EAANA,MAFK;AAGLG,IAAAA,OAAO,EAAE;AACPJ,MAAAA,IAAI,EAAJA,IADO;AAEPC,MAAAA,MAAM,EAANA,MAFO;AAGPC,MAAAA,MAAM,EAANA;AAHO,KAHJ;AAQLG,IAAAA,OAAO,EAAE;AAAEF,MAAAA,MAAM,EAANA;AAAF;AARJ,GAAP;AAUD;;AACD,IAAMG,MAAM,GAAGP,WAAW,CAAC,MAAD,EAAS,GAAT,EAAc,UAAAQ,GAAG,EAAI;AAC7C,MAAMF,OAAO,GAAG,IAAIG,WAAJ,CAAgB,MAAhB,CAAhB;AACA,SAAO,MAAMH,OAAO,CAACF,MAAR,CAAeI,GAAf,CAAb;AACD,CAHyB,EAGvB,UAAAE,GAAG,EAAI;AACR,MAAML,OAAO,GAAG,IAAIM,WAAJ,EAAhB;AACA,SAAON,OAAO,CAACF,MAAR,CAAeO,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAf,CAAP;AACD,CANyB,CAA1B;AAOA,IAAMC,KAAK,GAAGb,WAAW,CAAC,OAAD,EAAU,GAAV,EAAe,UAAAQ,GAAG,EAAI;AAC7C,MAAID,MAAM,GAAG,GAAb;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCP,IAAAA,MAAM,IAAIS,MAAM,CAACC,YAAP,CAAoBT,GAAG,CAACM,CAAD,CAAvB,CAAV;AACD;;AACD,SAAOP,MAAP;AACD,CANwB,EAMtB,UAAAG,GAAG,EAAI;AACRA,EAAAA,GAAG,GAAGA,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAN;AACA,MAAMJ,GAAG,GAAG,IAAIU,UAAJ,CAAeR,GAAG,CAACK,MAAnB,CAAZ;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCN,IAAAA,GAAG,CAACM,CAAD,CAAH,GAASJ,GAAG,CAACS,UAAJ,CAAeL,CAAf,CAAT;AACD;;AACD,SAAON,GAAP;AACD,CAbwB,CAAzB;;AAcA,IAAMY,KAAK;AACTC,EAAAA,IAAI,EAAEd,MADG;AAET,WAASA,MAFA;AAGTe,EAAAA,GAAG,EAAExB,MAAM,CAACyB,KAAP,CAAaC,MAHT;AAITC,EAAAA,MAAM,EAAEZ,KAJC;AAKTA,EAAAA,KAAK,EAAEA,KALE;AAMTa,EAAAA,MAAM,EAAEb;AANC,GAONf,MAAM,CAACyB,KAPD,CAAX;;AAUAI,MAAM,CAACC,OAAP,GAAiBR,KAAjB","sourcesContent":["'use strict';\n\nvar basics = require('multiformats/basics');\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...basics.bases\n};\n\nmodule.exports = BASES;\n"]},"metadata":{},"sourceType":"script"}