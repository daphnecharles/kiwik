{"ast":null,"code":"import _toConsumableArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _KIND_TO_SYMBOL_KIND;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { SymbolKind } from 'vscode-languageserver-types';\nimport { Kind, parse, print } from 'graphql';\nimport { getAutocompleteSuggestions as _getAutocompleteSuggestions } from './getAutocompleteSuggestions';\nimport { getHoverInformation as _getHoverInformation } from './getHoverInformation';\nimport { validateQuery, getRange, DIAGNOSTIC_SEVERITY } from './getDiagnostics';\nimport { getDefinitionQueryResultForFragmentSpread, getDefinitionQueryResultForDefinitionNode, getDefinitionQueryResultForNamedType } from './getDefinition';\nimport { getOutline as _getOutline } from './getOutline';\nimport { getASTNodeAtPosition } from 'graphql-language-service-utils';\nvar FRAGMENT_DEFINITION = Kind.FRAGMENT_DEFINITION,\n    OBJECT_TYPE_DEFINITION = Kind.OBJECT_TYPE_DEFINITION,\n    INTERFACE_TYPE_DEFINITION = Kind.INTERFACE_TYPE_DEFINITION,\n    ENUM_TYPE_DEFINITION = Kind.ENUM_TYPE_DEFINITION,\n    UNION_TYPE_DEFINITION = Kind.UNION_TYPE_DEFINITION,\n    SCALAR_TYPE_DEFINITION = Kind.SCALAR_TYPE_DEFINITION,\n    INPUT_OBJECT_TYPE_DEFINITION = Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    SCALAR_TYPE_EXTENSION = Kind.SCALAR_TYPE_EXTENSION,\n    OBJECT_TYPE_EXTENSION = Kind.OBJECT_TYPE_EXTENSION,\n    INTERFACE_TYPE_EXTENSION = Kind.INTERFACE_TYPE_EXTENSION,\n    UNION_TYPE_EXTENSION = Kind.UNION_TYPE_EXTENSION,\n    ENUM_TYPE_EXTENSION = Kind.ENUM_TYPE_EXTENSION,\n    INPUT_OBJECT_TYPE_EXTENSION = Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    DIRECTIVE_DEFINITION = Kind.DIRECTIVE_DEFINITION,\n    FRAGMENT_SPREAD = Kind.FRAGMENT_SPREAD,\n    OPERATION_DEFINITION = Kind.OPERATION_DEFINITION,\n    NAMED_TYPE = Kind.NAMED_TYPE;\nvar KIND_TO_SYMBOL_KIND = (_KIND_TO_SYMBOL_KIND = {}, _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.FIELD, SymbolKind.Field), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.OPERATION_DEFINITION, SymbolKind.Class), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.FRAGMENT_DEFINITION, SymbolKind.Class), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.FRAGMENT_SPREAD, SymbolKind.Struct), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.OBJECT_TYPE_DEFINITION, SymbolKind.Class), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.ENUM_TYPE_DEFINITION, SymbolKind.Enum), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.ENUM_VALUE_DEFINITION, SymbolKind.EnumMember), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.INPUT_OBJECT_TYPE_DEFINITION, SymbolKind.Class), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.INPUT_VALUE_DEFINITION, SymbolKind.Field), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.FIELD_DEFINITION, SymbolKind.Field), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.INTERFACE_TYPE_DEFINITION, SymbolKind.Interface), _defineProperty(_KIND_TO_SYMBOL_KIND, Kind.DOCUMENT, SymbolKind.File), _defineProperty(_KIND_TO_SYMBOL_KIND, \"FieldWithArguments\", SymbolKind.Method), _KIND_TO_SYMBOL_KIND);\n\nfunction getKind(tree) {\n  if (tree.kind === 'FieldDefinition' && tree.children && tree.children.length > 0) {\n    return KIND_TO_SYMBOL_KIND.FieldWithArguments;\n  }\n\n  return KIND_TO_SYMBOL_KIND[tree.kind];\n}\n\nexport var GraphQLLanguageService = /*#__PURE__*/function () {\n  function GraphQLLanguageService(cache) {\n    _classCallCheck(this, GraphQLLanguageService);\n\n    this._graphQLCache = cache;\n    this._graphQLConfig = cache.getGraphQLConfig();\n  }\n\n  _createClass(GraphQLLanguageService, [{\n    key: \"getConfigForURI\",\n    value: function getConfigForURI(uri) {\n      var config = this._graphQLCache.getProjectForFile(uri);\n\n      if (config) {\n        return config;\n      }\n\n      throw Error(\"No config found for uri: \".concat(uri));\n    }\n  }, {\n    key: \"getDiagnostics\",\n    value: function getDiagnostics(query, uri, isRelayCompatMode) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var queryHasExtensions, projectConfig, schemaPath, projectName, extensions, queryAST, range, source, fragmentDefinitions, fragmentDependencies, dependenciesSource, validationAst, customRules, schema;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                queryHasExtensions = false;\n                projectConfig = this.getConfigForURI(uri);\n\n                if (projectConfig) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", []);\n\n              case 4:\n                schemaPath = projectConfig.schema, projectName = projectConfig.name, extensions = projectConfig.extensions;\n                _context.prev = 5;\n                queryAST = parse(query);\n\n                if (!schemaPath || uri !== schemaPath) {\n                  queryHasExtensions = queryAST.definitions.some(function (definition) {\n                    switch (definition.kind) {\n                      case OBJECT_TYPE_DEFINITION:\n                      case INTERFACE_TYPE_DEFINITION:\n                      case ENUM_TYPE_DEFINITION:\n                      case UNION_TYPE_DEFINITION:\n                      case SCALAR_TYPE_DEFINITION:\n                      case INPUT_OBJECT_TYPE_DEFINITION:\n                      case SCALAR_TYPE_EXTENSION:\n                      case OBJECT_TYPE_EXTENSION:\n                      case INTERFACE_TYPE_EXTENSION:\n                      case UNION_TYPE_EXTENSION:\n                      case ENUM_TYPE_EXTENSION:\n                      case INPUT_OBJECT_TYPE_EXTENSION:\n                      case DIRECTIVE_DEFINITION:\n                        return true;\n                    }\n\n                    return false;\n                  });\n                }\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](5);\n                range = getRange(_context.t0.locations[0], query);\n                return _context.abrupt(\"return\", [{\n                  severity: DIAGNOSTIC_SEVERITY.Error,\n                  message: _context.t0.message,\n                  source: 'GraphQL: Syntax',\n                  range: range\n                }]);\n\n              case 14:\n                source = query;\n                _context.next = 17;\n                return this._graphQLCache.getFragmentDefinitions(projectConfig);\n\n              case 17:\n                fragmentDefinitions = _context.sent;\n                _context.next = 20;\n                return this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions);\n\n              case 20:\n                fragmentDependencies = _context.sent;\n                dependenciesSource = fragmentDependencies.reduce(function (prev, cur) {\n                  return \"\".concat(prev, \" \").concat(print(cur.definition));\n                }, '');\n                source = \"\".concat(source, \" \").concat(dependenciesSource);\n                validationAst = null;\n                _context.prev = 24;\n                validationAst = parse(source);\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t1 = _context[\"catch\"](24);\n                return _context.abrupt(\"return\", []);\n\n              case 31:\n                customRules = null;\n\n                if ((extensions === null || extensions === void 0 ? void 0 : extensions.customValidationRules) && typeof extensions.customValidationRules === 'function') {\n                  customRules = extensions.customValidationRules(this._graphQLConfig);\n                }\n\n                _context.next = 35;\n                return this._graphQLCache.getSchema(projectName, queryHasExtensions);\n\n              case 35:\n                schema = _context.sent;\n\n                if (schema) {\n                  _context.next = 38;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", []);\n\n              case 38:\n                return _context.abrupt(\"return\", validateQuery(validationAst, schema, customRules, isRelayCompatMode));\n\n              case 39:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 10], [24, 28]]);\n      }));\n    }\n  }, {\n    key: \"getAutocompleteSuggestions\",\n    value: function getAutocompleteSuggestions(query, position, filePath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var projectConfig, schema, fragmentDefinitions, fragmentInfo;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                projectConfig = this.getConfigForURI(filePath);\n                _context2.next = 3;\n                return this._graphQLCache.getSchema(projectConfig.name);\n\n              case 3:\n                schema = _context2.sent;\n                _context2.next = 6;\n                return this._graphQLCache.getFragmentDefinitions(projectConfig);\n\n              case 6:\n                fragmentDefinitions = _context2.sent;\n                fragmentInfo = Array.from(fragmentDefinitions).map(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                      info = _ref2[1];\n\n                  return info.definition;\n                });\n\n                if (!schema) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _getAutocompleteSuggestions(schema, query, position, undefined, fragmentInfo));\n\n              case 10:\n                return _context2.abrupt(\"return\", []);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getHoverInformation\",\n    value: function getHoverInformation(query, position, filePath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var projectConfig, schema;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                projectConfig = this.getConfigForURI(filePath);\n                _context3.next = 3;\n                return this._graphQLCache.getSchema(projectConfig.name);\n\n              case 3:\n                schema = _context3.sent;\n\n                if (!schema) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _getHoverInformation(schema, query, position));\n\n              case 6:\n                return _context3.abrupt(\"return\", '');\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"getDefinition\",\n    value: function getDefinition(query, position, filePath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var projectConfig, ast, node;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                projectConfig = this.getConfigForURI(filePath);\n                _context4.prev = 1;\n                ast = parse(query);\n                _context4.next = 8;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](1);\n                return _context4.abrupt(\"return\", null);\n\n              case 8:\n                node = getASTNodeAtPosition(query, ast, position);\n\n                if (!node) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.t1 = node.kind;\n                _context4.next = _context4.t1 === FRAGMENT_SPREAD ? 13 : _context4.t1 === FRAGMENT_DEFINITION ? 14 : _context4.t1 === OPERATION_DEFINITION ? 14 : _context4.t1 === NAMED_TYPE ? 15 : 16;\n                break;\n\n              case 13:\n                return _context4.abrupt(\"return\", this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig));\n\n              case 14:\n                return _context4.abrupt(\"return\", getDefinitionQueryResultForDefinitionNode(filePath, query, node));\n\n              case 15:\n                return _context4.abrupt(\"return\", this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig));\n\n              case 16:\n                return _context4.abrupt(\"return\", null);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 5]]);\n      }));\n    }\n  }, {\n    key: \"getDocumentSymbols\",\n    value: function getDocumentSymbols(document, filePath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var outline, output, input, _loop, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getOutline(document);\n\n              case 2:\n                outline = _context5.sent;\n\n                if (outline) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", []);\n\n              case 5:\n                output = [];\n                input = outline.outlineTrees.map(function (tree) {\n                  return [null, tree];\n                });\n\n                _loop = function _loop() {\n                  var res = input.pop();\n\n                  if (!res) {\n                    return {\n                      v: []\n                    };\n                  }\n\n                  var _res = _slicedToArray(res, 2),\n                      parent = _res[0],\n                      tree = _res[1];\n\n                  if (!tree) {\n                    return {\n                      v: []\n                    };\n                  }\n\n                  output.push({\n                    name: tree.representativeName,\n                    kind: getKind(tree),\n                    location: {\n                      uri: filePath,\n                      range: {\n                        start: tree.startPosition,\n                        end: tree.endPosition\n                      }\n                    },\n                    containerName: parent ? parent.representativeName : undefined\n                  });\n                  input.push.apply(input, _toConsumableArray(tree.children.map(function (child) {\n                    return [tree, child];\n                  })));\n                };\n\n              case 8:\n                if (!(input.length > 0)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _ret = _loop();\n\n                if (!(typeof _ret === \"object\")) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _ret.v);\n\n              case 12:\n                _context5.next = 8;\n                break;\n\n              case 14:\n                return _context5.abrupt(\"return\", output);\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"_getDefinitionForNamedType\",\n    value: function _getDefinitionForNamedType(query, ast, node, filePath, projectConfig) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var objectTypeDefinitions, dependencies, localObjectTypeDefinitions, typeCastedDefs, localOperationDefinationInfos, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._graphQLCache.getObjectTypeDefinitions(projectConfig);\n\n              case 2:\n                objectTypeDefinitions = _context6.sent;\n                _context6.next = 5;\n                return this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);\n\n              case 5:\n                dependencies = _context6.sent;\n                localObjectTypeDefinitions = ast.definitions.filter(function (definition) {\n                  return definition.kind === OBJECT_TYPE_DEFINITION || definition.kind === INPUT_OBJECT_TYPE_DEFINITION || definition.kind === ENUM_TYPE_DEFINITION || definition.kind === SCALAR_TYPE_DEFINITION || definition.kind === INTERFACE_TYPE_DEFINITION;\n                });\n                typeCastedDefs = localObjectTypeDefinitions;\n                localOperationDefinationInfos = typeCastedDefs.map(function (definition) {\n                  return {\n                    filePath: filePath,\n                    content: query,\n                    definition: definition\n                  };\n                });\n                _context6.next = 11;\n                return getDefinitionQueryResultForNamedType(query, node, dependencies.concat(localOperationDefinationInfos));\n\n              case 11:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"_getDefinitionForFragmentSpread\",\n    value: function _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var fragmentDefinitions, dependencies, localFragDefinitions, typeCastedDefs, localFragInfos, result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._graphQLCache.getFragmentDefinitions(projectConfig);\n\n              case 2:\n                fragmentDefinitions = _context7.sent;\n                _context7.next = 5;\n                return this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);\n\n              case 5:\n                dependencies = _context7.sent;\n                localFragDefinitions = ast.definitions.filter(function (definition) {\n                  return definition.kind === FRAGMENT_DEFINITION;\n                });\n                typeCastedDefs = localFragDefinitions;\n                localFragInfos = typeCastedDefs.map(function (definition) {\n                  return {\n                    filePath: filePath,\n                    content: query,\n                    definition: definition\n                  };\n                });\n                _context7.next = 11;\n                return getDefinitionQueryResultForFragmentSpread(query, node, dependencies.concat(localFragInfos));\n\n              case 11:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getOutline\",\n    value: function getOutline(documentText) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", _getOutline(documentText));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n    }\n  }]);\n\n  return GraphQLLanguageService;\n}();","map":{"version":3,"sources":["../src/GraphQLLanguageService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAGE,UAHF,QAIO,6BAJP;AAMA,SAAS,IAAT,EAAe,KAAf,EAAsB,KAAtB,QAAmC,SAAnC;AACA,SAAS,0BAA0B,IAA1B,2BAAT,QAA2C,8BAA3C;AACA,SAAS,mBAAmB,IAAnB,oBAAT,QAAoC,uBAApC;AACA,SAAS,aAAT,EAAwB,QAAxB,EAAkC,mBAAlC,QAA6D,kBAA7D;AACA,SACE,yCADF,EAEE,yCAFF,EAGE,oCAHF,QAKO,iBALP;AAOA,SAAS,UAAU,IAAV,WAAT,QAA2B,cAA3B;AAEA,SAAS,oBAAT,QAAqC,gCAArC;AAEA,IACE,mBADF,GAkBI,IAlBJ,CACE,mBADF;AAAA,IAEE,sBAFF,GAkBI,IAlBJ,CAEE,sBAFF;AAAA,IAGE,yBAHF,GAkBI,IAlBJ,CAGE,yBAHF;AAAA,IAIE,oBAJF,GAkBI,IAlBJ,CAIE,oBAJF;AAAA,IAKE,qBALF,GAkBI,IAlBJ,CAKE,qBALF;AAAA,IAME,sBANF,GAkBI,IAlBJ,CAME,sBANF;AAAA,IAOE,4BAPF,GAkBI,IAlBJ,CAOE,4BAPF;AAAA,IAQE,qBARF,GAkBI,IAlBJ,CAQE,qBARF;AAAA,IASE,qBATF,GAkBI,IAlBJ,CASE,qBATF;AAAA,IAUE,wBAVF,GAkBI,IAlBJ,CAUE,wBAVF;AAAA,IAWE,oBAXF,GAkBI,IAlBJ,CAWE,oBAXF;AAAA,IAYE,mBAZF,GAkBI,IAlBJ,CAYE,mBAZF;AAAA,IAaE,2BAbF,GAkBI,IAlBJ,CAaE,2BAbF;AAAA,IAcE,oBAdF,GAkBI,IAlBJ,CAcE,oBAdF;AAAA,IAeE,eAfF,GAkBI,IAlBJ,CAeE,eAfF;AAAA,IAgBE,oBAhBF,GAkBI,IAlBJ,CAgBE,oBAhBF;AAAA,IAiBE,UAjBF,GAkBI,IAlBJ,CAiBE,UAjBF;AAoBA,IAAM,mBAAmB,qEACtB,IAAI,CAAC,KADiB,EACT,UAAU,CAAC,KADF,yCAEtB,IAAI,CAAC,oBAFiB,EAEM,UAAU,CAAC,KAFjB,yCAGtB,IAAI,CAAC,mBAHiB,EAGK,UAAU,CAAC,KAHhB,yCAItB,IAAI,CAAC,eAJiB,EAIC,UAAU,CAAC,MAJZ,yCAKtB,IAAI,CAAC,sBALiB,EAKQ,UAAU,CAAC,KALnB,yCAMtB,IAAI,CAAC,oBANiB,EAMM,UAAU,CAAC,IANjB,yCAOtB,IAAI,CAAC,qBAPiB,EAOO,UAAU,CAAC,UAPlB,yCAQtB,IAAI,CAAC,4BARiB,EAQc,UAAU,CAAC,KARzB,yCAStB,IAAI,CAAC,sBATiB,EASQ,UAAU,CAAC,KATnB,yCAUtB,IAAI,CAAC,gBAViB,EAUE,UAAU,CAAC,KAVb,yCAWtB,IAAI,CAAC,yBAXiB,EAWW,UAAU,CAAC,SAXtB,yCAYtB,IAAI,CAAC,QAZiB,EAYN,UAAU,CAAC,IAZL,+DAcH,UAAU,CAAC,MAdR,wBAAzB;;AAiBA,SAAS,OAAT,CAAiB,IAAjB,EAAkC;AAChC,MACE,IAAI,CAAC,IAAL,KAAc,iBAAd,IACA,IAAI,CAAC,QADL,IAEA,IAAI,CAAC,QAAL,CAAc,MAAd,GAAuB,CAHzB,EAIE;AACA,WAAO,mBAAmB,CAAC,kBAA3B;AACD;;AACD,SAAO,mBAAmB,CAAC,IAAI,CAAC,IAAN,CAA1B;AACD;;AAED,WAAa,sBAAb;AAIE,kCAAY,KAAZ,EAA+B;AAAA;;AAC7B,SAAK,aAAL,GAAqB,KAArB;AACA,SAAK,cAAL,GAAsB,KAAK,CAAC,gBAAN,EAAtB;AACD;;AAPH;AAAA;AAAA,WASE,yBAAgB,GAAhB,EAAwB;AACtB,UAAM,MAAM,GAAG,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,GAArC,CAAf;;AACA,UAAI,MAAJ,EAAY;AACV,eAAO,MAAP;AACD;;AACD,YAAM,KAAK,oCAA6B,GAA7B,EAAX;AACD;AAfH;AAAA;AAAA,WAiBe,wBACX,KADW,EAEX,GAFW,EAGX,iBAHW,EAGgB;;;;;;;AAIvB,gBAAA,kB,GAAqB,K;AACnB,gBAAA,a,GAAgB,KAAK,eAAL,CAAqB,GAArB,C;;oBACjB,a;;;;;iDACI,E;;;AAEO,gBAAA,U,GAA8C,a,CAAtD,M,EAA0B,W,GAA4B,a,CAAlC,I,EAAmB,U,GAAe,a,CAAf,U;;AAGvC,gBAAA,Q,GAAW,KAAK,CAAC,KAAD,C;;AACtB,oBAAI,CAAC,UAAD,IAAe,GAAG,KAAK,UAA3B,EAAuC;AACrC,kBAAA,kBAAkB,GAAG,QAAQ,CAAC,WAAT,CAAqB,IAArB,CAA0B,UAAA,UAAU,EAAG;AAC1D,4BAAQ,UAAU,CAAC,IAAnB;AACE,2BAAK,sBAAL;AACA,2BAAK,yBAAL;AACA,2BAAK,oBAAL;AACA,2BAAK,qBAAL;AACA,2BAAK,sBAAL;AACA,2BAAK,4BAAL;AACA,2BAAK,qBAAL;AACA,2BAAK,qBAAL;AACA,2BAAK,wBAAL;AACA,2BAAK,oBAAL;AACA,2BAAK,mBAAL;AACA,2BAAK,2BAAL;AACA,2BAAK,oBAAL;AACE,+BAAO,IAAP;AAdJ;;AAiBA,2BAAO,KAAP;AACD,mBAnBoB,CAArB;AAoBD;;;;;;;;AAEK,gBAAA,K,GAAQ,QAAQ,CAAC,YAAM,SAAN,CAAgB,CAAhB,CAAD,EAAqB,KAArB,C;iDACf,CACL;AACE,kBAAA,QAAQ,EAAE,mBAAmB,CAAC,KADhC;AAEE,kBAAA,OAAO,EAAE,YAAM,OAFjB;AAGE,kBAAA,MAAM,EAAE,iBAHV;AAIE,kBAAA,KAAK,EAAL;AAJF,iBADK,C;;;AAWL,gBAAA,M,GAAS,K;;AACe,uBAAM,KAAK,aAAL,CAAmB,sBAAnB,CAChC,aADgC,CAAN;;;AAAtB,gBAAA,mB;;AAIuB,uBAAM,KAAK,aAAL,CAAmB,uBAAnB,CACjC,KADiC,EAEjC,mBAFiC,CAAN;;;AAAvB,gBAAA,oB;AAKA,gBAAA,kB,GAAqB,oBAAoB,CAAC,MAArB,CACzB,UAAC,IAAD,EAAO,GAAP;AAAA,mCAAkB,IAAlB,cAA0B,KAAK,CAAC,GAAG,CAAC,UAAL,CAA/B;AAAA,iBADyB,EAEzB,EAFyB,C;AAK3B,gBAAA,MAAM,aAAM,MAAN,cAAgB,kBAAhB,CAAN;AAEI,gBAAA,a,GAAgB,I;;AAElB,gBAAA,aAAa,GAAG,KAAK,CAAC,MAAD,CAArB;;;;;;;iDAMO,E;;;AAIL,gBAAA,W,GAAuC,I;;AAC3C,oBACE,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,qBAAZ,KACA,OAAO,UAAU,CAAC,qBAAlB,KAA4C,UAF9C,EAGE;AACA,kBAAA,WAAW,GAAG,UAAU,CAAC,qBAAX,CAAiC,KAAK,cAAtC,CAAd;AAGD;;;AACc,uBAAM,KAAK,aAAL,CAAmB,SAAnB,CACnB,WADmB,EAEnB,kBAFmB,CAAN;;;AAAT,gBAAA,M;;oBAKD,M;;;;;iDACI,E;;;iDAGF,aAAa,CAClB,aADkB,EAElB,MAFkB,EAGlB,WAHkB,EAIlB,iBAJkB,C;;;;;;;;;AAMrB;AAzHH;AAAA;AAAA,WA2He,oCACX,KADW,EAEX,QAFW,EAGX,QAHW,EAGE;;;;;;;AAEP,gBAAA,a,GAAgB,KAAK,eAAL,CAAqB,QAArB,C;;AACP,uBAAM,KAAK,aAAL,CAAmB,SAAnB,CAA6B,aAAa,CAAC,IAA3C,CAAN;;;AAAT,gBAAA,M;;AACsB,uBAAM,KAAK,aAAL,CAAmB,sBAAnB,CAChC,aADgC,CAAN;;;AAAtB,gBAAA,mB;AAIA,gBAAA,Y,GAAe,KAAK,CAAC,IAAN,CAAW,mBAAX,EAAgC,GAAhC,CACnB;AAAA;AAAA,sBAAI,IAAJ;;AAAA,yBAAc,IAAI,CAAC,UAAnB;AAAA,iBADmB,C;;qBAIjB,M;;;;;kDACK,2BAA0B,CAC/B,MAD+B,EAE/B,KAF+B,EAG/B,QAH+B,EAI/B,SAJ+B,EAK/B,YAL+B,C;;;kDAQ5B,E;;;;;;;;;AACR;AApJH;AAAA;AAAA,WAsJe,6BACX,KADW,EAEX,QAFW,EAGX,QAHW,EAGE;;;;;;;AAEP,gBAAA,a,GAAgB,KAAK,eAAL,CAAqB,QAArB,C;;AACP,uBAAM,KAAK,aAAL,CAAmB,SAAnB,CAA6B,aAAa,CAAC,IAA3C,CAAN;;;AAAT,gBAAA,M;;qBAEF,M;;;;;kDACK,oBAAmB,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,C;;;kDAErB,E;;;;;;;;;AACR;AAlKH;AAAA;AAAA,WAoKe,uBACX,KADW,EAEX,QAFW,EAGX,QAHW,EAGE;;;;;;;AAEP,gBAAA,a,GAAgB,KAAK,eAAL,CAAqB,QAArB,C;;AAIpB,gBAAA,GAAG,GAAG,KAAK,CAAC,KAAD,CAAX;;;;;;;kDAEO,I;;;AAGH,gBAAA,I,GAAO,oBAAoB,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,C;;qBAC7B,I;;;;;+BACM,IAAI,CAAC,I;kDACN,e,yBASA,mB,yBACA,oB,yBAOA,U;;;;kDAhBI,KAAK,+BAAL,CACL,KADK,EAEL,GAFK,EAGL,IAHK,EAIL,QAJK,EAKL,aALK,C;;;kDAUA,yCAAyC,CAC9C,QAD8C,EAE9C,KAF8C,EAG9C,IAH8C,C;;;kDAOzC,KAAK,0BAAL,CACL,KADK,EAEL,GAFK,EAGL,IAHK,EAIL,QAJK,EAKL,aALK,C;;;kDASN,I;;;;;;;;;AACR;AAjNH;AAAA;AAAA,WAmNe,4BACX,QADW,EAEX,QAFW,EAEE;;;;;;;;;AAEG,uBAAM,KAAK,UAAL,CAAgB,QAAhB,CAAN;;;AAAV,gBAAA,O;;oBACD,O;;;;;kDACI,E;;;AAGH,gBAAA,M,GAAmC,E;AACnC,gBAAA,K,GAAQ,OAAO,CAAC,YAAR,CAAqB,GAArB,CAAyB,UAAC,IAAD;AAAA,yBAAuB,CAAC,IAAD,EAAO,IAAP,CAAvB;AAAA,iBAAzB,C;;;AAGZ,sBAAM,GAAG,GAAG,KAAK,CAAC,GAAN,EAAZ;;AACA,sBAAI,CAAC,GAAL,EAAU;AACR;AAAA,yBAAO;AAAP;AACD;;AACD,4CAAuB,GAAvB;AAAA,sBAAO,MAAP;AAAA,sBAAe,IAAf;;AACA,sBAAI,CAAC,IAAL,EAAW;AACT;AAAA,yBAAO;AAAP;AACD;;AAED,kBAAA,MAAM,CAAC,IAAP,CAAY;AAEV,oBAAA,IAAI,EAAE,IAAI,CAAC,kBAFD;AAGV,oBAAA,IAAI,EAAE,OAAO,CAAC,IAAD,CAHH;AAIV,oBAAA,QAAQ,EAAE;AACR,sBAAA,GAAG,EAAE,QADG;AAER,sBAAA,KAAK,EAAE;AACL,wBAAA,KAAK,EAAE,IAAI,CAAC,aADP;AAGL,wBAAA,GAAG,EAAE,IAAI,CAAC;AAHL;AAFC,qBAJA;AAYV,oBAAA,aAAa,EAAE,MAAM,GAAG,MAAM,CAAC,kBAAV,GAA+B;AAZ1C,mBAAZ;AAcA,kBAAA,KAAK,CAAC,IAAN,OAAA,KAAK,qBAAS,IAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,UAAA,KAAK;AAAA,2BAAI,CAAC,IAAD,EAAO,KAAP,CAAJ;AAAA,mBAAvB,CAAT,EAAL;;;;sBAxBK,KAAK,CAAC,MAAN,GAAe,C;;;;;;;;;;;;;;;;;;;kDA0Bf,M;;;;;;;;;AACR;AA1PH;AAAA;AAAA,WAoQQ,oCACJ,KADI,EAEJ,GAFI,EAGJ,IAHI,EAIJ,QAJI,EAKJ,aALI,EAK+B;;;;;;;;AAEL,uBAAM,KAAK,aAAL,CAAmB,wBAAnB,CAClC,aADkC,CAAN;;;AAAxB,gBAAA,qB;;AAIe,uBAAM,KAAK,aAAL,CAAmB,+BAAnB,CACzB,GADyB,EAEzB,qBAFyB,CAAN;;;AAAf,gBAAA,Y;AAKA,gBAAA,0B,GAA6B,GAAG,CAAC,WAAJ,CAAgB,MAAhB,CACjC,UAAA,UAAU;AAAA,yBACR,UAAU,CAAC,IAAX,KAAoB,sBAApB,IACA,UAAU,CAAC,IAAX,KAAoB,4BADpB,IAEA,UAAU,CAAC,IAAX,KAAoB,oBAFpB,IAGA,UAAU,CAAC,IAAX,KAAoB,sBAHpB,IAIA,UAAU,CAAC,IAAX,KAAoB,yBALZ;AAAA,iBADuB,C;AAS7B,gBAAA,c,GAAkB,0B;AAIlB,gBAAA,6B,GAAgC,cAAc,CAAC,GAAf,CACpC,UAAC,UAAD;AAAA,yBAAqC;AACnC,oBAAA,QAAQ,EAAR,QADmC;AAEnC,oBAAA,OAAO,EAAE,KAF0B;AAGnC,oBAAA,UAAU,EAAV;AAHmC,mBAArC;AAAA,iBADoC,C;;AAQvB,uBAAM,oCAAoC,CACvD,KADuD,EAEvD,IAFuD,EAGvD,YAAY,CAAC,MAAb,CAAoB,6BAApB,CAHuD,CAA1C;;;AAAT,gBAAA,M;kDAMC,M;;;;;;;;;AACR;AAhTH;AAAA;AAAA,WAkTQ,yCACJ,KADI,EAEJ,GAFI,EAGJ,IAHI,EAIJ,QAJI,EAKJ,aALI,EAK+B;;;;;;;;AAEP,uBAAM,KAAK,aAAL,CAAmB,sBAAnB,CAChC,aADgC,CAAN;;;AAAtB,gBAAA,mB;;AAIe,uBAAM,KAAK,aAAL,CAAmB,6BAAnB,CACzB,GADyB,EAEzB,mBAFyB,CAAN;;;AAAf,gBAAA,Y;AAKA,gBAAA,oB,GAAuB,GAAG,CAAC,WAAJ,CAAgB,MAAhB,CAC3B,UAAA,UAAU;AAAA,yBAAI,UAAU,CAAC,IAAX,KAAoB,mBAAxB;AAAA,iBADiB,C;AAIvB,gBAAA,c,GAAkB,oB;AAIlB,gBAAA,c,GAAiB,cAAc,CAAC,GAAf,CACrB,UAAC,UAAD;AAAA,yBAAyC;AACvC,oBAAA,QAAQ,EAAR,QADuC;AAEvC,oBAAA,OAAO,EAAE,KAF8B;AAGvC,oBAAA,UAAU,EAAV;AAHuC,mBAAzC;AAAA,iBADqB,C;;AAQR,uBAAM,yCAAyC,CAC5D,KAD4D,EAE5D,IAF4D,EAG5D,YAAY,CAAC,MAAb,CAAoB,cAApB,CAH4D,CAA/C;;;AAAT,gBAAA,M;kDAMC,M;;;;;;;;;AACR;AAzVH;AAAA;AAAA,WA0VQ,oBAAW,YAAX,EAA+B;;;;;;kDAC5B,WAAU,CAAC,YAAD,C;;;;;;;;;AAClB;AA5VH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SymbolKind, } from 'vscode-languageserver-types';\nimport { Kind, parse, print } from 'graphql';\nimport { getAutocompleteSuggestions } from './getAutocompleteSuggestions';\nimport { getHoverInformation } from './getHoverInformation';\nimport { validateQuery, getRange, DIAGNOSTIC_SEVERITY } from './getDiagnostics';\nimport { getDefinitionQueryResultForFragmentSpread, getDefinitionQueryResultForDefinitionNode, getDefinitionQueryResultForNamedType, } from './getDefinition';\nimport { getOutline } from './getOutline';\nimport { getASTNodeAtPosition } from 'graphql-language-service-utils';\nconst { FRAGMENT_DEFINITION, OBJECT_TYPE_DEFINITION, INTERFACE_TYPE_DEFINITION, ENUM_TYPE_DEFINITION, UNION_TYPE_DEFINITION, SCALAR_TYPE_DEFINITION, INPUT_OBJECT_TYPE_DEFINITION, SCALAR_TYPE_EXTENSION, OBJECT_TYPE_EXTENSION, INTERFACE_TYPE_EXTENSION, UNION_TYPE_EXTENSION, ENUM_TYPE_EXTENSION, INPUT_OBJECT_TYPE_EXTENSION, DIRECTIVE_DEFINITION, FRAGMENT_SPREAD, OPERATION_DEFINITION, NAMED_TYPE, } = Kind;\nconst KIND_TO_SYMBOL_KIND = {\n    [Kind.FIELD]: SymbolKind.Field,\n    [Kind.OPERATION_DEFINITION]: SymbolKind.Class,\n    [Kind.FRAGMENT_DEFINITION]: SymbolKind.Class,\n    [Kind.FRAGMENT_SPREAD]: SymbolKind.Struct,\n    [Kind.OBJECT_TYPE_DEFINITION]: SymbolKind.Class,\n    [Kind.ENUM_TYPE_DEFINITION]: SymbolKind.Enum,\n    [Kind.ENUM_VALUE_DEFINITION]: SymbolKind.EnumMember,\n    [Kind.INPUT_OBJECT_TYPE_DEFINITION]: SymbolKind.Class,\n    [Kind.INPUT_VALUE_DEFINITION]: SymbolKind.Field,\n    [Kind.FIELD_DEFINITION]: SymbolKind.Field,\n    [Kind.INTERFACE_TYPE_DEFINITION]: SymbolKind.Interface,\n    [Kind.DOCUMENT]: SymbolKind.File,\n    FieldWithArguments: SymbolKind.Method,\n};\nfunction getKind(tree) {\n    if (tree.kind === 'FieldDefinition' &&\n        tree.children &&\n        tree.children.length > 0) {\n        return KIND_TO_SYMBOL_KIND.FieldWithArguments;\n    }\n    return KIND_TO_SYMBOL_KIND[tree.kind];\n}\nexport class GraphQLLanguageService {\n    constructor(cache) {\n        this._graphQLCache = cache;\n        this._graphQLConfig = cache.getGraphQLConfig();\n    }\n    getConfigForURI(uri) {\n        const config = this._graphQLCache.getProjectForFile(uri);\n        if (config) {\n            return config;\n        }\n        throw Error(`No config found for uri: ${uri}`);\n    }\n    getDiagnostics(query, uri, isRelayCompatMode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let queryHasExtensions = false;\n            const projectConfig = this.getConfigForURI(uri);\n            if (!projectConfig) {\n                return [];\n            }\n            const { schema: schemaPath, name: projectName, extensions } = projectConfig;\n            try {\n                const queryAST = parse(query);\n                if (!schemaPath || uri !== schemaPath) {\n                    queryHasExtensions = queryAST.definitions.some(definition => {\n                        switch (definition.kind) {\n                            case OBJECT_TYPE_DEFINITION:\n                            case INTERFACE_TYPE_DEFINITION:\n                            case ENUM_TYPE_DEFINITION:\n                            case UNION_TYPE_DEFINITION:\n                            case SCALAR_TYPE_DEFINITION:\n                            case INPUT_OBJECT_TYPE_DEFINITION:\n                            case SCALAR_TYPE_EXTENSION:\n                            case OBJECT_TYPE_EXTENSION:\n                            case INTERFACE_TYPE_EXTENSION:\n                            case UNION_TYPE_EXTENSION:\n                            case ENUM_TYPE_EXTENSION:\n                            case INPUT_OBJECT_TYPE_EXTENSION:\n                            case DIRECTIVE_DEFINITION:\n                                return true;\n                        }\n                        return false;\n                    });\n                }\n            }\n            catch (error) {\n                const range = getRange(error.locations[0], query);\n                return [\n                    {\n                        severity: DIAGNOSTIC_SEVERITY.Error,\n                        message: error.message,\n                        source: 'GraphQL: Syntax',\n                        range,\n                    },\n                ];\n            }\n            let source = query;\n            const fragmentDefinitions = yield this._graphQLCache.getFragmentDefinitions(projectConfig);\n            const fragmentDependencies = yield this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions);\n            const dependenciesSource = fragmentDependencies.reduce((prev, cur) => `${prev} ${print(cur.definition)}`, '');\n            source = `${source} ${dependenciesSource}`;\n            let validationAst = null;\n            try {\n                validationAst = parse(source);\n            }\n            catch (error) {\n                return [];\n            }\n            let customRules = null;\n            if ((extensions === null || extensions === void 0 ? void 0 : extensions.customValidationRules) &&\n                typeof extensions.customValidationRules === 'function') {\n                customRules = extensions.customValidationRules(this._graphQLConfig);\n            }\n            const schema = yield this._graphQLCache.getSchema(projectName, queryHasExtensions);\n            if (!schema) {\n                return [];\n            }\n            return validateQuery(validationAst, schema, customRules, isRelayCompatMode);\n        });\n    }\n    getAutocompleteSuggestions(query, position, filePath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const projectConfig = this.getConfigForURI(filePath);\n            const schema = yield this._graphQLCache.getSchema(projectConfig.name);\n            const fragmentDefinitions = yield this._graphQLCache.getFragmentDefinitions(projectConfig);\n            const fragmentInfo = Array.from(fragmentDefinitions).map(([, info]) => info.definition);\n            if (schema) {\n                return getAutocompleteSuggestions(schema, query, position, undefined, fragmentInfo);\n            }\n            return [];\n        });\n    }\n    getHoverInformation(query, position, filePath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const projectConfig = this.getConfigForURI(filePath);\n            const schema = yield this._graphQLCache.getSchema(projectConfig.name);\n            if (schema) {\n                return getHoverInformation(schema, query, position);\n            }\n            return '';\n        });\n    }\n    getDefinition(query, position, filePath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const projectConfig = this.getConfigForURI(filePath);\n            let ast;\n            try {\n                ast = parse(query);\n            }\n            catch (error) {\n                return null;\n            }\n            const node = getASTNodeAtPosition(query, ast, position);\n            if (node) {\n                switch (node.kind) {\n                    case FRAGMENT_SPREAD:\n                        return this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig);\n                    case FRAGMENT_DEFINITION:\n                    case OPERATION_DEFINITION:\n                        return getDefinitionQueryResultForDefinitionNode(filePath, query, node);\n                    case NAMED_TYPE:\n                        return this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig);\n                }\n            }\n            return null;\n        });\n    }\n    getDocumentSymbols(document, filePath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const outline = yield this.getOutline(document);\n            if (!outline) {\n                return [];\n            }\n            const output = [];\n            const input = outline.outlineTrees.map((tree) => [null, tree]);\n            while (input.length > 0) {\n                const res = input.pop();\n                if (!res) {\n                    return [];\n                }\n                const [parent, tree] = res;\n                if (!tree) {\n                    return [];\n                }\n                output.push({\n                    name: tree.representativeName,\n                    kind: getKind(tree),\n                    location: {\n                        uri: filePath,\n                        range: {\n                            start: tree.startPosition,\n                            end: tree.endPosition,\n                        },\n                    },\n                    containerName: parent ? parent.representativeName : undefined,\n                });\n                input.push(...tree.children.map(child => [tree, child]));\n            }\n            return output;\n        });\n    }\n    _getDefinitionForNamedType(query, ast, node, filePath, projectConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const objectTypeDefinitions = yield this._graphQLCache.getObjectTypeDefinitions(projectConfig);\n            const dependencies = yield this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);\n            const localObjectTypeDefinitions = ast.definitions.filter(definition => definition.kind === OBJECT_TYPE_DEFINITION ||\n                definition.kind === INPUT_OBJECT_TYPE_DEFINITION ||\n                definition.kind === ENUM_TYPE_DEFINITION ||\n                definition.kind === SCALAR_TYPE_DEFINITION ||\n                definition.kind === INTERFACE_TYPE_DEFINITION);\n            const typeCastedDefs = localObjectTypeDefinitions;\n            const localOperationDefinationInfos = typeCastedDefs.map((definition) => ({\n                filePath,\n                content: query,\n                definition,\n            }));\n            const result = yield getDefinitionQueryResultForNamedType(query, node, dependencies.concat(localOperationDefinationInfos));\n            return result;\n        });\n    }\n    _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const fragmentDefinitions = yield this._graphQLCache.getFragmentDefinitions(projectConfig);\n            const dependencies = yield this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);\n            const localFragDefinitions = ast.definitions.filter(definition => definition.kind === FRAGMENT_DEFINITION);\n            const typeCastedDefs = localFragDefinitions;\n            const localFragInfos = typeCastedDefs.map((definition) => ({\n                filePath,\n                content: query,\n                definition,\n            }));\n            const result = yield getDefinitionQueryResultForFragmentSpread(query, node, dependencies.concat(localFragInfos));\n            return result;\n        });\n    }\n    getOutline(documentText) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getOutline(documentText);\n        });\n    }\n}\n//# sourceMappingURL=GraphQLLanguageService.js.map"]},"metadata":{},"sourceType":"module"}