{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\n\nvar modeToString = require('./mode-to-string.js');\n\nfunction multipartRequest(source, abortController) {\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var parts, formData, index, total, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parts = [];\n          formData = new FormData();\n          index = 0;\n          total = 0;\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 6;\n          _iterator = _asyncIterator(normaliseInputMultiple_browser.normaliseInput(source));\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 10:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 14:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 41;\n            break;\n          }\n\n          _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n          fileSuffix = '';\n          type = content ? 'file' : 'dir';\n\n          if (index > 0) {\n            fileSuffix = \"-\".concat(index);\n          }\n\n          fieldName = type + fileSuffix;\n          qs = [];\n\n          if (mode !== null && mode !== undefined) {\n            qs.push(\"mode=\".concat(modeToString.modeToString(mode)));\n          }\n\n          if (mtime != null) {\n            secs = mtime.secs, nsecs = mtime.nsecs;\n            qs.push(\"mtime=\".concat(secs));\n\n            if (nsecs != null) {\n              qs.push(\"mtime-nsecs=\".concat(nsecs));\n            }\n          }\n\n          if (qs.length) {\n            fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n          }\n\n          if (!content) {\n            _context.next = 32;\n            break;\n          }\n\n          formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n          end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end: end\n          });\n          total = end;\n          _context.next = 37;\n          break;\n\n        case 32:\n          if (!(path != null)) {\n            _context.next = 36;\n            break;\n          }\n\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n          _context.next = 37;\n          break;\n\n        case 36:\n          throw new Error('path or content or both must be set');\n\n        case 37:\n          index++;\n\n        case 38:\n          _iteratorNormalCompletion = true;\n          _context.next = 8;\n          break;\n\n        case 41:\n          _context.next = 47;\n          break;\n\n        case 43:\n          _context.prev = 43;\n          _context.t0 = _context[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 47:\n          _context.prev = 47;\n          _context.prev = 48;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 52;\n            break;\n          }\n\n          _context.next = 52;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 52:\n          _context.prev = 52;\n\n          if (!_didIteratorError) {\n            _context.next = 55;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 55:\n          return _context.finish(52);\n\n        case 56:\n          return _context.finish(47);\n\n        case 57:\n          return _context.abrupt(\"return\", {\n            total: total,\n            parts: parts,\n            headers: headers,\n            body: formData\n          });\n\n        case 58:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[6, 43, 47, 57], [48,, 52, 56]], Promise);\n}\n\nexports.multipartRequest = multipartRequest;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ipfs-core-utils/cjs/src/multipart-request.browser.js"],"names":["Object","defineProperty","exports","value","normaliseInputMultiple_browser","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","normaliseInput","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\nvar modeToString = require('./mode-to-string.js');\n\nasync function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {content, path, mode, mtime} of normaliseInputMultiple_browser.normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${ index }`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${ modeToString.modeToString(mode) }`);\n    }\n    if (mtime != null) {\n      const {secs, nsecs} = mtime;\n      qs.push(`mtime=${ secs }`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${ nsecs }`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${ fieldName }?${ qs.join('&') }`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\n\nexports.multipartRequest = multipartRequest;\n"]},"metadata":{},"sourceType":"script"}