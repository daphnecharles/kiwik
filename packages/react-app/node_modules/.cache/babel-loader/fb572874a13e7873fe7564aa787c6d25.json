{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar SafeEventEmitter = require('@metamask/safe-event-emitter').default;\n\nvar createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nvar _require = require('json-rpc-engine'),\n    createAsyncMiddleware = _require.createAsyncMiddleware;\n\nvar createFilterMiddleware = require('./index.js');\n\nvar _require2 = require('./hexUtils.js'),\n    unsafeRandomBytes = _require2.unsafeRandomBytes,\n    incrementHexInt = _require2.incrementHexInt;\n\nvar getBlocksForRange = require('./getBlocksForRange.js');\n\nmodule.exports = createSubscriptionMiddleware;\n\nfunction createSubscriptionMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n      provider = _ref.provider;\n  // state and utilities for handling subscriptions\n  var subscriptions = {};\n  var filterManager = createFilterMiddleware({\n    blockTracker: blockTracker,\n    provider: provider\n  }); // internal flag\n\n  var isDestroyed = false; // create subscriptionManager api object\n\n  var events = new SafeEventEmitter();\n  var middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events: events,\n    middleware: middleware\n  };\n\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n\n  function _subscribe() {\n    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {\n      var subscriptionType, subId, sub, filterParams, filter, createSubNewHeads, createSubFromFilter;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              createSubFromFilter = function _createSubFromFilter(_ref4) {\n                var subId = _ref4.subId,\n                    filter = _ref4.filter;\n                filter.on('update', function (result) {\n                  return _emitSubscriptionResult(subId, result);\n                });\n                var sub = {\n                  type: subscriptionType,\n                  destroy: function () {\n                    var _destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return filterManager.uninstallFilter(filter.idHex);\n\n                            case 2:\n                              return _context3.abrupt(\"return\", _context3.sent);\n\n                            case 3:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    function destroy() {\n                      return _destroy2.apply(this, arguments);\n                    }\n\n                    return destroy;\n                  }()\n                };\n                return sub;\n              };\n\n              createSubNewHeads = function _createSubNewHeads(_ref2) {\n                var subId = _ref2.subId;\n                var sub = {\n                  type: subscriptionType,\n                  destroy: function () {\n                    var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              blockTracker.removeListener('sync', sub.update);\n\n                            case 1:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    function destroy() {\n                      return _destroy.apply(this, arguments);\n                    }\n\n                    return destroy;\n                  }(),\n                  update: function () {\n                    var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n                      var oldBlock, newBlock, toBlock, fromBlock, rawBlocks, results;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                              // for newHeads\n                              toBlock = newBlock;\n                              fromBlock = incrementHexInt(oldBlock);\n                              _context2.next = 5;\n                              return getBlocksForRange({\n                                provider: provider,\n                                fromBlock: fromBlock,\n                                toBlock: toBlock\n                              });\n\n                            case 5:\n                              rawBlocks = _context2.sent;\n                              results = rawBlocks.map(normalizeBlock);\n                              results.forEach(function (value) {\n                                _emitSubscriptionResult(subId, value);\n                              });\n\n                            case 8:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    function update(_x5) {\n                      return _update.apply(this, arguments);\n                    }\n\n                    return update;\n                  }()\n                }; // check for subscription updates on new block\n\n                blockTracker.on('sync', sub.update);\n                return sub;\n              };\n\n              if (!isDestroyed) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw new Error('SubscriptionManager - attempting to use after destroying');\n\n            case 4:\n              subscriptionType = req.params[0]; // subId is 16 byte hex string\n\n              subId = unsafeRandomBytes(16); // create sub\n\n              _context4.t0 = subscriptionType;\n              _context4.next = _context4.t0 === 'newHeads' ? 9 : _context4.t0 === 'logs' ? 11 : 17;\n              break;\n\n            case 9:\n              sub = createSubNewHeads({\n                subId: subId\n              });\n              return _context4.abrupt(\"break\", 18);\n\n            case 11:\n              filterParams = req.params[1];\n              _context4.next = 14;\n              return filterManager.newLogFilter(filterParams);\n\n            case 14:\n              filter = _context4.sent;\n              sub = createSubFromFilter({\n                subId: subId,\n                filter: filter\n              });\n              return _context4.abrupt(\"break\", 18);\n\n            case 17:\n              throw new Error(\"SubscriptionManager - unsupported subscription type \\\"\".concat(subscriptionType, \"\\\"\"));\n\n            case 18:\n              subscriptions[subId] = sub;\n              res.result = subId;\n              return _context4.abrupt(\"return\");\n\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _subscribe.apply(this, arguments);\n  }\n\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n      var id, subscription;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!isDestroyed) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw new Error('SubscriptionManager - attempting to use after destroying');\n\n            case 2:\n              id = req.params[0];\n              subscription = subscriptions[id]; // if missing, return \"false\" to indicate it was not removed\n\n              if (subscription) {\n                _context5.next = 7;\n                break;\n              }\n\n              res.result = false;\n              return _context5.abrupt(\"return\");\n\n            case 7:\n              // cleanup subscription\n              delete subscriptions[id];\n              _context5.next = 10;\n              return subscription.destroy();\n\n            case 10:\n              res.result = true;\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _unsubscribe.apply(this, arguments);\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n\n  function destroy() {\n    events.removeAllListeners();\n\n    for (var id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n\n    isDestroyed = true;\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"names":["SafeEventEmitter","require","default","createScaffoldMiddleware","createAsyncMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","req","res","createSubNewHeads","createSubFromFilter","subId","filter","on","result","_emitSubscriptionResult","sub","type","subscriptionType","uninstallFilter","idHex","removeListener","update","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","map","normalizeBlock","forEach","value","Error","params","filterParams","newLogFilter","id","subscription","filterIdHex","emit","jsonrpc","method","removeAllListeners","block","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"mappings":"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","sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }){\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy () {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}