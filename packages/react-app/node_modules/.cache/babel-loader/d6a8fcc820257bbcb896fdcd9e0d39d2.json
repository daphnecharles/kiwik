{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicats\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nvar NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport var WebSocketProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(WebSocketProvider, _JsonRpcProvider);\n\n  var _super = _createSuper(WebSocketProvider);\n\n  function WebSocketProvider(url, network) {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, WebSocketProvider);\n\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    _this = _super.call(this, url, network);\n    _this._pollingInterval = -1;\n    _this._wsReady = false;\n    defineReadOnly(_assertThisInitialized(_this), \"_websocket\", new WebSocket(_this.connection.url));\n    defineReadOnly(_assertThisInitialized(_this), \"_requests\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subs\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subIds\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_detectNetwork\", _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WebSocketProvider.prototype)), \"detectNetwork\", _thisSuper).call(_thisSuper)); // Stall sending requests until the socket is open...\n\n    _this._websocket.onopen = function () {\n      _this._wsReady = true;\n      Object.keys(_this._requests).forEach(function (id) {\n        _this._websocket.send(_this._requests[id].payload);\n      });\n    };\n\n    _this._websocket.onmessage = function (messageEvent) {\n      var data = messageEvent.data;\n      var result = JSON.parse(data);\n\n      if (result.id != null) {\n        var id = String(result.id);\n        var request = _this._requests[id];\n        delete _this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n\n          _this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: _assertThisInitialized(_this)\n          });\n        } else {\n          var error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n\n          _this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: _assertThisInitialized(_this)\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        var sub = _this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    var fauxPoll = setInterval(function () {\n      _this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n\n    return _this;\n  }\n\n  _createClass(WebSocketProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return this._detectNetwork;\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {\n      logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPollingInterval\"\n      });\n    }\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resetEventBlock\"\n      });\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", null);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"polling\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPolling\"\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this2 = this;\n\n      var rid = NextId++;\n      return new Promise(function (resolve, reject) {\n        function callback(error, result) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve(result);\n        }\n\n        var payload = JSON.stringify({\n          method: method,\n          params: params,\n          id: rid,\n          jsonrpc: \"2.0\"\n        });\n\n        _this2.emit(\"debug\", {\n          action: \"request\",\n          request: JSON.parse(payload),\n          provider: _this2\n        });\n\n        _this2._requests[String(rid)] = {\n          callback: callback,\n          payload: payload\n        };\n\n        if (_this2._wsReady) {\n          _this2._websocket.send(payload);\n        }\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(tag, param, processFunc) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var subIdPromise, subId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                subIdPromise = this._subIds[tag];\n\n                if (subIdPromise == null) {\n                  subIdPromise = Promise.all(param).then(function (param) {\n                    return _this3.send(\"eth_subscribe\", param);\n                  });\n                  this._subIds[tag] = subIdPromise;\n                }\n\n                _context2.next = 4;\n                return subIdPromise;\n\n              case 4:\n                subId = _context2.sent;\n                this._subs[subId] = {\n                  tag: tag,\n                  processFunc: processFunc\n                };\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      var _this4 = this;\n\n      switch (event.type) {\n        case \"block\":\n          this._subscribe(\"block\", [\"newHeads\"], function (result) {\n            var blockNumber = BigNumber.from(result.number).toNumber();\n            _this4._emitted.block = blockNumber;\n\n            _this4.emit(\"block\", blockNumber);\n          });\n\n          break;\n\n        case \"pending\":\n          this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n            _this4.emit(\"pending\", result);\n          });\n\n          break;\n\n        case \"filter\":\n          this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n            if (result.removed == null) {\n              result.removed = false;\n            }\n\n            _this4.emit(event.filter, _this4.formatter.filterLog(result));\n          });\n\n          break;\n\n        case \"tx\":\n          {\n            var emitReceipt = function emitReceipt(event) {\n              var hash = event.hash;\n\n              _this4.getTransactionReceipt(hash).then(function (receipt) {\n                if (!receipt) {\n                  return;\n                }\n\n                _this4.emit(hash, receipt);\n              });\n            }; // In case it is already mined\n\n\n            emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n            // to keep an eye out for transactions we are watching for.\n            // Starting a subscription for an event (i.e. \"tx\") that is already\n            // running is (basically) a nop.\n\n            this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n              _this4._events.filter(function (e) {\n                return e.type === \"tx\";\n              }).forEach(emitReceipt);\n            });\n\n            break;\n          }\n        // Nothing is needed\n\n        case \"debug\":\n        case \"poll\":\n        case \"willPoll\":\n        case \"didPoll\":\n        case \"error\":\n          break;\n\n        default:\n          console.log(\"unhandled:\", event);\n          break;\n      }\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      var _this5 = this;\n\n      var tag = event.tag;\n\n      if (event.type === \"tx\") {\n        // There are remaining transaction event listeners\n        if (this._events.filter(function (e) {\n          return e.type === \"tx\";\n        }).length) {\n          return;\n        }\n\n        tag = \"tx\";\n      } else if (this.listenerCount(event.event)) {\n        // There are remaining event listeners\n        return;\n      }\n\n      var subId = this._subIds[tag];\n\n      if (!subId) {\n        return;\n      }\n\n      delete this._subIds[tag];\n      subId.then(function (subId) {\n        if (!_this5._subs[subId]) {\n          return;\n        }\n\n        delete _this5._subs[subId];\n\n        _this5.send(\"eth_unsubscribe\", [subId]);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this6 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this._websocket.readyState === WebSocket.CONNECTING)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return new Promise(function (resolve) {\n                  _this6._websocket.onopen = function () {\n                    resolve(true);\n                  };\n\n                  _this6._websocket.onerror = function () {\n                    resolve(false);\n                  };\n                });\n\n              case 3:\n                // Hangup\n                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n                this._websocket.close(1000);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"ws:/\\/localhost:8546\";\n    }\n  }]);\n\n  return WebSocketProvider;\n}(JsonRpcProvider);","map":{"version":3,"sources":["../src.ts/websocket-provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,SAAT,QAA0B,0BAA1B;AAEA,SAAS,cAAT,QAA+B,2BAA/B;AAGA,SAAS,eAAT,QAAgC,qBAAhC;AACA,SAAS,SAAT,QAA0B,MAA1B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA;;;;;;;;;;;;;AAaG;;AAEH,IAAI,MAAM,GAAG,CAAb,C,CAaA;AACA;;AAEA,WAAa,iBAAb;AAAA;;AAAA;;AAaI,6BAAY,GAAZ,EAAyB,OAAzB,EAA6C;AAAA;;AAAA;;AACzC;AACA,QAAI,OAAO,KAAK,KAAhB,EAAuB;AACnB,MAAA,MAAM,CAAC,UAAP,CAAkB,sDAAlB,EAA0E,MAAM,CAAC,MAAP,CAAc,qBAAxF,EAA+G;AAC3G,QAAA,SAAS,EAAE;AADgG,OAA/G;AAGH;;AAED,8BAAM,GAAN,EAAW,OAAX;AACA,UAAK,gBAAL,GAAwB,CAAC,CAAzB;AAEA,UAAK,QAAL,GAAgB,KAAhB;AAEA,IAAA,cAAc,gCAAO,YAAP,EAAqB,IAAI,SAAJ,CAAc,MAAK,UAAL,CAAgB,GAA9B,CAArB,CAAd;AACA,IAAA,cAAc,gCAAO,WAAP,EAAoB,EAApB,CAAd;AACA,IAAA,cAAc,gCAAO,OAAP,EAAgB,EAAhB,CAAd;AACA,IAAA,cAAc,gCAAO,SAAP,EAAkB,EAAlB,CAAd;AACA,IAAA,cAAc,gCAAO,gBAAP,iJAAd,CAjByC,CAmBzC;;AACA,UAAK,UAAL,CAAgB,MAAhB,GAAyB,YAAK;AAC1B,YAAK,QAAL,GAAgB,IAAhB;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAK,SAAjB,EAA4B,OAA5B,CAAoC,UAAC,EAAD,EAAO;AACvC,cAAK,UAAL,CAAgB,IAAhB,CAAqB,MAAK,SAAL,CAAe,EAAf,EAAmB,OAAxC;AACH,OAFD;AAGH,KALD;;AAOA,UAAK,UAAL,CAAgB,SAAhB,GAA4B,UAAC,YAAD,EAAmC;AAC3D,UAAM,IAAI,GAAG,YAAY,CAAC,IAA1B;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAf;;AACA,UAAI,MAAM,CAAC,EAAP,IAAa,IAAjB,EAAuB;AACnB,YAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAR,CAAjB;AACA,YAAM,OAAO,GAAG,MAAK,SAAL,CAAe,EAAf,CAAhB;AACA,eAAO,MAAK,SAAL,CAAe,EAAf,CAAP;;AAEA,YAAI,MAAM,CAAC,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,UAAA,OAAO,CAAC,QAAR,CAAiB,IAAjB,EAAuB,MAAM,CAAC,MAA9B;;AAEA,gBAAK,IAAL,CAAU,OAAV,EAAmB;AACf,YAAA,MAAM,EAAE,UADO;AAEf,YAAA,OAAO,EAAE,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,OAAnB,CAFM;AAGf,YAAA,QAAQ,EAAE,MAAM,CAAC,MAHF;AAIf,YAAA,QAAQ;AAJO,WAAnB;AAOH,SAVD,MAUO;AACH,cAAI,KAAK,GAAU,IAAnB;;AACA,cAAI,MAAM,CAAC,KAAX,EAAkB;AACd,YAAA,KAAK,GAAG,IAAI,KAAJ,CAAU,MAAM,CAAC,KAAP,CAAa,OAAb,IAAwB,eAAlC,CAAR;AACA,YAAA,cAAc,CAAM,KAAN,EAAa,MAAb,EAAqB,MAAM,CAAC,KAAP,CAAa,IAAb,IAAqB,IAA1C,CAAd;AACA,YAAA,cAAc,CAAM,KAAN,EAAa,UAAb,EAAyB,IAAzB,CAAd;AACH,WAJD,MAIO;AACH,YAAA,KAAK,GAAG,IAAI,KAAJ,CAAU,eAAV,CAAR;AACH;;AAED,UAAA,OAAO,CAAC,QAAR,CAAiB,KAAjB,EAAwB,SAAxB;;AAEA,gBAAK,IAAL,CAAU,OAAV,EAAmB;AACf,YAAA,MAAM,EAAE,UADO;AAEf,YAAA,KAAK,EAAE,KAFQ;AAGf,YAAA,OAAO,EAAE,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,OAAnB,CAHM;AAIf,YAAA,QAAQ;AAJO,WAAnB;AAOH;AAEJ,OApCD,MAoCO,IAAI,MAAM,CAAC,MAAP,KAAkB,kBAAtB,EAA0C;AAC7C;AACA,YAAM,GAAG,GAAG,MAAK,KAAL,CAAW,MAAM,CAAC,MAAP,CAAc,YAAzB,CAAZ;;AACA,YAAI,GAAJ,EAAS;AACL;AACA,UAAA,GAAG,CAAC,WAAJ,CAAgB,MAAM,CAAC,MAAP,CAAc,MAA9B;AACH;AAEJ,OARM,MAQA;AACH,QAAA,OAAO,CAAC,IAAR,CAAa,wBAAb;AACH;AACJ,KAlDD,CA3ByC,CA+EzC;AACA;AACA;;;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,YAAK;AAC9B,YAAK,IAAL,CAAU,MAAV;AACH,KAF2B,EAEzB,IAFyB,CAA5B;;AAGA,QAAI,QAAQ,CAAC,KAAb,EAAoB;AAAE,MAAA,QAAQ,CAAC,KAAT;AAAmB;;AArFA;AAsF5C;;AAnGL;AAAA;AAAA,WAqGI,yBAAa;AACT,aAAO,KAAK,cAAZ;AACH;AAvGL;AAAA;AAAA,SAyGI,eAAmB;AACf,aAAO,CAAP;AACH,KA3GL;AAAA,SAmHI,aAAoB,KAApB,EAAiC;AAC7B,MAAA,MAAM,CAAC,UAAP,CAAkB,kDAAlB,EAAsE,MAAM,CAAC,MAAP,CAAc,qBAApF,EAA2G;AACvG,QAAA,SAAS,EAAE;AAD4F,OAA3G;AAGH;AAvHL;AAAA;AAAA,WA6GI,0BAAiB,WAAjB,EAAoC;AAChC,MAAA,MAAM,CAAC,UAAP,CAAkB,gDAAlB,EAAoE,MAAM,CAAC,MAAP,CAAc,qBAAlF,EAAyG;AACrG,QAAA,SAAS,EAAE;AAD0F,OAAzG;AAGH;AAjHL;AAAA;AAAA,WAyHU,gBAAI;;;;;;iDACC,I;;;;;;;;;AACV;AA3HL;AAAA;AAAA,SA6HI,aAAY,KAAZ,EAA0B;AACtB,UAAI,CAAC,KAAL,EAAY;AAAE;AAAS;;AAEvB,MAAA,MAAM,CAAC,UAAP,CAAkB,yCAAlB,EAA6D,MAAM,CAAC,MAAP,CAAc,qBAA3E,EAAkG;AAC9F,QAAA,SAAS,EAAE;AADmF,OAAlG;AAGH;AAnIL;AAAA;AAAA,WAqII,cAAK,MAAL,EAAqB,MAArB,EAAwC;AAAA;;AACpC,UAAM,GAAG,GAAG,MAAM,EAAlB;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACnC,iBAAS,QAAT,CAAkB,KAAlB,EAAgC,MAAhC,EAA2C;AACvC,cAAI,KAAJ,EAAW;AAAE,mBAAO,MAAM,CAAC,KAAD,CAAb;AAAuB;;AACpC,iBAAO,OAAO,CAAC,MAAD,CAAd;AACH;;AAED,YAAM,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe;AAC3B,UAAA,MAAM,EAAE,MADmB;AAE3B,UAAA,MAAM,EAAE,MAFmB;AAG3B,UAAA,EAAE,EAAE,GAHuB;AAI3B,UAAA,OAAO,EAAE;AAJkB,SAAf,CAAhB;;AAOA,QAAA,MAAI,CAAC,IAAL,CAAU,OAAV,EAAmB;AACf,UAAA,MAAM,EAAE,SADO;AAEf,UAAA,OAAO,EAAE,IAAI,CAAC,KAAL,CAAW,OAAX,CAFM;AAGf,UAAA,QAAQ,EAAE;AAHK,SAAnB;;AAMA,QAAA,MAAI,CAAC,SAAL,CAAe,MAAM,CAAC,GAAD,CAArB,IAA8B;AAAE,UAAA,QAAQ,EAAR,QAAF;AAAY,UAAA,OAAO,EAAP;AAAZ,SAA9B;;AAEA,YAAI,MAAI,CAAC,QAAT,EAAmB;AAAE,UAAA,MAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,OAArB;AAAgC;AACxD,OAtBM,CAAP;AAuBH;AA/JL;AAAA;AAAA,WAqKU,oBAAW,GAAX,EAAwB,KAAxB,EAA2C,WAA3C,EAA6E;;;;;;;;;AAC3E,gBAAA,Y,GAAe,KAAK,OAAL,CAAa,GAAb,C;;AACnB,oBAAI,YAAY,IAAI,IAApB,EAA0B;AACtB,kBAAA,YAAY,GAAG,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,IAAnB,CAAwB,UAAC,KAAD,EAAU;AAC7C,2BAAO,MAAI,CAAC,IAAL,CAAU,eAAV,EAA2B,KAA3B,CAAP;AACH,mBAFc,CAAf;AAGA,uBAAK,OAAL,CAAa,GAAb,IAAoB,YAApB;AACH;;;AACa,uBAAM,YAAN;;;AAAR,gBAAA,K;AACN,qBAAK,KAAL,CAAW,KAAX,IAAoB;AAAE,kBAAA,GAAG,EAAH,GAAF;AAAO,kBAAA,WAAW,EAAX;AAAP,iBAApB;;;;;;;;;AACH;AA/KL;AAAA;AAAA,WAiLI,qBAAY,KAAZ,EAAwB;AAAA;;AACpB,cAAQ,KAAK,CAAC,IAAd;AACI,aAAK,OAAL;AACI,eAAK,UAAL,CAAgB,OAAhB,EAAyB,CAAE,UAAF,CAAzB,EAAyC,UAAC,MAAD,EAAgB;AACrD,gBAAM,WAAW,GAAG,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,MAAtB,EAA8B,QAA9B,EAApB;AACA,YAAA,MAAI,CAAC,QAAL,CAAc,KAAd,GAAsB,WAAtB;;AACA,YAAA,MAAI,CAAC,IAAL,CAAU,OAAV,EAAmB,WAAnB;AACH,WAJD;;AAKA;;AAEJ,aAAK,SAAL;AACI,eAAK,UAAL,CAAgB,SAAhB,EAA2B,CAAE,wBAAF,CAA3B,EAAyD,UAAC,MAAD,EAAgB;AACrE,YAAA,MAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,MAArB;AACH,WAFD;;AAGA;;AAEJ,aAAK,QAAL;AACI,eAAK,UAAL,CAAgB,KAAK,CAAC,GAAtB,EAA2B,CAAE,MAAF,EAAU,KAAK,UAAL,CAAgB,KAAK,CAAC,MAAtB,CAAV,CAA3B,EAAsE,UAAC,MAAD,EAAgB;AAClF,gBAAI,MAAM,CAAC,OAAP,IAAkB,IAAtB,EAA4B;AAAE,cAAA,MAAM,CAAC,OAAP,GAAiB,KAAjB;AAAyB;;AACvD,YAAA,MAAI,CAAC,IAAL,CAAU,KAAK,CAAC,MAAhB,EAAwB,MAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAxB;AACH,WAHD;;AAIA;;AAEJ,aAAK,IAAL;AAAW;AACP,gBAAM,WAAW,GAAG,SAAd,WAAc,CAAC,KAAD,EAAiB;AACjC,kBAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;;AACA,cAAA,MAAI,CAAC,qBAAL,CAA2B,IAA3B,EAAiC,IAAjC,CAAsC,UAAC,OAAD,EAAY;AAC9C,oBAAI,CAAC,OAAL,EAAc;AAAE;AAAS;;AACzB,gBAAA,MAAI,CAAC,IAAL,CAAU,IAAV,EAAgB,OAAhB;AACH,eAHD;AAIH,aAND,CADO,CASP;;;AACA,YAAA,WAAW,CAAC,KAAD,CAAX,CAVO,CAYP;AACA;AACA;AACA;;AACA,iBAAK,UAAL,CAAgB,IAAhB,EAAsB,CAAE,UAAF,CAAtB,EAAsC,UAAC,MAAD,EAAgB;AAClD,cAAA,MAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,UAAC,CAAD;AAAA,uBAAQ,CAAC,CAAC,IAAF,KAAW,IAAnB;AAAA,eAApB,EAA8C,OAA9C,CAAsD,WAAtD;AACH,aAFD;;AAGA;AACH;AAED;;AACA,aAAK,OAAL;AACA,aAAK,MAAL;AACA,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,OAAL;AACI;;AAEJ;AACI,UAAA,OAAO,CAAC,GAAR,CAAY,YAAZ,EAA0B,KAA1B;AACA;AAtDR;AAwDH;AA1OL;AAAA;AAAA,WA4OI,oBAAW,KAAX,EAAuB;AAAA;;AACnB,UAAI,GAAG,GAAG,KAAK,CAAC,GAAhB;;AAEA,UAAI,KAAK,CAAC,IAAN,KAAe,IAAnB,EAAyB;AACrB;AACA,YAAI,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,CAAD;AAAA,iBAAQ,CAAC,CAAC,IAAF,KAAW,IAAnB;AAAA,SAApB,EAA8C,MAAlD,EAA0D;AACtD;AACH;;AACD,QAAA,GAAG,GAAG,IAAN;AACH,OAND,MAMO,IAAI,KAAK,aAAL,CAAmB,KAAK,CAAC,KAAzB,CAAJ,EAAqC;AACxC;AACA;AACH;;AAED,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,GAAb,CAAd;;AACA,UAAI,CAAC,KAAL,EAAY;AAAE;AAAS;;AAExB,aAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,UAAC,KAAD,EAAU;AAChB,YAAI,CAAC,MAAI,CAAC,KAAL,CAAW,KAAX,CAAL,EAAwB;AAAE;AAAS;;AACnC,eAAO,MAAI,CAAC,KAAL,CAAW,KAAX,CAAP;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,iBAAV,EAA6B,CAAE,KAAF,CAA7B;AACH,OAJF;AAKF;AAnQL;AAAA;AAAA,WAqQU,mBAAO;;;;;;;;sBAEL,KAAK,UAAL,CAAgB,UAAhB,KAA+B,SAAS,CAAC,U;;;;;;AACzC,uBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AAC3B,kBAAA,MAAI,CAAC,UAAL,CAAgB,MAAhB,GAAyB,YAAA;AACrB,oBAAA,OAAO,CAAC,IAAD,CAAP;AACH,mBAFD;;AAIA,kBAAA,MAAI,CAAC,UAAL,CAAgB,OAAhB,GAA0B,YAAA;AACtB,oBAAA,OAAO,CAAC,KAAD,CAAP;AACH,mBAFD;AAGH,iBARM,CAAP;;;AAWJ;AACA;AACA,qBAAK,UAAL,CAAgB,KAAhB,CAAsB,IAAtB;;;;;;;;;AACH;AAtRL;AAAA;AAAA,WAiKI,sBAAiB;AACb,aAAO,sBAAP;AACH;AAnKL;;AAAA;AAAA,EAAuC,eAAvC","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicats\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        super(url, network);\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", {});\n        defineReadOnly(this, \"_subs\", {});\n        defineReadOnly(this, \"_subIds\", {});\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n        this._websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(error, \"code\", result.error.code || null);\n                        defineReadOnly(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this._websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this._websocket.readyState === WebSocket.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this._websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this._websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this._websocket.close(1000);\n        });\n    }\n}\n//# sourceMappingURL=websocket-provider.js.map"]},"metadata":{},"sourceType":"module"}