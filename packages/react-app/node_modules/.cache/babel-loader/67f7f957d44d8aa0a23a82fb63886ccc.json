{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Mutex = require('async-mutex').Mutex;\n\nvar _require = require('json-rpc-engine'),\n    createAsyncMiddleware = _require.createAsyncMiddleware;\n\nvar createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nvar LogFilter = require('./log-filter.js');\n\nvar BlockFilter = require('./block-filter.js');\n\nvar TxFilter = require('./tx-filter.js');\n\nvar _require2 = require('./hexUtils'),\n    intToHex = _require2.intToHex,\n    hexToInt = _require2.hexToInt;\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n      provider = _ref.provider;\n  // create filter collection\n  var filterIndex = 0;\n  var filters = {}; // create update mutex\n\n  var mutex = new Mutex();\n  var waitForFree = mutexMiddlewareWrapper({\n    mutex: mutex\n  });\n  var middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  var filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n      var oldBlock, newBlock, releaseLock;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n\n              if (!(filters.length === 0)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.next = 5;\n              return mutex.acquire();\n\n            case 5:\n              releaseLock = _context2.sent;\n              _context2.prev = 6;\n              _context2.next = 9;\n              return Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filter) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return filter.update({\n                            oldBlock: oldBlock,\n                            newBlock: newBlock\n                          });\n\n                        case 3:\n                          _context.next = 8;\n                          break;\n\n                        case 5:\n                          _context.prev = 5;\n                          _context.t0 = _context[\"catch\"](0);\n                          // handle each error individually so filter update errors don't affect other filters\n                          console.error(_context.t0);\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[0, 5]]);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()));\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](6);\n              // log error so we don't skip the releaseLock\n              console.error(_context2.t0);\n\n            case 14:\n              // unlock update reads\n              releaseLock();\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 11]]);\n    }));\n\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = function () {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              filter = new LogFilter({\n                provider: provider,\n                params: params\n              });\n              _context3.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context3.sent;\n              return _context3.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filter = new BlockFilter({\n                provider: provider\n              });\n              _context4.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context4.sent;\n              return _context4.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n\n\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              filter = new TxFilter({\n                provider: provider\n              });\n              _context5.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context5.sent;\n              return _context5.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n\n              if (filter) {\n                _context6.next = 4;\n                break;\n              }\n\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n\n            case 4:\n              results = filter.getChangesAndClear();\n              return _context6.abrupt(\"return\", results);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n\n\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(filterIndexHex) {\n      var filterIndex, filter;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n\n              if (filter) {\n                _context7.next = 4;\n                break;\n              }\n\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n\n            case 4:\n              // only return results for log filters\n              if (filter.type === 'log') {\n                results = filter.getAllResults();\n              } else {\n                results = [];\n              }\n\n              return _context7.abrupt(\"return\", results);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _getFilterLogs.apply(this, arguments);\n  }\n\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n\n\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filterIndexHex) {\n      var filterIndex, filter, result;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              // check filter exists\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n              result = Boolean(filter); // uninstall filter\n\n              if (!result) {\n                _context8.next = 6;\n                break;\n              }\n\n              _context8.next = 6;\n              return uninstallFilter(filterIndex);\n\n            case 6:\n              return _context8.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n\n  function _installFilter() {\n    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filter) {\n      var prevFilterCount, currentBlock, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length; // install filter\n\n              _context9.next = 3;\n              return blockTracker.getLatestBlock();\n\n            case 3:\n              currentBlock = _context9.sent;\n              _context9.next = 6;\n              return filter.initialize({\n                currentBlock: currentBlock\n              });\n\n            case 6:\n              filterIndex++;\n              filters[filterIndex] = filter;\n              filter.id = filterIndex;\n              filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n              return _context9.abrupt(\"return\", filterIndex);\n\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _installFilter.apply(this, arguments);\n  }\n\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filterIndex) {\n      var prevFilterCount, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              delete filters[filterIndex]; // update block tracker subs\n\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var prevFilterCount;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              filters = {}; // update block tracker subs\n\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: 0\n              });\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function updateBlockTrackerSubs(_ref5) {\n    var prevFilterCount = _ref5.prevFilterCount,\n        newFilterCount = _ref5.newFilterCount;\n\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n    var filter,\n        result,\n        _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return createFilterFn.apply(void 0, _args12);\n\n          case 2:\n            filter = _context12.sent;\n            result = intToHex(filter.id);\n            return _context12.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return asyncFn.apply(null, req.params);\n\n            case 2:\n              result = _context13.sent;\n              res.result = result;\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\n\nfunction mutexMiddlewareWrapper(_ref8) {\n  var mutex = _ref8.mutex;\n  return function (middleware) {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(req, res, next, end) {\n        var releaseLock;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return mutex.acquire();\n\n              case 2:\n                releaseLock = _context14.sent;\n                releaseLock();\n                middleware(req, res, next, end);\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\n\nfunction objValues(obj, fn) {\n  var values = [];\n\n  for (var key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-json-rpc-filters/index.js"],"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","acquire","releaseLock","Promise","all","objValues","map","filter","update","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","getLatestBlock","currentBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"mappings":"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","sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"]},"metadata":{},"sourceType":"script"}