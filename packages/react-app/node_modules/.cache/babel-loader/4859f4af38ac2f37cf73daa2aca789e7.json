{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { utils } from 'ethers';\nimport { useEffect, useState } from 'react';\n/**\n * Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n *\n  ~ Features ~\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n * @param provider (TEthersProvider)\n * @param contractAddress (string)\n * @returns (boolean)\n */\n\nexport var useContractExistsAtAddress = function useContractExistsAtAddress(provider, contractAddress) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      contractIsDeployed = _useState2[0],\n      setContractIsDeployed = _useState2[1];\n\n  useEffect(function () {\n    /**\n     * We can look at the blockchain and see what's stored at `contractAddress`\n     * If we find code then we know that a contract exists there.\n     * If we find nothing (0x0) then there is no contract deployed to that address\n     */\n    var checkDeployment = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var bytecode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (utils.isAddress(contractAddress)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                if (!provider) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 5;\n                return provider.getCode(contractAddress);\n\n              case 5:\n                bytecode = _context.sent;\n                setContractIsDeployed(bytecode !== '0x');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function checkDeployment() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    void checkDeployment();\n  }, [provider, contractAddress]);\n  return contractIsDeployed;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useContractExistsAtAddress.js"],"names":["utils","useEffect","useState","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","isAddress","getCode","bytecode"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,QAAD,EAAWC,eAAX,EAA+B;AACrE,kBAAoDH,QAAQ,CAAC,KAAD,CAA5D;AAAA;AAAA,MAAOI,kBAAP;AAAA,MAA2BC,qBAA3B;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZ;AACR;AACA;AACA;AACA;AACQ,QAAMO,eAAe;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACfR,KAAK,CAACS,SAAN,CAAgBJ,eAAhB,CADe;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,qBAIhBD,QAJgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKOA,QAAQ,CAACM,OAAT,CAAiBL,eAAjB,CALP;;AAAA;AAKVM,gBAAAA,QALU;AAMhBJ,gBAAAA,qBAAqB,CAACI,QAAQ,KAAK,IAAd,CAArB;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfH,eAAe;AAAA;AAAA;AAAA,OAArB;;AASA,SAAKA,eAAe,EAApB;AACH,GAhBQ,EAgBN,CAACJ,QAAD,EAAWC,eAAX,CAhBM,CAAT;AAiBA,SAAOC,kBAAP;AACH,CApBM","sourcesContent":["import { utils } from 'ethers';\nimport { useEffect, useState } from 'react';\n/**\n * Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n *\n  ~ Features ~\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n * @param provider (TEthersProvider)\n * @param contractAddress (string)\n * @returns (boolean)\n */\nexport const useContractExistsAtAddress = (provider, contractAddress) => {\n    const [contractIsDeployed, setContractIsDeployed] = useState(false);\n    useEffect(() => {\n        /**\n         * We can look at the blockchain and see what's stored at `contractAddress`\n         * If we find code then we know that a contract exists there.\n         * If we find nothing (0x0) then there is no contract deployed to that address\n         */\n        const checkDeployment = async () => {\n            if (!utils.isAddress(contractAddress)) {\n                return;\n            }\n            if (provider) {\n                const bytecode = await provider.getCode(contractAddress);\n                setContractIsDeployed(bytecode !== '0x');\n            }\n        };\n        void checkDeployment();\n    }, [provider, contractAddress]);\n    return contractIsDeployed;\n};\n"]},"metadata":{},"sourceType":"module"}