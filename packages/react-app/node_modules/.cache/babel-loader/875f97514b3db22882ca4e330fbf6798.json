{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar LOAD_HASHER = function LOAD_HASHER(codeOrName) {\n  return Promise.reject(new Error(\"No hasher found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\n\nvar Multihashes = /*#__PURE__*/function () {\n  function Multihashes(options) {\n    _classCallCheck(this, Multihashes);\n\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n\n    var _iterator = _createForOfIteratorHelper(options.hashers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var hasher = _step.value;\n        this.addHasher(hasher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Multihashes, [{\n    key: \"addHasher\",\n    value: function addHasher(hasher) {\n      if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(hasher.name, \"\\\"\"));\n      }\n\n      this._hashersByName[hasher.name] = hasher;\n      this._hashersByCode[hasher.code] = hasher;\n    }\n  }, {\n    key: \"removeHasher\",\n    value: function removeHasher(hasher) {\n      delete this._hashersByName[hasher.name];\n      delete this._hashersByCode[hasher.code];\n    }\n  }, {\n    key: \"getHasher\",\n    value: function () {\n      var _getHasher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(code) {\n        var table, hasher;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n\n                if (!table[code]) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", table[code]);\n\n              case 3:\n                _context.next = 5;\n                return this._loadHasher(code);\n\n              case 5:\n                hasher = _context.sent;\n\n                if (table[code] == null) {\n                  this.addHasher(hasher);\n                }\n\n                return _context.abrupt(\"return\", hasher);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getHasher(_x) {\n        return _getHasher.apply(this, arguments);\n      }\n\n      return getHasher;\n    }()\n  }, {\n    key: \"listHashers\",\n    value: function listHashers() {\n      return Object.values(this._hashersByName);\n    }\n  }]);\n\n  return Multihashes;\n}();\n\nexports.Multihashes = Multihashes;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ipfs-core-utils/cjs/src/multihashes.js"],"names":["Object","defineProperty","exports","value","LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","options","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hashers","hasher","addHasher","name","code","table","values"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,UAAU;AAAA,SAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,iCAAmCH,UAAnC,QAAf,CAAJ;AAAA,CAA9B;;IACMI,W;AACJ,uBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmBH,OAAO,CAACI,UAAR,IAAsBV,WAAzC;;AAHmB,+CAIEM,OAAO,CAACK,OAJV;AAAA;;AAAA;AAInB,0DAAsC;AAAA,YAA3BC,MAA2B;AACpC,aAAKC,SAAL,CAAeD,MAAf;AACD;AANkB;AAAA;AAAA;AAAA;AAAA;AAOpB;;;;WACD,mBAAUA,MAAV,EAAkB;AAChB,UAAI,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,KAAoC,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAxC,EAA0E;AACxE,cAAM,IAAIX,KAAJ,+CAAiDQ,MAAM,CAACE,IAAxD,QAAN;AACD;;AACD,WAAKP,cAAL,CAAoBK,MAAM,CAACE,IAA3B,IAAmCF,MAAnC;AACA,WAAKJ,cAAL,CAAoBI,MAAM,CAACG,IAA3B,IAAmCH,MAAnC;AACD;;;WACD,sBAAaA,MAAb,EAAqB;AACnB,aAAO,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,CAAP;AACA,aAAO,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAP;AACD;;;;gFACD,iBAAgBA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACgB,OAAOD,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,cAAhC,GAAiD,KAAKC,cADtE;;AAAA,qBAEMQ,KAAK,CAACD,IAAD,CAFX;AAAA;AAAA;AAAA;;AAAA,iDAGWC,KAAK,CAACD,IAAD,CAHhB;;AAAA;AAAA;AAAA,uBAKuB,KAAKN,WAAL,CAAiBM,IAAjB,CALvB;;AAAA;AAKQH,gBAAAA,MALR;;AAME,oBAAII,KAAK,CAACD,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,uBAAKF,SAAL,CAAeD,MAAf;AACD;;AARH,iDASSA,MATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAWA,uBAAc;AACZ,aAAOhB,MAAM,CAACqB,MAAP,CAAc,KAAKV,cAAnB,CAAP;AACD;;;;;;AAGHT,OAAO,CAACO,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${ codeOrName }\"`));\nclass Multihashes {\n  constructor(options) {\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${ hasher.name }\"`);\n    }\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const hasher = await this._loadHasher(code);\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n    return hasher;\n  }\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n}\n\nexports.Multihashes = Multihashes;\n"]},"metadata":{},"sourceType":"script"}