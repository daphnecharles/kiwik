{"ast":null,"code":"var _require = require('secp256k1'),\n    publicKeyConvert = _require.publicKeyConvert;\n\nvar keccak256 = require('keccak256');\n\nvar _require2 = require('ethereum-checksum-address'),\n    toChecksumAddress = _require2.toChecksumAddress;\n\nfunction publicKeyToAddress(publicKey) {\n  if (!Buffer.isBuffer(publicKey)) {\n    if (typeof publicKey !== 'string') {\n      throw new Error('Expected Buffer or string as argument');\n    }\n\n    publicKey = publicKey.slice(0, 2) === '0x' ? publicKey.slice(2) : publicKey;\n    publicKey = Buffer.from(publicKey, 'hex');\n  }\n\n  publicKey = publicKeyConvert(publicKey, false).slice(1);\n  return toChecksumAddress(keccak256(publicKey).slice(-20).toString('hex'));\n}\n\nmodule.exports = publicKeyToAddress;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ethereum-public-key-to-address/index.js"],"names":["require","publicKeyConvert","keccak256","toChecksumAddress","publicKeyToAddress","publicKey","Buffer","isBuffer","Error","slice","from","toString","module","exports"],"mappings":"AAAA,eAA6BA,OAAO,CAAC,WAAD,CAApC;AAAA,IAAQC,gBAAR,YAAQA,gBAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,gBAA8BA,OAAO,CAAC,2BAAD,CAArC;AAAA,IAAQG,iBAAR,aAAQA,iBAAR;;AAEA,SAASC,kBAAT,CAA6BC,SAA7B,EAAwC;AACtC,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,SAAhB,CAAL,EAAiC;AAC/B,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,YAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAEDH,IAAAA,SAAS,GAAGA,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAA1B,GAAiCJ,SAAS,CAACI,KAAV,CAAgB,CAAhB,CAAjC,GAAsDJ,SAAlE;AACAA,IAAAA,SAAS,GAAGC,MAAM,CAACI,IAAP,CAAYL,SAAZ,EAAuB,KAAvB,CAAZ;AACD;;AAEDA,EAAAA,SAAS,GAAGJ,gBAAgB,CAACI,SAAD,EAAY,KAAZ,CAAhB,CAAmCI,KAAnC,CAAyC,CAAzC,CAAZ;AACA,SAAON,iBAAiB,CAACD,SAAS,CAACG,SAAD,CAAT,CAAqBI,KAArB,CAA2B,CAAC,EAA5B,EAAgCE,QAAhC,CAAyC,KAAzC,CAAD,CAAxB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,kBAAjB","sourcesContent":["const { publicKeyConvert } = require('secp256k1')\nconst keccak256 = require('keccak256')\nconst { toChecksumAddress } = require('ethereum-checksum-address')\n\nfunction publicKeyToAddress (publicKey) {\n  if (!Buffer.isBuffer(publicKey)) {\n    if (typeof publicKey !== 'string') {\n      throw new Error('Expected Buffer or string as argument')\n    }\n\n    publicKey = publicKey.slice(0, 2) === '0x' ? publicKey.slice(2) : publicKey\n    publicKey = Buffer.from(publicKey, 'hex')\n  }\n\n  publicKey = publicKeyConvert(publicKey, false).slice(1)\n  return toChecksumAddress(keccak256(publicKey).slice(-20).toString('hex'))\n}\n\nmodule.exports = publicKeyToAddress\n"]},"metadata":{},"sourceType":"script"}