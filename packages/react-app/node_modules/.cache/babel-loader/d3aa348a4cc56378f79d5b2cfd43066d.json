{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { useBlockNumber } from \"./\";\n/**\n * Get the current timestamp from the latest block\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: timestamp\n */\n\nexport var useTimestamp = function useTimestamp(provider, pollTime) {\n  var blockNumber = useBlockNumber(provider, pollTime);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      timestamp = _useState2[0],\n      setTimestamp = _useState2[1];\n\n  useEffect(function () {\n    var getTimestamp = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var nextBlock, nextTimestamp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return provider.getBlock(blockNumber);\n\n              case 2:\n                nextBlock = _context.sent;\n\n                if ((nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.timestamp) != null) {\n                  nextTimestamp = nextBlock.timestamp;\n                  setTimestamp(nextTimestamp);\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getTimestamp() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    void getTimestamp();\n  }, [blockNumber, provider]);\n  return timestamp;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useTimestamp.js"],"names":["useState","useEffect","useBlockNumber","useTimestamp","provider","pollTime","blockNumber","timestamp","setTimestamp","getTimestamp","getBlock","nextBlock","nextTimestamp"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,IAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAwB;AAChD,MAAMC,WAAW,GAAGJ,cAAc,CAACE,QAAD,EAAWC,QAAX,CAAlC;;AACA,kBAAkCL,QAAQ,CAAC,CAAD,CAA1C;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AACAP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMQ,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOL,QAAQ,CAACM,QAAT,CAAkBJ,WAAlB,CADP;;AAAA;AACXK,gBAAAA,SADW;;AAEjB,oBAAI,CAACA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACJ,SAAjE,KAA+E,IAAnF,EAAyF;AAC/EK,kBAAAA,aAD+E,GAC/DD,SAAS,CAACJ,SADqD;AAErFC,kBAAAA,YAAY,CAACI,aAAD,CAAZ;AACH;;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZH,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAOA,SAAKA,YAAY,EAAjB;AACH,GATQ,EASN,CAACH,WAAD,EAAcF,QAAd,CATM,CAAT;AAUA,SAAOG,SAAP;AACH,CAdM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useBlockNumber } from \"./\";\n/**\n * Get the current timestamp from the latest block\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: timestamp\n */\nexport const useTimestamp = (provider, pollTime) => {\n    const blockNumber = useBlockNumber(provider, pollTime);\n    const [timestamp, setTimestamp] = useState(0);\n    useEffect(() => {\n        const getTimestamp = async () => {\n            const nextBlock = await provider.getBlock(blockNumber);\n            if ((nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.timestamp) != null) {\n                const nextTimestamp = nextBlock.timestamp;\n                setTimestamp(nextTimestamp);\n            }\n        };\n        void getTimestamp();\n    }, [blockNumber, provider]);\n    return timestamp;\n};\n"]},"metadata":{},"sourceType":"module"}