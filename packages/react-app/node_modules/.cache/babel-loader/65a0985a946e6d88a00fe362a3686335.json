{"ast":null,"code":"var xhr = process.browser ? require('xhr') : require('request');\n\nvar inherits = require('util').inherits;\n\nvar createPayload = require('../util/create-payload.js');\n\nvar Subprovider = require('./subprovider.js');\n\nvar _require = require('eth-json-rpc-errors'),\n    rpcErrors = _require.errors;\n\nmodule.exports = RpcSource;\ninherits(RpcSource, Subprovider);\n\nfunction RpcSource(opts) {\n  var self = this;\n  self.rpcUrl = opts.rpcUrl;\n}\n\nRpcSource.prototype.handleRequest = function (payload, next, end) {\n  var self = this;\n  var targetUrl = self.rpcUrl; // overwrite id to conflict with other concurrent users\n\n  var newPayload = createPayload(payload);\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000\n  }, function (err, res, body) {\n    if (err) return end(rpcErrors.internal(err)); // check for error code\n\n    switch (res.statusCode) {\n      case 405:\n        return end(rpcErrors.methodNotFound());\n\n      case 504:\n        // Gateway timeout\n        return function () {\n          var msg = \"Gateway timeout. The request took too long to process. \";\n          msg += \"This can happen when querying logs over too wide a block range.\";\n          return end(rpcErrors.internal(msg));\n        }();\n\n      case 429:\n        // Too many requests (rate limiting)\n        return function () {\n          var err = new Error(\"Too Many Requests\");\n          return end(rpcErrors.internal(err));\n        }();\n\n      default:\n        if (res.statusCode != 200) {\n          return end(rpcErrors.internal(res.body));\n        }\n\n    } // parse response\n\n\n    var data;\n\n    try {\n      data = JSON.parse(body);\n    } catch (err) {\n      console.error(err.stack);\n      return end(rpcErrors.internal(err));\n    }\n\n    if (data.error) return end(data.error);\n    end(null, data.result);\n  });\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/authereum/node_modules/web3-provider-engine/subproviders/rpc.js"],"names":["xhr","process","browser","require","inherits","createPayload","Subprovider","rpcErrors","errors","module","exports","RpcSource","opts","self","rpcUrl","prototype","handleRequest","payload","next","end","targetUrl","newPayload","uri","method","headers","body","JSON","stringify","rejectUnauthorized","timeout","err","res","internal","statusCode","methodNotFound","msg","Error","data","parse","console","error","stack","result"],"mappings":"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","sourcesContent":["const xhr = process.browser ? require('xhr') : require('request')\nconst inherits = require('util').inherits\nconst createPayload = require('../util/create-payload.js')\nconst Subprovider = require('./subprovider.js')\nconst { errors: rpcErrors } = require('eth-json-rpc-errors')\n\n\nmodule.exports = RpcSource\n\ninherits(RpcSource, Subprovider)\n\nfunction RpcSource(opts) {\n  const self = this\n  self.rpcUrl = opts.rpcUrl\n}\n\nRpcSource.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  const targetUrl = self.rpcUrl\n\n  // overwrite id to conflict with other concurrent users\n  let newPayload = createPayload(payload)\n\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000,\n  }, function(err, res, body) {\n    if (err) return end(rpcErrors.internal(err))\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(rpcErrors.methodNotFound())\n      case 504: // Gateway timeout\n        return (function(){\n          let msg = `Gateway timeout. The request took too long to process. `\n          msg += `This can happen when querying logs over too wide a block range.`\n          return end(rpcErrors.internal(msg))\n        })()\n      case 429: // Too many requests (rate limiting)\n        return (function(){\n          const err = new Error(`Too Many Requests`)\n          return end(rpcErrors.internal(err))\n        })()\n      default:\n        if (res.statusCode != 200) {\n          return end(rpcErrors.internal(res.body))\n        }\n    }\n\n    // parse response\n    let data\n    try {\n      data = JSON.parse(body)\n    } catch (err) {\n      console.error(err.stack)\n      return end(rpcErrors.internal(err))\n    }\n    if (data.error) return end(data.error)\n\n    end(null, data.result)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}