{"ast":null,"code":"// Paragraph\n'use strict';\n\nmodule.exports = function paragraph(state, startLine\n/*, endLine*/\n) {\n  var content,\n      terminate,\n      i,\n      l,\n      token,\n      oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // jump line-by-line until empty one or EOF\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    } // quirk for blockquotes, this line should already be checked by that rule\n\n\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    } // Some tags can terminate paragraph without empty line.\n\n\n    terminate = false;\n\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      break;\n    }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine;\n  token = state.push('paragraph_open', 'p', 1);\n  token.map = [startLine, state.line];\n  token = state.push('inline', '', 0);\n  token.content = content;\n  token.map = [startLine, state.line];\n  token.children = [];\n  token = state.push('paragraph_close', 'p', -1);\n  state.parentType = oldParentType;\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_block/paragraph.js"],"names":["module","exports","paragraph","state","startLine","content","terminate","i","l","token","oldParentType","nextLine","terminatorRules","md","block","ruler","getRules","endLine","lineMax","parentType","isEmpty","sCount","blkIndent","length","getLines","trim","line","push","map","children"],"mappings":"AAAA;AAEA;;AAGAA,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC;AAAS;AAAnC,EAAkD;AACjE,MAAIC,OAAJ;AAAA,MAAaC,SAAb;AAAA,MAAwBC,CAAxB;AAAA,MAA2BC,CAA3B;AAAA,MAA8BC,KAA9B;AAAA,MAAqCC,aAArC;AAAA,MACIC,QAAQ,GAAGP,SAAS,GAAG,CAD3B;AAAA,MAEIQ,eAAe,GAAGT,KAAK,CAACU,EAAN,CAASC,KAAT,CAAeC,KAAf,CAAqBC,QAArB,CAA8B,WAA9B,CAFtB;AAAA,MAGIC,OAAO,GAAGd,KAAK,CAACe,OAHpB;AAKAR,EAAAA,aAAa,GAAGP,KAAK,CAACgB,UAAtB;AACAhB,EAAAA,KAAK,CAACgB,UAAN,GAAmB,WAAnB,CAPiE,CASjE;;AACA,SAAOR,QAAQ,GAAGM,OAAX,IAAsB,CAACd,KAAK,CAACiB,OAAN,CAAcT,QAAd,CAA9B,EAAuDA,QAAQ,EAA/D,EAAmE;AACjE;AACA;AACA,QAAIR,KAAK,CAACkB,MAAN,CAAaV,QAAb,IAAyBR,KAAK,CAACmB,SAA/B,GAA2C,CAA/C,EAAkD;AAAE;AAAW,KAHE,CAKjE;;;AACA,QAAInB,KAAK,CAACkB,MAAN,CAAaV,QAAb,IAAyB,CAA7B,EAAgC;AAAE;AAAW,KANoB,CAQjE;;;AACAL,IAAAA,SAAS,GAAG,KAAZ;;AACA,SAAKC,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGI,eAAe,CAACW,MAAhC,EAAwChB,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,UAAIK,eAAe,CAACL,CAAD,CAAf,CAAmBJ,KAAnB,EAA0BQ,QAA1B,EAAoCM,OAApC,EAA6C,IAA7C,CAAJ,EAAwD;AACtDX,QAAAA,SAAS,GAAG,IAAZ;AACA;AACD;AACF;;AACD,QAAIA,SAAJ,EAAe;AAAE;AAAQ;AAC1B;;AAEDD,EAAAA,OAAO,GAAGF,KAAK,CAACqB,QAAN,CAAepB,SAAf,EAA0BO,QAA1B,EAAoCR,KAAK,CAACmB,SAA1C,EAAqD,KAArD,EAA4DG,IAA5D,EAAV;AAEAtB,EAAAA,KAAK,CAACuB,IAAN,GAAaf,QAAb;AAEAF,EAAAA,KAAK,GAAYN,KAAK,CAACwB,IAAN,CAAW,gBAAX,EAA6B,GAA7B,EAAkC,CAAlC,CAAjB;AACAlB,EAAAA,KAAK,CAACmB,GAAN,GAAiB,CAAExB,SAAF,EAAaD,KAAK,CAACuB,IAAnB,CAAjB;AAEAjB,EAAAA,KAAK,GAAYN,KAAK,CAACwB,IAAN,CAAW,QAAX,EAAqB,EAArB,EAAyB,CAAzB,CAAjB;AACAlB,EAAAA,KAAK,CAACJ,OAAN,GAAiBA,OAAjB;AACAI,EAAAA,KAAK,CAACmB,GAAN,GAAiB,CAAExB,SAAF,EAAaD,KAAK,CAACuB,IAAnB,CAAjB;AACAjB,EAAAA,KAAK,CAACoB,QAAN,GAAiB,EAAjB;AAEApB,EAAAA,KAAK,GAAYN,KAAK,CAACwB,IAAN,CAAW,iBAAX,EAA8B,GAA9B,EAAmC,CAAC,CAApC,CAAjB;AAEAxB,EAAAA,KAAK,CAACgB,UAAN,GAAmBT,aAAnB;AAEA,SAAO,IAAP;AACD,CA9CD","sourcesContent":["// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}