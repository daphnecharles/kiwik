{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\n\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nvar eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nvar JsonRpcEngine = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(JsonRpcEngine, _safe_event_emitter_);\n\n  var _super = _createSuper(JsonRpcEngine);\n\n  function JsonRpcEngine() {\n    var _this;\n\n    _classCallCheck(this, JsonRpcEngine);\n\n    _this = _super.call(this);\n    _this._middleware = [];\n    return _this;\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  _createClass(JsonRpcEngine, [{\n    key: \"push\",\n    value: function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== 'function') {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n\n        return this._handleBatch(req);\n      }\n\n      if (cb) {\n        return this._handle(req, cb);\n      }\n\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this2 = this;\n\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);\n\n                case 3:\n                  _yield$JsonRpcEngine$ = _context2.sent;\n                  _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);\n                  middlewareError = _yield$JsonRpcEngine$2[0];\n                  isComplete = _yield$JsonRpcEngine$2[1];\n                  returnHandlers = _yield$JsonRpcEngine$2[2];\n\n                  if (!isComplete) {\n                    _context2.next = 12;\n                    break;\n                  }\n\n                  _context2.next = 11;\n                  return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n                case 11:\n                  return _context2.abrupt(\"return\", end(middlewareError));\n\n                case 12:\n                  return _context2.abrupt(\"return\", next( /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(handlerCallback) {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n                            case 3:\n                              _context.next = 8;\n                              break;\n\n                            case 5:\n                              _context.prev = 5;\n                              _context.t0 = _context[\"catch\"](0);\n                              return _context.abrupt(\"return\", handlerCallback(_context.t0));\n\n                            case 8:\n                              return _context.abrupt(\"return\", handlerCallback());\n\n                            case 9:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[0, 5]]);\n                    }));\n\n                    return function (_x5) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }()));\n\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  return _context2.abrupt(\"return\", end(_context2.t0));\n\n                case 18:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 15]]);\n        }));\n\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Promise.all( // 1. Begin executing each request in the order received\n                reqs.map(this._promiseHandle.bind(this)));\n\n              case 3:\n                responses = _context3.sent;\n\n                if (!cb) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", cb(null, responses));\n\n              case 6:\n                return _context3.abrupt(\"return\", responses);\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!cb) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", cb(_context3.t0));\n\n              case 13:\n                throw _context3.t0;\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n\n      function _handleBatch(_x6, _x7) {\n        return _handleBatch2.apply(this, arguments);\n      }\n\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        _this3._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Requests must be plain objects. Received: \".concat(typeof callerReq), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error2, {\n                  id: undefined,\n                  jsonrpc: '2.0',\n                  error: _error2\n                }));\n\n              case 3:\n                if (!(typeof callerReq.method !== 'string')) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Must specify a string method. Received: \".concat(typeof callerReq.method), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error3, {\n                  id: callerReq.id,\n                  jsonrpc: '2.0',\n                  error: _error3\n                }));\n\n              case 6:\n                req = Object.assign({}, callerReq);\n                res = {\n                  id: req.id,\n                  jsonrpc: req.jsonrpc\n                };\n                error = null;\n                _context4.prev = 9;\n                _context4.next = 12;\n                return this._processRequest(req, res);\n\n              case 12:\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t0 = _context4[\"catch\"](9);\n                // A request handler error, a re-thrown middleware error, or something\n                // unexpected.\n                error = _context4.t0;\n\n              case 17:\n                if (error) {\n                  // Ensure no result is present on an errored response\n                  delete res.result;\n\n                  if (!res.error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                  }\n                }\n\n                return _context4.abrupt(\"return\", cb(error, res));\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[9, 14]]);\n      }));\n\n      function _handle(_x8, _x9) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n\n              case 2:\n                _yield$JsonRpcEngine$3 = _context5.sent;\n                _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);\n                error = _yield$JsonRpcEngine$4[0];\n                isComplete = _yield$JsonRpcEngine$4[1];\n                returnHandlers = _yield$JsonRpcEngine$4[2];\n\n                // Throw if \"end\" was not called, or if the response has neither a result\n                // nor an error.\n                JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n                // middleware processing.\n\n\n                _context5.next = 10;\n                return JsonRpcEngine._runReturnHandlers(returnHandlers);\n\n              case 10:\n                if (!error) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                throw error;\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _processRequest(_x10, _x11) {\n        return _processRequest2.apply(this, arguments);\n      }\n\n      return _processRequest;\n    }()\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                returnHandlers = [];\n                error = null;\n                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n                _iterator = _createForOfIteratorHelper(middlewareStack);\n                _context6.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 18;\n                  break;\n                }\n\n                middleware = _step.value;\n                _context6.next = 10;\n                return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n              case 10:\n                _yield$JsonRpcEngine$5 = _context6.sent;\n                _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);\n                error = _yield$JsonRpcEngine$6[0];\n                isComplete = _yield$JsonRpcEngine$6[1];\n\n                if (!isComplete) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                return _context6.abrupt(\"break\", 18);\n\n              case 16:\n                _context6.next = 6;\n                break;\n\n              case 18:\n                _context6.next = 23;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](4);\n\n                _iterator.e(_context6.t0);\n\n              case 23:\n                _context6.prev = 23;\n\n                _iterator.f();\n\n                return _context6.finish(23);\n\n              case 26:\n                return _context6.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n\n              case 27:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[4, 20, 23, 26]]);\n      }));\n\n      function _runAllMiddleware(_x12, _x13, _x14) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n\n          if (error) {\n            res.error = eth_rpc_errors_1.serializeError(error);\n          } // True indicates that the request should end\n\n\n          resolve([error, true]);\n        };\n\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== 'function') {\n                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: \\\"next\\\" return handlers must be functions. \" + \"Received \\\"\".concat(typeof returnHandler, \"\\\" for request:\\n\").concat(jsonify(req)), {\n                  request: req\n                }));\n              }\n\n              returnHandlers.push(returnHandler);\n            } // False indicates that the request should not end\n\n\n            resolve([null, false]);\n          }\n        };\n\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(handlers) {\n        var _iterator2, _step2, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(handlers);\n                _context8.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var handler;\n                  return _regeneratorRuntime.wrap(function _loop$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          handler = _step2.value;\n                          _context7.next = 3;\n                          return new Promise(function (resolve, reject) {\n                            handler(function (err) {\n                              return err ? reject(err) : resolve();\n                            });\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.delegateYield(_loop(), \"t0\", 6);\n\n              case 6:\n                _context8.next = 4;\n                break;\n\n              case 8:\n                _context8.next = 13;\n                break;\n\n              case 10:\n                _context8.prev = 10;\n                _context8.t1 = _context8[\"catch\"](1);\n\n                _iterator2.e(_context8.t1);\n\n              case 13:\n                _context8.prev = 13;\n\n                _iterator2.f();\n\n                return _context8.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, null, [[1, 10, 13, 16]]);\n      }));\n\n      function _runReturnHandlers(_x15) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!('result' in res) && !('error' in res)) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Response has no error or result for request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n\n      if (!isComplete) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Nothing ended request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n    }\n  }]);\n\n  return JsonRpcEngine;\n}(safe_event_emitter_1.default);\n\nexports.JsonRpcEngine = JsonRpcEngine;\n\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"sources":["../src/JsonRpcEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}