{"ast":null,"code":"import _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { WordArray, Hasher } from './core.js';\nimport { X64Word } from './x64-core.js'; // Constants tables\n\nvar RHO_OFFSETS = [];\nvar PI_INDEXES = [];\nvar ROUND_CONSTANTS = []; // Compute Constants\n// Compute rho offset constants\n\nvar _x = 1;\nvar _y = 0;\n\nfor (var t = 0; t < 24; t += 1) {\n  RHO_OFFSETS[_x + 5 * _y] = (t + 1) * (t + 2) / 2 % 64;\n  var newX = _y % 5;\n  var newY = (2 * _x + 3 * _y) % 5;\n  _x = newX;\n  _y = newY;\n} // Compute pi index constants\n\n\nfor (var x = 0; x < 5; x += 1) {\n  for (var y = 0; y < 5; y += 1) {\n    PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n  }\n} // Compute round constants\n\n\nvar LFSR = 0x01;\n\nfor (var i = 0; i < 24; i += 1) {\n  var roundConstantMsw = 0;\n  var roundConstantLsw = 0;\n\n  for (var j = 0; j < 7; j += 1) {\n    if (LFSR & 0x01) {\n      var bitPosition = (1 << j) - 1;\n\n      if (bitPosition < 32) {\n        roundConstantLsw ^= 1 << bitPosition;\n      } else\n        /* if (bitPosition >= 32) */\n        {\n          roundConstantMsw ^= 1 << bitPosition - 32;\n        }\n    } // Compute next LFSR\n\n\n    if (LFSR & 0x80) {\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n      LFSR = LFSR << 1 ^ 0x71;\n    } else {\n      LFSR <<= 1;\n    }\n  }\n\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n} // Reusable objects for temporary values\n\n\nvar T = [];\n\nfor (var _i = 0; _i < 25; _i += 1) {\n  T[_i] = X64Word.create();\n}\n/**\n * SHA-3 hash algorithm.\n */\n\n\nexport var SHA3Algo = /*#__PURE__*/function (_Hasher) {\n  _inherits(SHA3Algo, _Hasher);\n\n  var _super = _createSuper(SHA3Algo);\n\n  function SHA3Algo(cfg) {\n    _classCallCheck(this, SHA3Algo);\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} outputLength\n     *   The desired number of bits in the output hash.\n     *   Only values permitted are: 224, 256, 384, 512.\n     *   Default: 512\n     */\n    return _super.call(this, Object.assign({\n      outputLength: 512\n    }, cfg));\n  }\n\n  _createClass(SHA3Algo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      this._state = [];\n      var state = this._state;\n\n      for (var _i2 = 0; _i2 < 25; _i2 += 1) {\n        state[_i2] = new X64Word();\n      }\n\n      this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n    }\n  }, {\n    key: \"_doProcessBlock\",\n    value: function _doProcessBlock(M, offset) {\n      // Shortcuts\n      var state = this._state;\n      var nBlockSizeLanes = this.blockSize / 2; // Absorb\n\n      for (var _i3 = 0; _i3 < nBlockSizeLanes; _i3 += 1) {\n        // Shortcuts\n        var M2i = M[offset + 2 * _i3];\n        var M2i1 = M[offset + 2 * _i3 + 1]; // Swap endian\n\n        M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n        M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00; // Absorb message into state\n\n        var lane = state[_i3];\n        lane.high ^= M2i1;\n        lane.low ^= M2i;\n      } // Rounds\n\n\n      for (var round = 0; round < 24; round += 1) {\n        // Theta\n        for (var _x2 = 0; _x2 < 5; _x2 += 1) {\n          // Mix column lanes\n          var tMsw = 0;\n          var tLsw = 0;\n\n          for (var _y2 = 0; _y2 < 5; _y2 += 1) {\n            var _lane2 = state[_x2 + 5 * _y2];\n            tMsw ^= _lane2.high;\n            tLsw ^= _lane2.low;\n          } // Temporary values\n\n\n          var Tx = T[_x2];\n          Tx.high = tMsw;\n          Tx.low = tLsw;\n        }\n\n        for (var _x3 = 0; _x3 < 5; _x3 += 1) {\n          // Shortcuts\n          var Tx4 = T[(_x3 + 4) % 5];\n          var Tx1 = T[(_x3 + 1) % 5];\n          var Tx1Msw = Tx1.high;\n          var Tx1Lsw = Tx1.low; // Mix surrounding columns\n\n          var _tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n\n          var _tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n\n          for (var _y3 = 0; _y3 < 5; _y3 += 1) {\n            var _lane3 = state[_x3 + 5 * _y3];\n            _lane3.high ^= _tMsw;\n            _lane3.low ^= _tLsw;\n          }\n        } // Rho Pi\n\n\n        for (var laneIndex = 1; laneIndex < 25; laneIndex += 1) {\n          var _tMsw2 = void 0;\n\n          var _tLsw2 = void 0; // Shortcuts\n\n\n          var _lane4 = state[laneIndex];\n          var laneMsw = _lane4.high;\n          var laneLsw = _lane4.low;\n          var rhoOffset = RHO_OFFSETS[laneIndex]; // Rotate lanes\n\n          if (rhoOffset < 32) {\n            _tMsw2 = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n            _tLsw2 = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n          } else\n            /* if (rhoOffset >= 32) */\n            {\n              _tMsw2 = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n              _tLsw2 = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n            } // Transpose lanes\n\n\n          var TPiLane = T[PI_INDEXES[laneIndex]];\n          TPiLane.high = _tMsw2;\n          TPiLane.low = _tLsw2;\n        } // Rho pi at x = y = 0\n\n\n        var T0 = T[0];\n        var state0 = state[0];\n        T0.high = state0.high;\n        T0.low = state0.low; // Chi\n\n        for (var _x4 = 0; _x4 < 5; _x4 += 1) {\n          for (var _y4 = 0; _y4 < 5; _y4 += 1) {\n            // Shortcuts\n            var _laneIndex = _x4 + 5 * _y4;\n\n            var _lane5 = state[_laneIndex];\n            var TLane = T[_laneIndex];\n            var Tx1Lane = T[(_x4 + 1) % 5 + 5 * _y4];\n            var Tx2Lane = T[(_x4 + 2) % 5 + 5 * _y4]; // Mix rows\n\n            _lane5.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n            _lane5.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n          }\n        } // Iota\n\n\n        var _lane = state[0];\n        var roundConstant = ROUND_CONSTANTS[round];\n        _lane.high ^= roundConstant.high;\n        _lane.low ^= roundConstant.low;\n      }\n    }\n  }, {\n    key: \"_doFinalize\",\n    value: function _doFinalize() {\n      // Shortcuts\n      var data = this._data;\n      var dataWords = data.words;\n      var nBitsLeft = data.sigBytes * 8;\n      var blockSizeBits = this.blockSize * 32; // Add padding\n\n      dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n      dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n      data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n      this._process(); // Shortcuts\n\n\n      var state = this._state;\n      var outputLengthBytes = this.cfg.outputLength / 8;\n      var outputLengthLanes = outputLengthBytes / 8; // Squeeze\n\n      var hashWords = [];\n\n      for (var _i4 = 0; _i4 < outputLengthLanes; _i4 += 1) {\n        // Shortcuts\n        var lane = state[_i4];\n        var laneMsw = lane.high;\n        var laneLsw = lane.low; // Swap endian\n\n        laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n        laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00; // Squeeze state to retrieve hash\n\n        hashWords.push(laneLsw);\n        hashWords.push(laneMsw);\n      } // Return final computed hash\n\n\n      return new WordArray(hashWords, outputLengthBytes);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(SHA3Algo.prototype), \"clone\", this).call(this);\n\n      clone._state = this._state.slice(0);\n      var state = clone._state;\n\n      for (var _i5 = 0; _i5 < 25; _i5 += 1) {\n        state[_i5] = state[_i5].clone();\n      }\n\n      return clone;\n    }\n  }]);\n\n  return SHA3Algo;\n}(Hasher);\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA3('message');\n *     var hash = CryptoJS.SHA3(wordArray);\n */\n\nexport var SHA3 = Hasher._createHelper(SHA3Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA3(message, key);\n */\n\nexport var HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/sha3.js"],"names":["WordArray","Hasher","X64Word","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","_x","_y","t","newX","newY","x","y","LFSR","i","roundConstantMsw","roundConstantLsw","j","bitPosition","create","T","SHA3Algo","cfg","Object","assign","outputLength","_state","state","blockSize","M","offset","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","data","_data","dataWords","words","nBitsLeft","sigBytes","blockSizeBits","Math","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","push","clone","call","slice","SHA3","_createHelper","HmacSHA3","_createHmacHelper"],"mappings":"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","sourcesContent":["import {\n  WordArray,\n  Hasher,\n} from './core.js';\nimport { X64Word } from './x64-core.js';\n\n// Constants tables\nconst RHO_OFFSETS = [];\nconst PI_INDEXES = [];\nconst ROUND_CONSTANTS = [];\n\n// Compute Constants\n// Compute rho offset constants\nlet _x = 1;\nlet _y = 0;\nfor (let t = 0; t < 24; t += 1) {\n  RHO_OFFSETS[_x + 5 * _y] = ((t + 1) * (t + 2) / 2) % 64;\n\n  const newX = _y % 5;\n  const newY = (2 * _x + 3 * _y) % 5;\n  _x = newX;\n  _y = newY;\n}\n\n// Compute pi index constants\nfor (let x = 0; x < 5; x += 1) {\n  for (let y = 0; y < 5; y += 1) {\n    PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n  }\n}\n\n// Compute round constants\nlet LFSR = 0x01;\nfor (let i = 0; i < 24; i += 1) {\n  let roundConstantMsw = 0;\n  let roundConstantLsw = 0;\n\n  for (let j = 0; j < 7; j += 1) {\n    if (LFSR & 0x01) {\n      const bitPosition = (1 << j) - 1;\n      if (bitPosition < 32) {\n        roundConstantLsw ^= 1 << bitPosition;\n      } else /* if (bitPosition >= 32) */ {\n        roundConstantMsw ^= 1 << (bitPosition - 32);\n      }\n    }\n\n    // Compute next LFSR\n    if (LFSR & 0x80) {\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n      LFSR = (LFSR << 1) ^ 0x71;\n    } else {\n      LFSR <<= 1;\n    }\n  }\n\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n}\n\n// Reusable objects for temporary values\nconst T = [];\nfor (let i = 0; i < 25; i += 1) {\n  T[i] = X64Word.create();\n}\n\n/**\n * SHA-3 hash algorithm.\n */\nexport class SHA3Algo extends Hasher {\n  constructor(cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {number} outputLength\n     *   The desired number of bits in the output hash.\n     *   Only values permitted are: 224, 256, 384, 512.\n     *   Default: 512\n     */\n    super(Object.assign(\n      { outputLength: 512 },\n      cfg,\n    ));\n  }\n\n  _doReset() {\n    this._state = [];\n    const state = this._state;\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = new X64Word();\n    }\n\n    this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this.blockSize / 2;\n\n    // Absorb\n    for (let i = 0; i < nBlockSizeLanes; i += 1) {\n      // Shortcuts\n      let M2i = M[offset + 2 * i];\n      let M2i1 = M[offset + 2 * i + 1];\n\n      // Swap endian\n      M2i = (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff)\n        | (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00);\n      M2i1 = (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff)\n        | (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00);\n\n      // Absorb message into state\n      const lane = state[i];\n      lane.high ^= M2i1;\n      lane.low ^= M2i;\n    }\n\n    // Rounds\n    for (let round = 0; round < 24; round += 1) {\n      // Theta\n      for (let x = 0; x < 5; x += 1) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          tMsw ^= lane.high;\n          tLsw ^= lane.low;\n        }\n\n        // Temporary values\n        const Tx = T[x];\n        Tx.high = tMsw;\n        Tx.low = tLsw;\n      }\n      for (let x = 0; x < 5; x += 1) {\n        // Shortcuts\n        const Tx4 = T[(x + 4) % 5];\n        const Tx1 = T[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low;\n\n        // Mix surrounding columns\n        const tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n        const tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          lane.high ^= tMsw;\n          lane.low ^= tLsw;\n        }\n      }\n\n      // Rho Pi\n      for (let laneIndex = 1; laneIndex < 25; laneIndex += 1) {\n        let tMsw;\n        let tLsw;\n\n        // Shortcuts\n        const lane = state[laneIndex];\n        const laneMsw = lane.high;\n        const laneLsw = lane.low;\n        const rhoOffset = RHO_OFFSETS[laneIndex];\n\n        // Rotate lanes\n        if (rhoOffset < 32) {\n          tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n          tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n        } else /* if (rhoOffset >= 32) */ {\n          tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n          tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n        }\n\n        // Transpose lanes\n        const TPiLane = T[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low = tLsw;\n      }\n\n      // Rho pi at x = y = 0\n      const T0 = T[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low = state0.low;\n\n      // Chi\n      for (let x = 0; x < 5; x += 1) {\n        for (let y = 0; y < 5; y += 1) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const lane = state[laneIndex];\n          const TLane = T[laneIndex];\n          const Tx1Lane = T[((x + 1) % 5) + 5 * y];\n          const Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n          // Mix rows\n          lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n          lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);\n        }\n      }\n\n      // Iota\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low ^= roundConstant.low;\n    }\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.sigBytes * 8;\n    const blockSizeBits = this.blockSize * 32;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - (nBitsLeft % 32));\n    dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Shortcuts\n    const state = this._state;\n    const outputLengthBytes = this.cfg.outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8;\n\n    // Squeeze\n    const hashWords = [];\n    for (let i = 0; i < outputLengthLanes; i += 1) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low;\n\n      // Swap endian\n      laneMsw = (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff)\n        | (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00);\n      laneLsw = (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff)\n        | (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00);\n\n      // Squeeze state to retrieve hash\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    }\n\n    // Return final computed hash\n    return new WordArray(hashWords, outputLengthBytes);\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n\n    clone._state = this._state.slice(0);\n    const state = clone._state;\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = state[i].clone();\n    }\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA3('message');\n *     var hash = CryptoJS.SHA3(wordArray);\n */\nexport const SHA3 = Hasher._createHelper(SHA3Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA3(message, key);\n */\nexport const HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);\n"]},"metadata":{},"sourceType":"module"}