{"ast":null,"code":"import _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/kiwik/packages/react-app/src/components/Balance.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _require = require(\"ethers\"),\n    utils = _require.utils;\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\n\nexport default function Balance(props) {\n  _s();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      dollarMode = _useState2[0],\n      setDollarMode = _useState2[1];\n\n  var balance = useBalance(props.provider, props.address);\n  var floatBalance = parseFloat(\"0.00\");\n  var usingBalance = balance;\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    var etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  var displayBalance = floatBalance.toFixed(4);\n  var price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: props.size ? props.size : 24,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: function onClick() {\n      setDollarMode(!dollarMode);\n    },\n    children: displayBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Balance, \"n3fF3u+06hJT0xVWgXpH6RTuYUc=\", false, function () {\n  return [useBalance];\n});\n\n_c = Balance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Balance\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/components/Balance.jsx"],"names":["React","useState","useBalance","require","utils","Balance","props","dollarMode","setDollarMode","balance","provider","address","floatBalance","parseFloat","usingBalance","value","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","verticalAlign","fontSize","size","padding","cursor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,WAA3B;;;AAEA,eAAkBC,OAAO,CAAC,QAAD,CAAzB;AAAA,IAAQC,KAAR,YAAQA,KAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,kBAAoCL,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,OAAO,GAAGP,UAAU,CAACI,KAAK,CAACI,QAAP,EAAiBJ,KAAK,CAACK,OAAvB,CAA1B;AACA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AACA,MAAIC,YAAY,GAAGL,OAAnB;AAEA,MAAI,OAAOH,KAAK,CAACG,OAAb,KAAyB,WAA7B,EAA0CK,YAAY,GAAGR,KAAK,CAACG,OAArB;AAC1C,MAAI,OAAOH,KAAK,CAACS,KAAb,KAAuB,WAA3B,EAAwCD,YAAY,GAAGR,KAAK,CAACS,KAArB;;AAExC,MAAID,YAAJ,EAAkB;AAChB,QAAME,YAAY,GAAGZ,KAAK,CAACa,WAAN,CAAkBH,YAAlB,CAArB;AACAD,IAAAA,UAAU,CAACG,YAAD,CAAV,CAAyBE,OAAzB,CAAiC,CAAjC;AACAN,IAAAA,YAAY,GAAGC,UAAU,CAACG,YAAD,CAAzB;AACD;;AAED,MAAIG,cAAc,GAAGP,YAAY,CAACM,OAAb,CAAqB,CAArB,CAArB;AAEA,MAAME,KAAK,GAAGd,KAAK,CAACc,KAAN,IAAed,KAAK,CAACe,gBAArB,IAAyC,CAAvD;;AAEA,MAAId,UAAJ,EAAgB;AACdY,IAAAA,cAAc,GAAG,MAAM,CAACP,YAAY,GAAGQ,KAAhB,EAAuBF,OAAvB,CAA+B,CAA/B,CAAvB;AACD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,aAAa,EAAE,QADV;AAELC,MAAAA,QAAQ,EAAEjB,KAAK,CAACkB,IAAN,GAAalB,KAAK,CAACkB,IAAnB,GAA0B,EAF/B;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAOE,IAAA,OAAO,EAAE,mBAAM;AACblB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KATH;AAAA,cAWGY;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAvCuBd,O;UAGNH,U;;;KAHMG,O","sourcesContent":["import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}