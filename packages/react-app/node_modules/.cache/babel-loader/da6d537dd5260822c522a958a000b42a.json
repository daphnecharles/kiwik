{"ast":null,"code":"'use strict'; ////////////////////////////////////////////////////////////////////////////////\n// Helpers\n// Merge objects\n//\n\nfunction assign(obj\n/*from1, from2, from3, ...*/\n) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\n\nfunction isObject(obj) {\n  return _class(obj) === '[object Object]';\n}\n\nfunction isRegExp(obj) {\n  return _class(obj) === '[object RegExp]';\n}\n\nfunction isFunction(obj) {\n  return _class(obj) === '[object Function]';\n}\n\nfunction escapeRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function validate(text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n      }\n\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n\n      return 0;\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function validate(text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'\n        // with code comments\n        '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') {\n          return 0;\n        }\n\n        if (pos >= 3 && text[pos - 3] === '/') {\n          return 0;\n        }\n\n        return tail.match(self.re.no_http)[0].length;\n      }\n\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function validate(text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n      }\n\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n\n      return 0;\n    }\n  }\n};\n/*eslint-disable max-len*/\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'; // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\n\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n/*eslint-enable max-len*/\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n} // Schemas compiler. Build regexps.\n//\n\n\nfunction compile(self) {\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__); // Define dynamic patterns\n\n\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n\n  tlds.push(re.src_xn);\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) {\n    return tpl.replace('%TLDS%', re.src_tlds);\n  }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i'); //\n  // Compile each schema\n  //\n\n  var aliases = [];\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name]; // skip disabled methods\n\n    if (val === null) {\n      return;\n    }\n\n    var compiled = {\n      validate: null,\n      link: null\n    };\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  }); //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n  }); //\n  // Fake record for guessed links\n  //\n\n  self.__compiled__[''] = {\n    validate: null,\n    normalize: createNormalizer()\n  }; //\n  // Build schema condition\n  //\n\n  var slist = Object.keys(self.__compiled__).filter(function (name) {\n    // Filter disabled & fake schemas\n    return name.length > 0 && self.__compiled__[name];\n  }).map(escapeRE).join('|'); // (?!_) cause 1.5x slowdown\n\n  self.re.schema_test = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i'); //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\n\n\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end = self.__last_index__,\n      text = self.__text_cache__.slice(start, end);\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n\n\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n\n  this.url = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\n\n\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options); // Cache last tested result. Used to skip repeating steps on next `match` call.\n\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n  this.re = {};\n  compile(this);\n}\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\n\n\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\n\n\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\n\n\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) {\n    return false;\n  }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos; // try to scan for link with schema - that's the most simple rule\n\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\n\n\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\n\n\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\n\n\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0,\n      result = []; // Try to take previous element from cache, if .test() called before\n\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  } // Cut head if cache was used\n\n\n  var tail = shift ? text.slice(shift) : text; // Scan string until end reached\n\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\n\n\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {\n    return el !== arr[idx - 1];\n  }).reverse();\n  compile(this);\n  return this;\n};\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\n\n\nLinkifyIt.prototype.normalize = function normalize(match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n  if (!match.schema) {\n    match.url = 'http://' + match.url;\n  }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\n\n\nLinkifyIt.prototype.onCompile = function onCompile() {};\n\nmodule.exports = LinkifyIt;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/linkify-it/index.js"],"names":["assign","obj","sources","Array","prototype","slice","call","arguments","forEach","source","Object","keys","key","_class","toString","isString","isObject","isRegExp","isFunction","escapeRE","str","replace","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","isOptionsObj","reduce","acc","k","hasOwnProperty","defaultSchemas","validate","text","pos","self","tail","re","http","RegExp","src_auth","src_host_port_strict","src_path","test","match","length","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_2ch_src_re","tlds_default","split","resetScanCache","__index__","__text_cache__","createValidator","createNormalizer","normalize","compile","require","__opts__","tlds","__tlds__","onCompile","__tlds_replaced__","push","src_xn","src_tlds","join","untpl","tpl","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","__compiled__","schemaError","name","val","Error","__schemas__","compiled","link","alias","slist","filter","map","schema_test","src_ZPCc","schema_search","pretest","Match","shift","start","end","__last_index__","schema","__schema__","toLowerCase","index","lastIndex","raw","url","createMatch","LinkifyIt","schemas","options","add","definition","set","m","ml","me","len","next","tld_pos","at_pos","exec","testSchemaAt","search","indexOf","result","list","keepOld","isArray","concat","sort","el","idx","arr","reverse","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n"]},"metadata":{},"sourceType":"script"}