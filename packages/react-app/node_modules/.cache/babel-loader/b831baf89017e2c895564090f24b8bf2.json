{"ast":null,"code":"import _toConsumableArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/kiwik/packages/react-app/src/components/Contract/FunctionForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _require = require(\"ethers\"),\n    utils = _require.utils,\n    BigNumber = _require.BigNumber;\n\nvar getFunctionInputKey = function getFunctionInputKey(functionInfo, input, inputIndex) {\n  var name = (input === null || input === void 0 ? void 0 : input.name) ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm(_ref) {\n  _s();\n\n  var _this = this;\n\n  var contractFunction = _ref.contractFunction,\n      functionInfo = _ref.functionInfo,\n      provider = _ref.provider,\n      gasPrice = _ref.gasPrice,\n      triggerRefresh = _ref.triggerRefresh;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      form = _useState2[0],\n      setForm = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      txValue = _useState4[0],\n      setTxValue = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      returnValue = _useState6[0],\n      setReturnValue = _useState6[1];\n\n  var tx = Transactor(provider, gasPrice);\n  var inputs = functionInfo.inputs.map(function (input, inputIndex) {\n    var key = getFunctionInputKey(functionInfo, input, inputIndex);\n    var buttons = \"\";\n\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var formUpdate, _formUpdate;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (utils.isHexString(form[key])) {\n                      formUpdate = _objectSpread({}, form);\n                      formUpdate[key] = utils.parseBytes32String(form[key]);\n                      setForm(formUpdate);\n                    } else {\n                      _formUpdate = _objectSpread({}, form);\n                      _formUpdate[key] = utils.formatBytes32String(form[key]);\n                      setForm(_formUpdate);\n                    }\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })),\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, _this);\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            var formUpdate, _formUpdate2;\n\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (utils.isHexString(form[key])) {\n                      formUpdate = _objectSpread({}, form);\n                      formUpdate[key] = utils.toUtf8String(form[key]);\n                      setForm(formUpdate);\n                    } else {\n                      _formUpdate2 = _objectSpread({}, form);\n                      _formUpdate2[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                      setForm(_formUpdate2);\n                    }\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          })),\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, _this);\n    } else if (input.type === \"uint256\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            var formUpdate;\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    formUpdate = _objectSpread({}, form);\n                    formUpdate[key] = utils.parseEther(form[key]);\n                    setForm(formUpdate);\n\n                  case 3:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          })),\n          children: \"\\u2734\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, _this);\n    } else if (input.type === \"address\") {\n      var possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          children: /*#__PURE__*/_jsxDEV(Blockies, {\n            seed: possibleAddress,\n            scale: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, _this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: \"large\",\n        placeholder: input.name ? input.type + \" \" + input.name : input.type,\n        autoComplete: \"off\",\n        value: form[key],\n        name: key,\n        onChange: function onChange(event) {\n          var formUpdate = _objectSpread({}, form);\n\n          formUpdate[event.target.name] = event.target.value;\n          setForm(formUpdate);\n        },\n        suffix: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, _this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, _this);\n  });\n\n  var txValueInput = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"transaction value\",\n      onChange: function onChange(e) {\n        return setTxValue(e.target.value);\n      },\n      value: txValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \" * 10^18 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var floatValue;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          floatValue = parseFloat(txValue);\n                          if (floatValue) setTxValue(\"\" + floatValue * Math.pow(10, 18));\n\n                        case 2:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                })),\n                children: \"\\u2733\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \"number to hex\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          setTxValue(BigNumber.from(txValue).toHexString());\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                })),\n                children: \"#\\uFE0F\\u20E3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, \"txValueInput\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  var handleForm = function handleForm(returned) {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  var buttonIcon = functionInfo.type === \"call\" ? /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Read\\uD83D\\uDCE1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Send\\uD83D\\uDCB8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 7\n  }, this);\n  inputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      onChange: function onChange(e) {\n        return setReturnValue(e.target.value);\n      },\n      defaultValue: \"\",\n      bordered: false,\n      disabled: true,\n      value: returnValue,\n      suffix: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 50,\n          height: 30,\n          margin: 0\n        },\n        type: \"default\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n          var args, result, returned, overrides, _returned;\n\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  args = functionInfo.inputs.map(function (input, inputIndex) {\n                    var key = getFunctionInputKey(functionInfo, input, inputIndex);\n                    var value = form[key];\n\n                    if (input.baseType === \"array\") {\n                      value = JSON.parse(value);\n                    } else if (input.type === \"bool\") {\n                      if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                        value = 1;\n                      } else {\n                        value = 0;\n                      }\n                    }\n\n                    return value;\n                  });\n\n                  if (!(functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\")) {\n                    _context6.next = 15;\n                    break;\n                  }\n\n                  _context6.prev = 2;\n                  _context6.next = 5;\n                  return contractFunction.apply(void 0, _toConsumableArray(args));\n\n                case 5:\n                  returned = _context6.sent;\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                  _context6.next = 13;\n                  break;\n\n                case 10:\n                  _context6.prev = 10;\n                  _context6.t0 = _context6[\"catch\"](2);\n                  console.error(_context6.t0);\n\n                case 13:\n                  _context6.next = 23;\n                  break;\n\n                case 15:\n                  overrides = {};\n\n                  if (txValue) {\n                    overrides.value = txValue; // ethers.utils.parseEther()\n                  }\n\n                  if (gasPrice) {\n                    overrides.gasPrice = gasPrice;\n                  } // Uncomment this if you want to skip the gas estimation for each transaction\n                  // overrides.gasLimit = hexlify(1200000);\n                  // console.log(\"Running with extras\",extras)\n\n\n                  _context6.next = 20;\n                  return tx(contractFunction.apply(void 0, _toConsumableArray(args).concat([overrides])));\n\n                case 20:\n                  _returned = _context6.sent;\n                  handleForm(_returned);\n                  result = tryToDisplay(_returned);\n\n                case 23:\n                  console.log(\"SETTING RESULT:\", result);\n                  setReturnValue(result);\n                  triggerRefresh(true);\n\n                case 26:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, null, [[2, 10]]);\n        })),\n        children: buttonIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, \"goButton\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        style: {\n          textAlign: \"right\",\n          opacity: 0.333,\n          paddingRight: 6,\n          fontSize: 24\n        },\n        children: functionInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        children: inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FunctionForm, \"b0jDw5H7XuKi4SNr9f+24uTw74I=\");\n\n_c = FunctionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionForm\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/components/Contract/FunctionForm.jsx"],"names":["Button","Col","Divider","Input","Row","Tooltip","React","useState","Blockies","Transactor","tryToDisplay","tryToDisplayAsText","require","utils","BigNumber","getFunctionInputKey","functionInfo","input","inputIndex","name","type","FunctionForm","contractFunction","provider","gasPrice","triggerRefresh","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputs","map","key","buttons","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","margin","event","target","value","txValueInput","e","floatValue","parseFloat","from","toHexString","payable","push","handleForm","returned","buttonIcon","marginLeft","width","height","args","baseType","JSON","parse","stateMutability","result","console","error","overrides","log","textAlign","opacity","paddingRight","fontSize"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}