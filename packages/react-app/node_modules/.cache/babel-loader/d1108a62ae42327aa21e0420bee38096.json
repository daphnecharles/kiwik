{"ast":null,"code":"import _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Base, WordArray } from './core.js';\nvar X32WordArray = WordArray;\n/**\n * A 64-bit word.\n */\n\nexport var X64Word = /*#__PURE__*/function (_Base) {\n  _inherits(X64Word, _Base);\n\n  var _super = _createSuper(X64Word);\n\n  /**\n   * Initializes a newly created 64-bit word.\n   *\n   * @param {number} high The high 32 bits.\n   * @param {number} low The low 32 bits.\n   *\n   * @example\n   *\n   *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n   */\n  function X64Word(high, low) {\n    var _this;\n\n    _classCallCheck(this, X64Word);\n\n    _this = _super.call(this);\n    _this.high = high;\n    _this.low = low;\n    return _this;\n  }\n\n  return X64Word;\n}(Base);\n/**\n * An array of 64-bit words.\n *\n * @property {Array} words The array of CryptoJS.x64.Word objects.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\nexport var X64WordArray = /*#__PURE__*/function (_Base2) {\n  _inherits(X64WordArray, _Base2);\n\n  var _super2 = _createSuper(X64WordArray);\n\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create();\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ]);\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ], 10);\n   */\n  function X64WordArray() {\n    var _this2;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 8;\n\n    _classCallCheck(this, X64WordArray);\n\n    _this2 = _super2.call(this);\n    _this2.words = words;\n    _this2.sigBytes = sigBytes;\n    return _this2;\n  }\n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n\n\n  _createClass(X64WordArray, [{\n    key: \"toX32\",\n    value: function toX32() {\n      // Shortcuts\n      var x64Words = this.words;\n      var x64WordsLength = x64Words.length; // Convert\n\n      var x32Words = [];\n\n      for (var i = 0; i < x64WordsLength; i += 1) {\n        var x64Word = x64Words[i];\n        x32Words.push(x64Word.high);\n        x32Words.push(x64Word.low);\n      }\n\n      return X32WordArray.create(x32Words, this.sigBytes);\n    }\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return {X64WordArray} The clone.\n     *\n     * @example\n     *\n     *     var clone = x64WordArray.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(X64WordArray.prototype), \"clone\", this).call(this); // Clone \"words\" array\n\n\n      clone.words = this.words.slice(0);\n      var words = clone.words; // Clone each X64Word object\n\n      var wordsLength = words.length;\n\n      for (var i = 0; i < wordsLength; i += 1) {\n        words[i] = words[i].clone();\n      }\n\n      return clone;\n    }\n  }]);\n\n  return X64WordArray;\n}(Base);","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/x64-core.js"],"names":["Base","WordArray","X32WordArray","X64Word","high","low","X64WordArray","words","sigBytes","length","x64Words","x64WordsLength","x32Words","i","x64Word","push","create","clone","call","slice","wordsLength"],"mappings":";;;;;;AAAA,SACEA,IADF,EAEEC,SAFF,QAGO,WAHP;AAKA,IAAMC,YAAY,GAAGD,SAArB;AAEA;AACA;AACA;;AACA,WAAaE,OAAb;AAAA;;AAAA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,mBAAYC,IAAZ,EAAkBC,GAAlB,EAAuB;AAAA;;AAAA;;AACrB;AAEA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,GAAL,GAAWA,GAAX;AAJqB;AAKtB;;AAhBH;AAAA,EAA6BL,IAA7B;AAmBA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaM,YAAb;AAAA;;AAAA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,0BAAqD;AAAA;;AAAA,QAAzCC,KAAyC,uEAAjC,EAAiC;AAAA,QAA7BC,QAA6B,uEAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;;AAAA;;AACnD;AAEA,WAAKF,KAAL,GAAaA,KAAb;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AAJmD;AAKpD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApCA;AAAA;AAAA,WAqCE,iBAAQ;AACN;AACA,UAAME,QAAQ,GAAG,KAAKH,KAAtB;AACA,UAAMI,cAAc,GAAGD,QAAQ,CAACD,MAAhC,CAHM,CAKN;;AACA,UAAMG,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,IAAI,CAAzC,EAA4C;AAC1C,YAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;AACAD,QAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACV,IAAtB;AACAQ,QAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACT,GAAtB;AACD;;AAED,aAAOH,YAAY,CAACc,MAAb,CAAoBJ,QAApB,EAA8B,KAAKJ,QAAnC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7DA;AAAA;AAAA,WA8DE,iBAAQ;AACN,UAAMS,KAAK,GAAG,6DAAYC,IAAZ,CAAiB,IAAjB,CAAd,CADM,CAGN;;;AACAD,MAAAA,KAAK,CAACV,KAAN,GAAc,KAAKA,KAAL,CAAWY,KAAX,CAAiB,CAAjB,CAAd;AACA,UAAQZ,KAAR,GAAkBU,KAAlB,CAAQV,KAAR,CALM,CAON;;AACA,UAAMa,WAAW,GAAGb,KAAK,CAACE,MAA1B;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,WAApB,EAAiCP,CAAC,IAAI,CAAtC,EAAyC;AACvCN,QAAAA,KAAK,CAACM,CAAD,CAAL,GAAWN,KAAK,CAACM,CAAD,CAAL,CAASI,KAAT,EAAX;AACD;;AAED,aAAOA,KAAP;AACD;AA5EH;;AAAA;AAAA,EAAkCjB,IAAlC","sourcesContent":["import {\n  Base,\n  WordArray,\n} from './core.js';\n\nconst X32WordArray = WordArray;\n\n/**\n * A 64-bit word.\n */\nexport class X64Word extends Base {\n  /**\n   * Initializes a newly created 64-bit word.\n   *\n   * @param {number} high The high 32 bits.\n   * @param {number} low The low 32 bits.\n   *\n   * @example\n   *\n   *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n   */\n  constructor(high, low) {\n    super();\n\n    this.high = high;\n    this.low = low;\n  }\n}\n\n/**\n * An array of 64-bit words.\n *\n * @property {Array} words The array of CryptoJS.x64.Word objects.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class X64WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create();\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ]);\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ], 10);\n   */\n  constructor(words = [], sigBytes = words.length * 8) {\n    super();\n\n    this.words = words;\n    this.sigBytes = sigBytes;\n  }\n\n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n  toX32() {\n    // Shortcuts\n    const x64Words = this.words;\n    const x64WordsLength = x64Words.length;\n\n    // Convert\n    const x32Words = [];\n    for (let i = 0; i < x64WordsLength; i += 1) {\n      const x64Word = x64Words[i];\n      x32Words.push(x64Word.high);\n      x32Words.push(x64Word.low);\n    }\n\n    return X32WordArray.create(x32Words, this.sigBytes);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {X64WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = x64WordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n\n    // Clone \"words\" array\n    clone.words = this.words.slice(0);\n    const { words } = clone;\n\n    // Clone each X64Word object\n    const wordsLength = words.length;\n    for (let i = 0; i < wordsLength; i += 1) {\n      words[i] = words[i].clone();\n    }\n\n    return clone;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}