{"ast":null,"code":"import { getNamedType, isLeafType, parse, print, TypeInfo, visit } from 'graphql';\nexport function fillLeafs(schema, docString, getDefaultFieldNames) {\n  var insertions = [];\n\n  if (!schema || !docString) {\n    return {\n      insertions: insertions,\n      result: docString\n    };\n  }\n\n  var ast;\n\n  try {\n    ast = parse(docString);\n  } catch (error) {\n    return {\n      insertions: insertions,\n      result: docString\n    };\n  }\n\n  var fieldNameFn = getDefaultFieldNames || defaultGetDefaultFieldNames;\n  var typeInfo = new TypeInfo(schema);\n  visit(ast, {\n    leave: function leave(node) {\n      typeInfo.leave(node);\n    },\n    enter: function enter(node) {\n      typeInfo.enter(node);\n\n      if (node.kind === 'Field' && !node.selectionSet) {\n        var fieldType = typeInfo.getType();\n        var selectionSet = buildSelectionSet(isFieldType(fieldType), fieldNameFn);\n\n        if (selectionSet && node.loc) {\n          var indent = getIndentation(docString, node.loc.start);\n          insertions.push({\n            index: node.loc.end,\n            string: ' ' + print(selectionSet).replace(/\\n/g, '\\n' + indent)\n          });\n        }\n      }\n    }\n  });\n  return {\n    insertions: insertions,\n    result: withInsertions(docString, insertions)\n  };\n}\n\nfunction defaultGetDefaultFieldNames(type) {\n  if (!('getFields' in type)) {\n    return [];\n  }\n\n  var fields = type.getFields();\n\n  if (fields.id) {\n    return ['id'];\n  }\n\n  if (fields.edges) {\n    return ['edges'];\n  }\n\n  if (fields.node) {\n    return ['node'];\n  }\n\n  var leafFieldNames = [];\n  Object.keys(fields).forEach(function (fieldName) {\n    if (isLeafType(fields[fieldName].type)) {\n      leafFieldNames.push(fieldName);\n    }\n  });\n  return leafFieldNames;\n}\n\nfunction buildSelectionSet(type, getDefaultFieldNames) {\n  var namedType = getNamedType(type);\n\n  if (!type || isLeafType(type)) {\n    return;\n  }\n\n  var fieldNames = getDefaultFieldNames(namedType);\n\n  if (!Array.isArray(fieldNames) || fieldNames.length === 0 || !('getFields' in namedType)) {\n    return;\n  }\n\n  return {\n    kind: 'SelectionSet',\n    selections: fieldNames.map(function (fieldName) {\n      var fieldDef = namedType.getFields()[fieldName];\n      var fieldType = fieldDef ? fieldDef.type : null;\n      return {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: fieldName\n        },\n        selectionSet: buildSelectionSet(fieldType, getDefaultFieldNames)\n      };\n    })\n  };\n}\n\nfunction withInsertions(initial, insertions) {\n  if (insertions.length === 0) {\n    return initial;\n  }\n\n  var edited = '';\n  var prevIndex = 0;\n  insertions.forEach(function (_a) {\n    var index = _a.index,\n        string = _a.string;\n    edited += initial.slice(prevIndex, index) + string;\n    prevIndex = index;\n  });\n  edited += initial.slice(prevIndex);\n  return edited;\n}\n\nfunction getIndentation(str, index) {\n  var indentStart = index;\n  var indentEnd = index;\n\n  while (indentStart) {\n    var c = str.charCodeAt(indentStart - 1);\n\n    if (c === 10 || c === 13 || c === 0x2028 || c === 0x2029) {\n      break;\n    }\n\n    indentStart--;\n\n    if (c !== 9 && c !== 11 && c !== 12 && c !== 32 && c !== 160) {\n      indentEnd = indentStart;\n    }\n  }\n\n  return str.substring(indentStart, indentEnd);\n}\n\nfunction isFieldType(fieldType) {\n  if (fieldType) {\n    return fieldType;\n  }\n}","map":{"version":3,"sources":["../../src/utility/fillLeafs.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getNamedType, isLeafType, parse, print, TypeInfo, visit, } from 'graphql';\nexport function fillLeafs(schema, docString, getDefaultFieldNames) {\n    var insertions = [];\n    if (!schema || !docString) {\n        return { insertions: insertions, result: docString };\n    }\n    var ast;\n    try {\n        ast = parse(docString);\n    }\n    catch (error) {\n        return { insertions: insertions, result: docString };\n    }\n    var fieldNameFn = getDefaultFieldNames || defaultGetDefaultFieldNames;\n    var typeInfo = new TypeInfo(schema);\n    visit(ast, {\n        leave: function (node) {\n            typeInfo.leave(node);\n        },\n        enter: function (node) {\n            typeInfo.enter(node);\n            if (node.kind === 'Field' && !node.selectionSet) {\n                var fieldType = typeInfo.getType();\n                var selectionSet = buildSelectionSet(isFieldType(fieldType), fieldNameFn);\n                if (selectionSet && node.loc) {\n                    var indent = getIndentation(docString, node.loc.start);\n                    insertions.push({\n                        index: node.loc.end,\n                        string: ' ' + print(selectionSet).replace(/\\n/g, '\\n' + indent),\n                    });\n                }\n            }\n        },\n    });\n    return {\n        insertions: insertions,\n        result: withInsertions(docString, insertions),\n    };\n}\nfunction defaultGetDefaultFieldNames(type) {\n    if (!('getFields' in type)) {\n        return [];\n    }\n    var fields = type.getFields();\n    if (fields.id) {\n        return ['id'];\n    }\n    if (fields.edges) {\n        return ['edges'];\n    }\n    if (fields.node) {\n        return ['node'];\n    }\n    var leafFieldNames = [];\n    Object.keys(fields).forEach(function (fieldName) {\n        if (isLeafType(fields[fieldName].type)) {\n            leafFieldNames.push(fieldName);\n        }\n    });\n    return leafFieldNames;\n}\nfunction buildSelectionSet(type, getDefaultFieldNames) {\n    var namedType = getNamedType(type);\n    if (!type || isLeafType(type)) {\n        return;\n    }\n    var fieldNames = getDefaultFieldNames(namedType);\n    if (!Array.isArray(fieldNames) ||\n        fieldNames.length === 0 ||\n        !('getFields' in namedType)) {\n        return;\n    }\n    return {\n        kind: 'SelectionSet',\n        selections: fieldNames.map(function (fieldName) {\n            var fieldDef = namedType.getFields()[fieldName];\n            var fieldType = fieldDef ? fieldDef.type : null;\n            return {\n                kind: 'Field',\n                name: {\n                    kind: 'Name',\n                    value: fieldName,\n                },\n                selectionSet: buildSelectionSet(fieldType, getDefaultFieldNames),\n            };\n        }),\n    };\n}\nfunction withInsertions(initial, insertions) {\n    if (insertions.length === 0) {\n        return initial;\n    }\n    var edited = '';\n    var prevIndex = 0;\n    insertions.forEach(function (_a) {\n        var index = _a.index, string = _a.string;\n        edited += initial.slice(prevIndex, index) + string;\n        prevIndex = index;\n    });\n    edited += initial.slice(prevIndex);\n    return edited;\n}\nfunction getIndentation(str, index) {\n    var indentStart = index;\n    var indentEnd = index;\n    while (indentStart) {\n        var c = str.charCodeAt(indentStart - 1);\n        if (c === 10 || c === 13 || c === 0x2028 || c === 0x2029) {\n            break;\n        }\n        indentStart--;\n        if (c !== 9 && c !== 11 && c !== 12 && c !== 32 && c !== 160) {\n            indentEnd = indentStart;\n        }\n    }\n    return str.substring(indentStart, indentEnd);\n}\nfunction isFieldType(fieldType) {\n    if (fieldType) {\n        return fieldType;\n    }\n}\n//# sourceMappingURL=fillLeafs.js.map"]},"metadata":{},"sourceType":"module"}