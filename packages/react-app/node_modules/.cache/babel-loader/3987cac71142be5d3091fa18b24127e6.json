{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorCodes = require(\"./errorCodes\");\n\nvar _generateId = _interopRequireDefault(require(\"./generateId\"));\n\nvar _errorSerialization = require(\"./errorSerialization\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\n\n\nvar _default = function _default(callSender, info, methodNames, destroyConnection, log) {\n  var localName = info.localName,\n      local = info.local,\n      remote = info.remote,\n      originForSending = info.originForSending,\n      originForReceiving = info.originForReceiving;\n  var destroyed = false;\n  log(\"\".concat(localName, \": Connecting call sender\"));\n\n  var createMethodProxy = function createMethodProxy(methodName) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      log(\"\".concat(localName, \": Sending \").concat(methodName, \"() call\")); // This handles the case where the iframe has been removed from the DOM\n      // (and therefore its window closed), the consumer has not yet\n      // called destroy(), and the user calls a method exposed by\n      // the remote. We detect the iframe has been removed and force\n      // a destroy() immediately so that the consumer sees the error saying\n      // the connection has been destroyed. We wrap this check in a try catch\n      // because Edge throws an \"Object expected\" error when accessing\n      // contentWindow.closed on a contentWindow from an iframe that's been\n      // removed from the DOM.\n\n      var iframeRemoved;\n\n      try {\n        if (remote.closed) {\n          iframeRemoved = true;\n        }\n      } catch (e) {\n        iframeRemoved = true;\n      }\n\n      if (iframeRemoved) {\n        destroyConnection();\n      }\n\n      if (destroyed) {\n        var error = new Error(\"Unable to send \".concat(methodName, \"() call due \") + \"to destroyed connection\");\n        error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var id = (0, _generateId.default)();\n\n        var handleMessageEvent = function handleMessageEvent(event) {\n          if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {\n            return;\n          }\n\n          if (event.origin !== originForReceiving) {\n            log(\"\".concat(localName, \" received message from origin \").concat(event.origin, \" which did not match expected origin \").concat(originForReceiving));\n            return;\n          }\n\n          log(\"\".concat(localName, \": Received \").concat(methodName, \"() reply\"));\n          local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n          var returnValue = event.data.returnValue;\n\n          if (event.data.returnValueIsError) {\n            returnValue = (0, _errorSerialization.deserializeError)(returnValue);\n          }\n\n          (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);\n        };\n\n        local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: _constants.CALL,\n          id: id,\n          methodName: methodName,\n          args: args\n        }, originForSending);\n      });\n    };\n  };\n\n  methodNames.reduce(function (api, methodName) {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n  return function () {\n    destroyed = true;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/authereum/node_modules/penpal/lib/connectCallSender.js"],"names":["Object","defineProperty","exports","value","default","_constants","require","_errorCodes","_generateId","_interopRequireDefault","_errorSerialization","obj","__esModule","_default","callSender","info","methodNames","destroyConnection","log","localName","local","remote","originForSending","originForReceiving","destroyed","createMethodProxy","methodName","_len","arguments","length","args","Array","_key","iframeRemoved","closed","e","error","Error","code","ERR_CONNECTION_DESTROYED","Promise","resolve","reject","id","handleMessageEvent","event","source","data","penpal","REPLY","origin","removeEventListener","MESSAGE","returnValue","returnValueIsError","deserializeError","resolution","FULFILLED","addEventListener","postMessage","CALL","reduce","api","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorCodes = require(\"./errorCodes\");\n\nvar _generateId = _interopRequireDefault(require(\"./generateId\"));\n\nvar _errorSerialization = require(\"./errorSerialization\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\nvar _default = (callSender, info, methodNames, destroyConnection, log) => {\n  const localName = info.localName,\n        local = info.local,\n        remote = info.remote,\n        originForSending = info.originForSending,\n        originForReceiving = info.originForReceiving;\n  let destroyed = false;\n  log(`${localName}: Connecting call sender`);\n\n  const createMethodProxy = methodName => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      log(`${localName}: Sending ${methodName}() call`); // This handles the case where the iframe has been removed from the DOM\n      // (and therefore its window closed), the consumer has not yet\n      // called destroy(), and the user calls a method exposed by\n      // the remote. We detect the iframe has been removed and force\n      // a destroy() immediately so that the consumer sees the error saying\n      // the connection has been destroyed. We wrap this check in a try catch\n      // because Edge throws an \"Object expected\" error when accessing\n      // contentWindow.closed on a contentWindow from an iframe that's been\n      // removed from the DOM.\n\n      let iframeRemoved;\n\n      try {\n        if (remote.closed) {\n          iframeRemoved = true;\n        }\n      } catch (e) {\n        iframeRemoved = true;\n      }\n\n      if (iframeRemoved) {\n        destroyConnection();\n      }\n\n      if (destroyed) {\n        const error = new Error(`Unable to send ${methodName}() call due ` + `to destroyed connection`);\n        error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n\n      return new Promise((resolve, reject) => {\n        const id = (0, _generateId.default)();\n\n        const handleMessageEvent = event => {\n          if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {\n            return;\n          }\n\n          if (event.origin !== originForReceiving) {\n            log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);\n            return;\n          }\n\n          log(`${localName}: Received ${methodName}() reply`);\n          local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n          let returnValue = event.data.returnValue;\n\n          if (event.data.returnValueIsError) {\n            returnValue = (0, _errorSerialization.deserializeError)(returnValue);\n          }\n\n          (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);\n        };\n\n        local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: _constants.CALL,\n          id,\n          methodName,\n          args\n        }, originForSending);\n      });\n    };\n  };\n\n  methodNames.reduce((api, methodName) => {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n  return () => {\n    destroyed = true;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}