{"ast":null,"code":"var _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar cacheUtils = require('./cache-utils.js');\n\nvar createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware'); // `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\n\n\nvar emptyValues = [undefined, null, \"<nil>\"];\nmodule.exports = createBlockCacheMiddleware;\n\nfunction createBlockCacheMiddleware() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // validate options\n  var blockTracker = opts.blockTracker;\n  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified'); // create caching strategies\n\n  var blockCache = new BlockCacheStrategy();\n  var strategies = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache\n  };\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {\n      var type, strategy, blockTag, requestedBlockNumber, latestBlockNumber, cacheResult;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!req.skipCache) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 2:\n              // check type and matching strategy\n              type = cacheUtils.cacheTypeForPayload(req);\n              strategy = strategies[type]; // If there's no strategy in place, pass it down the chain.\n\n              if (strategy) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 6:\n              if (strategy.canCacheRequest(req)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 8:\n              // get block reference (number or keyword)\n              blockTag = cacheUtils.blockTagForPayload(req);\n              if (!blockTag) blockTag = 'latest'; // get exact block number\n\n              if (!(blockTag === 'earliest')) {\n                _context.next = 14;\n                break;\n              }\n\n              // this just exists for symmetry with \"latest\"\n              requestedBlockNumber = '0x00';\n              _context.next = 23;\n              break;\n\n            case 14:\n              if (!(blockTag === 'latest')) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 17;\n              return blockTracker.getLatestBlock();\n\n            case 17:\n              latestBlockNumber = _context.sent;\n              // clear all cache before latest block\n              blockCache.clearBefore(latestBlockNumber);\n              requestedBlockNumber = latestBlockNumber;\n              _context.next = 23;\n              break;\n\n            case 22:\n              // We have a hex number\n              requestedBlockNumber = blockTag;\n\n            case 23:\n              _context.next = 25;\n              return strategy.get(req, requestedBlockNumber);\n\n            case 25:\n              cacheResult = _context.sent;\n\n              if (!(cacheResult === undefined)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 29;\n              return next();\n\n            case 29:\n              _context.next = 31;\n              return strategy.set(req, requestedBlockNumber, res.result);\n\n            case 31:\n              _context.next = 34;\n              break;\n\n            case 33:\n              // fill in result from cache\n              res.result = cacheResult;\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} //\n// Cache Strategies\n//\n\n\nvar BlockCacheStrategy = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BlockCacheStrategy() {\n    _classCallCheck(this, BlockCacheStrategy);\n\n    this.cache = {};\n  }\n\n  _createClass(BlockCacheStrategy, [{\n    key: \"getBlockCacheForPayload\",\n    value: function getBlockCacheForPayload(payload, blockNumberHex) {\n      var blockNumber = Number.parseInt(blockNumberHex, 16);\n      var blockCache = this.cache[blockNumber]; // create new cache if necesary\n\n      if (!blockCache) {\n        var newCache = {};\n        this.cache[blockNumber] = newCache;\n        blockCache = newCache;\n      }\n\n      return blockCache;\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload, requestedBlockNumber) {\n        var blockCache, identifier, cached;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // lookup block cache\n                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n\n                if (blockCache) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                // lookup payload in block cache\n                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n                cached = blockCache[identifier]; // may be undefined\n\n                return _context2.abrupt(\"return\", cached);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x4, _x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload, requestedBlockNumber, result) {\n        var canCache, blockCache, identifier;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // check if we can cached this result\n                canCache = this.canCacheResult(payload, result);\n\n                if (canCache) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                // set the value in the cache\n                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n                blockCache[identifier] = result;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set(_x6, _x7, _x8) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"canCacheRequest\",\n    value: function canCacheRequest(payload) {\n      // check request method\n      if (!cacheUtils.canCache(payload)) {\n        return false;\n      } // check blockTag\n\n\n      var blockTag = cacheUtils.blockTagForPayload(payload);\n\n      if (blockTag === 'pending') {\n        return false;\n      } // can be cached\n\n\n      return true;\n    }\n  }, {\n    key: \"canCacheResult\",\n    value: function canCacheResult(payload, result) {\n      // never cache empty values (e.g. undefined)\n      if (emptyValues.includes(result)) return; // check if transactions have block reference before caching\n\n      if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n        if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n          return false;\n        }\n      } // otherwise true\n\n\n      return true;\n    } // removes all block caches with block number lower than `oldBlockHex`\n\n  }, {\n    key: \"clearBefore\",\n    value: function clearBefore(oldBlockHex) {\n      var self = this;\n      var oldBlockNumber = Number.parseInt(oldBlockHex, 16); // clear old caches\n\n      Object.keys(self.cache).map(Number).filter(function (num) {\n        return num < oldBlockNumber;\n      }).forEach(function (num) {\n        return delete self.cache[num];\n      });\n    }\n  }]);\n\n  return BlockCacheStrategy;\n}();","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/web3-provider-engine/node_modules/eth-json-rpc-middleware/block-cache.js"],"names":["cacheUtils","require","createAsyncMiddleware","emptyValues","undefined","module","exports","createBlockCacheMiddleware","opts","blockTracker","Error","blockCache","BlockCacheStrategy","strategies","perma","block","fork","req","res","next","skipCache","type","cacheTypeForPayload","strategy","canCacheRequest","blockTag","blockTagForPayload","requestedBlockNumber","getLatestBlock","latestBlockNumber","clearBefore","get","cacheResult","set","result","cache","payload","blockNumberHex","blockNumber","Number","parseInt","newCache","getBlockCacheForPayload","identifier","cacheIdentifierForPayload","cached","canCache","canCacheResult","includes","method","blockHash","oldBlockHex","self","oldBlockNumber","Object","keys","map","filter","num","forEach"],"mappings":"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","sourcesContent":["const cacheUtils = require('./cache-utils.js')\nconst createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e']\n\nmodule.exports = createBlockCacheMiddleware\n\n\nfunction createBlockCacheMiddleware(opts = {}) {\n  // validate options\n  const { blockTracker } = opts\n  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')\n\n  // create caching strategies\n  const blockCache = new BlockCacheStrategy()\n  const strategies = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache,\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    // allow cach to be skipped if so specified\n    if (req.skipCache) {\n      return next()\n    }\n    // check type and matching strategy\n    const type = cacheUtils.cacheTypeForPayload(req)\n    const strategy = strategies[type]\n    // If there's no strategy in place, pass it down the chain.\n    if (!strategy) {\n      return next()\n    }\n    // If the strategy can't cache this request, ignore it.\n    if (!strategy.canCacheRequest(req)) {\n      return next()\n    }\n\n    // get block reference (number or keyword)\n    let blockTag = cacheUtils.blockTagForPayload(req)\n    if (!blockTag) blockTag = 'latest'\n\n    // get exact block number\n    let requestedBlockNumber\n    if (blockTag === 'earliest') {\n      // this just exists for symmetry with \"latest\"\n      requestedBlockNumber = '0x00'\n    } else if (blockTag === 'latest') {\n      // fetch latest block number\n      const latestBlockNumber = await blockTracker.getLatestBlock()\n      // clear all cache before latest block\n      blockCache.clearBefore(latestBlockNumber)\n      requestedBlockNumber = latestBlockNumber\n    } else {\n      // We have a hex number\n      requestedBlockNumber = blockTag\n    }\n\n    // end on a hit, continue on a miss\n    const cacheResult = await strategy.get(req, requestedBlockNumber)\n    if (cacheResult === undefined) {\n      // cache miss\n      // wait for other middleware to handle request\n      await next()\n      // add result to cache\n      await strategy.set(req, requestedBlockNumber, res.result)\n    } else {\n      // fill in result from cache\n      res.result = cacheResult\n    }\n  })\n}\n\n\n//\n// Cache Strategies\n//\n\nclass BlockCacheStrategy {\n  \n  constructor () {\n    this.cache = {}\n  }\n\n  getBlockCacheForPayload (payload, blockNumberHex) {\n    const blockNumber = Number.parseInt(blockNumberHex, 16)\n    let blockCache = this.cache[blockNumber]\n    // create new cache if necesary\n    if (!blockCache) {\n      const newCache = {}\n      this.cache[blockNumber] = newCache\n      blockCache = newCache\n    }\n    return blockCache\n  }\n\n  async get (payload, requestedBlockNumber) {\n    // lookup block cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    if (!blockCache) return\n    // lookup payload in block cache\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    const cached = blockCache[identifier]\n    // may be undefined\n    return cached\n  }\n\n  async set (payload, requestedBlockNumber, result) {\n    // check if we can cached this result\n    const canCache = this.canCacheResult(payload, result)\n    if (!canCache) return\n    // set the value in the cache\n    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)\n    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)\n    blockCache[identifier] = result\n  }\n\n  canCacheRequest (payload) {\n    // check request method\n    if (!cacheUtils.canCache(payload)) {\n      return false\n    }\n    // check blockTag\n    const blockTag = cacheUtils.blockTagForPayload(payload)\n    if (blockTag === 'pending') {\n      return false\n    }\n    // can be cached\n    return true\n  }\n\n  canCacheResult (payload, result) {\n    // never cache empty values (e.g. undefined)\n    if (emptyValues.includes(result)) return\n    // check if transactions have block reference before caching\n    if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n      if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n        return false\n      }\n    }\n    // otherwise true\n    return true\n  }\n\n  // removes all block caches with block number lower than `oldBlockHex`\n  clearBefore (oldBlockHex){\n    const self = this\n    const oldBlockNumber = Number.parseInt(oldBlockHex, 16)\n    // clear old caches\n    Object.keys(self.cache)\n      .map(Number)\n      .filter(num => num < oldBlockNumber)\n      .forEach(num => delete self.cache[num])\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}