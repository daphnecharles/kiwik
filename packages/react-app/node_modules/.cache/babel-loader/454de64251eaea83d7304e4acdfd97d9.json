{"ast":null,"code":"import { WordArray } from './core.js';\n\nvar swapEndian = function swapEndian(word) {\n  return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n};\n/**\n * UTF-16 BE encoding strategy.\n */\n\n\nexport var Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var utf16Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 2) {\n      var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse: function parse(utf16Str) {\n    // Shortcut\n    var utf16StrLength = utf16Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};\nexport var Utf16 = Utf16BE;\n/**\n * UTF-16 LE encoding strategy.\n */\n\nexport var Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var utf16Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 2) {\n      var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse: function parse(utf16Str) {\n    // Shortcut\n    var utf16StrLength = utf16Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/enc-utf16.js"],"names":["WordArray","swapEndian","word","Utf16BE","stringify","wordArray","words","sigBytes","utf16Chars","i","codePoint","push","String","fromCharCode","join","parse","utf16Str","utf16StrLength","length","charCodeAt","create","Utf16","Utf16LE"],"mappings":"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","sourcesContent":["import {\n  WordArray,\n} from './core.js';\n\nconst swapEndian = word => ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\n/**\n * UTF-16 BE encoding strategy.\n */\nexport const Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  },\n};\nexport const Utf16 = Utf16BE;\n\n/**\n * UTF-16 LE encoding strategy.\n */\nexport const Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}