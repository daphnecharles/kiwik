{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar createCp = configure.configure(function (api) {\n  function cp(_x, _x2) {\n    return _cp.apply(this, arguments);\n  }\n\n  function _cp() {\n    _cp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sources, destination) {\n      var options,\n          sourceArr,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              sourceArr = Array.isArray(sources) ? sources : [sources];\n              _context.next = 4;\n              return api.post('files/cp', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread({\n                  arg: sourceArr.concat(destination).map(function (src) {\n                    return cid.CID.asCID(src) ? \"/ipfs/\".concat(src) : src;\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _cp.apply(this, arguments);\n  }\n\n  return cp;\n});\nexports.createCp = createCp;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ipfs-http-client/cjs/src/files/cp.js"],"names":["Object","defineProperty","exports","value","cid","require","configure","toUrlSearchParams","createCp","api","cp","sources","destination","options","sourceArr","Array","isArray","post","signal","searchParams","arg","concat","map","src","CID","asCID","headers","res","text"],"mappings":"AAAA;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAA/B;;AAEA,IAAMG,QAAQ,GAAGF,SAAS,CAACA,SAAV,CAAoB,UAAAG,GAAG,EAAI;AAAA,WAC3BC,EAD2B;AAAA;AAAA;;AAAA;AAAA,mEAC1C,iBAAkBC,OAAlB,EAA2BC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCC,cAAAA,OAAxC,2DAAkD,EAAlD;AACQC,cAAAA,SADR,GACoBC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CADvD;AAAA;AAAA,qBAEoBF,GAAG,CAACQ,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MADqB;AAErCC,gBAAAA,YAAY,EAAEZ,iBAAiB,CAACA,iBAAlB;AACZa,kBAAAA,GAAG,EAAEN,SAAS,CAACO,MAAV,CAAiBT,WAAjB,EAA8BU,GAA9B,CAAkC,UAAAC,GAAG;AAAA,2BAAInB,GAAG,CAACoB,GAAJ,CAAQC,KAAR,CAAcF,GAAd,oBAA+BA,GAA/B,IAAwCA,GAA5C;AAAA,mBAArC;AADO,mBAETV,OAFS,EAFuB;AAMrCa,gBAAAA,OAAO,EAAEb,OAAO,CAACa;AANoB,eAArB,CAFpB;;AAAA;AAEQC,cAAAA,GAFR;AAAA;AAAA,qBAUQA,GAAG,CAACC,IAAJ,EAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAa1C,SAAOlB,EAAP;AACD,CAdgB,CAAjB;AAgBAR,OAAO,CAACM,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createCp = configure.configure(api => {\n  async function cp(sources, destination, options = {}) {\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => cid.CID.asCID(src) ? `/ipfs/${ src }` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n  return cp;\n});\n\nexports.createCp = createCp;\n"]},"metadata":{},"sourceType":"script"}