{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n\n  var _super = _createSuper(LogDescription);\n\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n\n    return _super.apply(this, arguments);\n  }\n\n  return LogDescription;\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n\n  var _super2 = _createSuper(TransactionDescription);\n\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return TransactionDescription;\n}(Description);\nexport var ErrorDescription = /*#__PURE__*/function (_Description3) {\n  _inherits(ErrorDescription, _Description3);\n\n  var _super3 = _createSuper(ErrorDescription);\n\n  function ErrorDescription() {\n    _classCallCheck(this, ErrorDescription);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return ErrorDescription;\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description4) {\n  _inherits(Indexed, _Description4);\n\n  var _super4 = _createSuper(Indexed);\n\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n\n  return Indexed;\n}(Description);\nvar BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\n\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n\n    _classCallCheck(this, Interface);\n\n    logger.checkNew(this instanceof Interface ? this.constructor : void 0, Interface);\n    var abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n\n        case \"error\":\n          bucket = _this.errors;\n          break;\n\n        default:\n          return;\n      }\n\n      var signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      }); // We need to re-bundle the JSON fragments a bit\n\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n\n      return abi;\n    } // Sub-classes can override these to handle other blockchains\n\n  }, {\n    key: \"getFunction\",\n    value: // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n\n        return this.functions[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Find an event definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name2;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n\n        return this.events[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n\n      return result;\n    } // Find a function definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getError\",\n    value: function getError(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        var getSighash = getStatic(this.constructor, \"getSighash\");\n\n        for (var name in this.errors) {\n          var error = this.errors[name];\n\n          if (nameOrSignatureOrSighash === getSighash(error)) {\n            return this.errors[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name3 = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.errors).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name3;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching error\", \"name\", _name3);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching errors\", \"name\", _name3);\n        }\n\n        return this.errors[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      if (typeof fragment === \"string\") {\n        try {\n          fragment = this.getFunction(fragment);\n        } catch (error) {\n          try {\n            fragment = this.getError(fragment);\n          } catch (_) {\n            throw error;\n          }\n        }\n      }\n\n      return getStatic(this.constructor, \"getSighash\")(fragment);\n    } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n  }, {\n    key: \"decodeErrorResult\",\n    value: function decodeErrorResult(fragment, data) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n        logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n  }, {\n    key: \"encodeErrorResult\",\n    value: function encodeErrorResult(fragment, values) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n\n      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n    } // Decode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    } // Encode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    } // Decode the result from a function call (e.g. from eth_call)\n\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n      var reason = null;\n      var errorArgs = null;\n      var errorName = null;\n      var errorSignature = null;\n\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n\n          break;\n\n        case 4:\n          {\n            var selector = hexlify(bytes.slice(0, 4));\n            var builtin = BuiltinErrors[selector];\n\n            if (builtin) {\n              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n              errorName = builtin.name;\n              errorSignature = builtin.signature;\n\n              if (builtin.reason) {\n                reason = errorArgs[0];\n              }\n            } else {\n              try {\n                var error = this.getError(selector);\n                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                errorName = error.name;\n                errorSignature = error.format();\n              } catch (error) {\n                console.log(error);\n              }\n            }\n\n            break;\n          }\n      }\n\n      return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        errorArgs: errorArgs,\n        errorName: errorName,\n        errorSignature: errorSignature,\n        reason: reason\n      });\n    } // Encode the result for a function call (e.g. for eth_call)\n\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n\n      var topics = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        } // Check addresses are valid\n\n\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n\n        return hexZeroPad(hexlify(value), 32);\n      };\n\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n\n          return;\n        }\n\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      }); // Trim off trailing nulls\n\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TOOD\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    } // Decode a filter for the event and the search criteria\n\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n\n        topics = topics.slice(1);\n      }\n\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n      var result = [];\n      var nonIndexedIndex = 0,\n          indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        } // Add the keyword argument if named and safe\n\n\n        if (param.name && result[param.name] == null) {\n          var value = result[index]; // Make error named values throw on access\n\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      }); // Make all error indexed values throw on access\n\n      var _loop = function _loop(i) {\n        var value = result[i];\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n\n      return Object.freeze(result);\n    } // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    } // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n\n      if (!fragment || fragment.anonymous) {\n        return null;\n      } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(data) {\n      var hexData = hexlify(data);\n      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new ErrorDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n        errorFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n\n  return Interface;\n}();","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) {\n                        console.log(error);\n                    }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}