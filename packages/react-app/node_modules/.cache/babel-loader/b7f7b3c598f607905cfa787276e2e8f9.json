{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./error'),\n    TimeoutError = _require.TimeoutError,\n    AbortError = _require.AbortError;\n\nvar _require2 = require('../fetch'),\n    Response = _require2.Response,\n    Request = _require2.Request,\n    Headers = _require2.Headers,\n    fetch = _require2.default;\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\n\n\nvar fetchWithProgress = function fetchWithProgress(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  var timeout = options.timeout,\n      headers = options.headers;\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (headers) {\n    var _iterator = _createForOfIteratorHelper(new Headers(headers)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            name = _step$value[0],\n            value = _step$value[1];\n\n        request.setRequestHeader(name, value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = function () {\n      return request.abort();\n    };\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  } // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n\n\n  request.responseType = 'arraybuffer';\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {Event} event\n     */\n    var handleEvent = function handleEvent(event) {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent; // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n\n    request.send(options.body);\n  });\n};\n\nvar fetchWithStreaming = fetch;\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\n\nvar fetchWith = function fetchWith(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n};\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\n\n\nvar parseHeaders = function parseHeaders(input) {\n  var headers = new Headers();\n\n  var _iterator2 = _createForOfIteratorHelper(input.trim().split(/[\\r\\n]+/)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n      var index = line.indexOf(': ');\n\n      if (index > 0) {\n        headers.set(line.slice(0, index), line.slice(index + 1));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return headers;\n};\n\nvar ResponseWithURL = /*#__PURE__*/function (_Response) {\n  _inherits(ResponseWithURL, _Response);\n\n  var _super = _createSuper(ResponseWithURL);\n\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  function ResponseWithURL(url, body, options) {\n    var _this;\n\n    _classCallCheck(this, ResponseWithURL);\n\n    _this = _super.call(this, body, options);\n    Object.defineProperty(_assertThisInitialized(_this), 'url', {\n      value: url\n    });\n    return _this;\n  }\n\n  return ResponseWithURL;\n}(Response);\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request: Request,\n  Headers: Headers\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ipfs-utils/src/http/fetch.browser.js"],"names":["require","TimeoutError","AbortError","Response","Request","Headers","fetch","default","fetchWithProgress","url","options","request","XMLHttpRequest","open","method","toString","timeout","headers","Infinity","overrideMimeType","name","value","setRequestHeader","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","trim","split","line","index","indexOf","set","slice","Object","defineProperty","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"]},"metadata":{},"sourceType":"script"}