{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errcode = require('err-code');\n\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nvar PBData = unixfs.Data;\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n\n  return parseInt(mode, 10) & 4095;\n}\n\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var mtime;\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  if (input instanceof Date) {\n    var ms = input.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default['default'](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nvar UnixFS = /*#__PURE__*/function () {\n  function UnixFS() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n\n    _classCallCheck(this, UnixFS);\n\n    var type = options.type,\n        data = options.data,\n        blockSizes = options.blockSizes,\n        hashType = options.hashType,\n        fanout = options.fanout,\n        mtime = options.mtime,\n        mode = options.mode;\n\n    if (type && !types.includes(type)) {\n      throw errcode__default['default'](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  _createClass(UnixFS, [{\n    key: \"mode\",\n    get: function get() {\n      return this._mode;\n    },\n    set: function set(mode) {\n      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n      var parsedMode = parseMode(mode);\n\n      if (parsedMode !== undefined) {\n        this._mode = parsedMode;\n      }\n    }\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return Boolean(this.type && dirTypes.includes(this.type));\n    }\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    }\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        return 0;\n      }\n\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n\n      if (this.data) {\n        sum += this.data.length;\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n\n      switch (this.type) {\n        case 'raw':\n          type = PBData.DataType.Raw;\n          break;\n\n        case 'directory':\n          type = PBData.DataType.Directory;\n          break;\n\n        case 'file':\n          type = PBData.DataType.File;\n          break;\n\n        case 'metadata':\n          type = PBData.DataType.Metadata;\n          break;\n\n        case 'symlink':\n          type = PBData.DataType.Symlink;\n          break;\n\n        case 'hamt-sharded-directory':\n          type = PBData.DataType.HAMTShard;\n          break;\n\n        default:\n          throw errcode__default['default'](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n\n      var data = this.data;\n\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n\n      var mode;\n\n      if (this.mode != null) {\n        mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n\n        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n          mode = undefined;\n        }\n\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n\n      var mtime;\n\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n\n      var pbData = {\n        Type: type,\n        Data: data,\n        filesize: this.isDirectory() ? undefined : this.fileSize(),\n        blocksizes: this.blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      };\n      return PBData.encode(pbData).finish();\n    }\n  }], [{\n    key: \"unmarshal\",\n    value: function unmarshal(marshaled) {\n      var message = PBData.decode(marshaled);\n      var decoded = PBData.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      });\n      var data = new UnixFS({\n        type: types[decoded.Type],\n        data: decoded.Data,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.mode,\n        mtime: decoded.mtime ? {\n          secs: decoded.mtime.Seconds,\n          nsecs: decoded.mtime.FractionalNanoseconds\n        } : undefined\n      });\n      data._originalMode = decoded.mode || 0;\n      return data;\n    }\n  }]);\n\n  return UnixFS;\n}();\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/ipfs-unixfs/cjs/src/index.js"],"names":["Object","defineProperty","exports","value","errcode","require","unixfs","_interopDefaultLegacy","e","errcode__default","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","prototype","hasOwnProperty","call","Error","UnixFS","options","type","data","blockSizes","hashType","fanout","includes","_originalMode","_mode","isDirectory","parsedMode","Boolean","size","push","index","splice","sum","forEach","length","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","Type","filesize","fileSize","blocksizes","encode","finish","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errcode = require('err-code');\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nconst PBData = unixfs.Data;\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n];\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n  return parseInt(mode, 10) & 4095;\n}\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  let mtime;\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default['default'](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  constructor(options = { type: 'file' }) {\n    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;\n    if (type && !types.includes(type)) {\n      throw errcode__default['default'](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  get mode() {\n    return this._mode;\n  }\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (this.data) {\n      sum += this.data.length;\n    }\n    return sum;\n  }\n  marshal() {\n    let type;\n    switch (this.type) {\n    case 'raw':\n      type = PBData.DataType.Raw;\n      break;\n    case 'directory':\n      type = PBData.DataType.Directory;\n      break;\n    case 'file':\n      type = PBData.DataType.File;\n      break;\n    case 'metadata':\n      type = PBData.DataType.Metadata;\n      break;\n    case 'symlink':\n      type = PBData.DataType.Symlink;\n      break;\n    case 'hamt-sharded-directory':\n      type = PBData.DataType.HAMTShard;\n      break;\n    default:\n      throw errcode__default['default'](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let mode;\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n    let mtime;\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n}\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;\n"]},"metadata":{},"sourceType":"script"}