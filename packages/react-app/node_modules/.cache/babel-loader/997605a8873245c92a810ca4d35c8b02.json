{"ast":null,"code":"var _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('stream'),\n    Transform = _require.Transform;\n\nmodule.exports = function (KeccakState) {\n  return /*#__PURE__*/function (_Transform) {\n    \"use strict\";\n\n    _inherits(Keccak, _Transform);\n\n    var _super = _createSuper(Keccak);\n\n    function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {\n      var _this;\n\n      _classCallCheck(this, Keccak);\n\n      _this = _super.call(this, options);\n      _this._rate = rate;\n      _this._capacity = capacity;\n      _this._delimitedSuffix = delimitedSuffix;\n      _this._hashBitLength = hashBitLength;\n      _this._options = options;\n      _this._state = new KeccakState();\n\n      _this._state.initialize(rate, capacity);\n\n      _this._finalized = false;\n      return _this;\n    }\n\n    _createClass(Keccak, [{\n      key: \"_transform\",\n      value: function _transform(chunk, encoding, callback) {\n        var error = null;\n\n        try {\n          this.update(chunk, encoding);\n        } catch (err) {\n          error = err;\n        }\n\n        callback(error);\n      }\n    }, {\n      key: \"_flush\",\n      value: function _flush(callback) {\n        var error = null;\n\n        try {\n          this.push(this.digest());\n        } catch (err) {\n          error = err;\n        }\n\n        callback(error);\n      }\n    }, {\n      key: \"update\",\n      value: function update(data, encoding) {\n        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n        if (this._finalized) throw new Error('Digest already called');\n        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n        this._state.absorb(data);\n\n        return this;\n      }\n    }, {\n      key: \"digest\",\n      value: function digest(encoding) {\n        if (this._finalized) throw new Error('Digest already called');\n        this._finalized = true;\n        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n\n        var digest = this._state.squeeze(this._hashBitLength / 8);\n\n        if (encoding !== undefined) digest = digest.toString(encoding);\n\n        this._resetState();\n\n        return digest;\n      } // remove result from memory\n\n    }, {\n      key: \"_resetState\",\n      value: function _resetState() {\n        this._state.initialize(this._rate, this._capacity);\n\n        return this;\n      } // because sometimes we need hash right now and little later\n\n    }, {\n      key: \"_clone\",\n      value: function _clone() {\n        var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n\n        this._state.copy(clone._state);\n\n        clone._finalized = this._finalized;\n        return clone;\n      }\n    }]);\n\n    return Keccak;\n  }(Transform);\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/walletlink/dist/vendor-js/keccak/lib/api/keccak.js"],"names":["require","Transform","module","exports","KeccakState","rate","capacity","delimitedSuffix","hashBitLength","options","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","chunk","encoding","callback","error","update","err","push","digest","data","Buffer","isBuffer","TypeError","Error","from","absorb","absorbLastFewBits","squeeze","undefined","toString","_resetState","clone","Keccak","copy"],"mappings":"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","sourcesContent":["const { Transform } = require('stream')\n\nmodule.exports = (KeccakState) => class Keccak extends Transform {\n  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    let digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  _resetState () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone () {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n}\n"]},"metadata":{},"sourceType":"script"}