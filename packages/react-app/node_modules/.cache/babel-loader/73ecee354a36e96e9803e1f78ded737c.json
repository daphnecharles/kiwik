{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom) dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";else dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else {\n      // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose) cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function (template, callback, options) {\n    if (!options) options = {};\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false,\n        me = this;\n\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0],\n        button;\n\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput) CodeMirror.on(inp, \"input\", function (e) {\n        options.onInput(e, inp.value, close);\n      });\n      if (options.onKeyUp) CodeMirror.on(inp, \"keyup\", function (e) {\n        options.onKeyUp(e, inp.value, close);\n      });\n      CodeMirror.on(inp, \"keydown\", function (e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) {\n          return;\n        }\n\n        if (e.keyCode == 27 || options.closeOnEnter !== false && e.keyCode == 13) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n      if (options.closeOnBlur !== false) CodeMirror.on(dialog, \"focusout\", function (evt) {\n        if (evt.relatedTarget !== null) close();\n      });\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function () {\n        close();\n        me.focus();\n      });\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n      button.focus();\n    }\n\n    return close;\n  });\n  CodeMirror.defineExtension(\"openConfirm\", function (template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false,\n        me = this,\n        blurring = 1;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n\n    buttons[0].focus();\n\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n\n      (function (callback) {\n        CodeMirror.on(b, \"click\", function (e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n\n      CodeMirror.on(b, \"blur\", function () {\n        --blurring;\n        setTimeout(function () {\n          if (blurring <= 0) close();\n        }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function () {\n        ++blurring;\n      });\n    }\n  });\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n\n  CodeMirror.defineExtension(\"openNotification\", function (template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false,\n        doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function (e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n    if (duration) doneTimer = setTimeout(close, duration);\n    return close;\n  });\n});","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/codemirror/addon/dialog/dialog.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","dialogDiv","cm","template","bottom","wrap","getWrapperElement","dialog","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","getElementsByTagName","button","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","evt","relatedTarget","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(dialog, \"focusout\", function (evt) {\n        if (evt.relatedTarget !== null) close();\n      });\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n"]},"metadata":{},"sourceType":"script"}