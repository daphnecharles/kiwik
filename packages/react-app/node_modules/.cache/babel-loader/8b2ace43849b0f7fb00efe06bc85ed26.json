{"ast":null,"code":"\"use strict\"; // This gets overridden by rollup\n\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport var logger = new Logger(version);\nexport var Wordlist = /*#__PURE__*/function () {\n  function Wordlist(locale) {\n    _classCallCheck(this, Wordlist);\n\n    logger.checkAbstract(this instanceof Wordlist ? this.constructor : void 0, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  } // Subclasses may override this\n\n\n  _createClass(Wordlist, [{\n    key: \"split\",\n    value: function split(mnemonic) {\n      return mnemonic.toLowerCase().split(/ +/g);\n    } // Subclasses may override this\n\n  }, {\n    key: \"join\",\n    value: function join(words) {\n      return words.join(\" \");\n    }\n  }], [{\n    key: \"check\",\n    value: function check(wordlist) {\n      var words = [];\n\n      for (var i = 0; i < 2048; i++) {\n        var word = wordlist.getWord(i);\n        /* istanbul ignore if */\n\n        if (i !== wordlist.getWordIndex(word)) {\n          return \"0x\";\n        }\n\n        words.push(word);\n      }\n\n      return id(words.join(\"\\n\") + \"\\n\");\n    }\n  }, {\n    key: \"register\",\n    value: function register(lang, name) {\n      if (!name) {\n        name = lang.locale;\n      }\n      /* istanbul ignore if */\n\n\n      if (exportWordlist) {\n        try {\n          var anyGlobal = window;\n\n          if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n            if (!anyGlobal._ethers.wordlists[name]) {\n              defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n            }\n          }\n        } catch (error) {}\n      }\n    }\n  }]);\n\n  return Wordlist;\n}();","map":{"version":3,"sources":["../src.ts/wordlist.ts"],"names":[],"mappings":"AAAA,a,CAEA;;;;AACA,IAAM,cAAc,GAAG,KAAvB;AAEA,SAAS,EAAT,QAAmB,qBAAnB;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,OAAO,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEP,WAAsB,QAAtB;AAGI,oBAAY,MAAZ,EAA0B;AAAA;;AACtB,IAAA,MAAM,CAAC,aAAP,uDAAiC,QAAjC;AACA,IAAA,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,CAAd;AACH,GANL,CAWI;;;AAXJ;AAAA;AAAA,WAYI,eAAM,QAAN,EAAsB;AAClB,aAAO,QAAQ,CAAC,WAAT,GAAuB,KAAvB,CAA6B,KAA7B,CAAP;AACH,KAdL,CAgBI;;AAhBJ;AAAA;AAAA,WAiBI,cAAK,KAAL,EAAyB;AACrB,aAAO,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;AACH;AAnBL;AAAA;AAAA,WAqBI,eAAa,QAAb,EAA+B;AAC3B,UAAM,KAAK,GAAG,EAAd;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AAC3B,YAAM,IAAI,GAAG,QAAQ,CAAC,OAAT,CAAiB,CAAjB,CAAb;AACA;;AACA,YAAI,CAAC,KAAK,QAAQ,CAAC,YAAT,CAAsB,IAAtB,CAAV,EAAuC;AAAE,iBAAO,IAAP;AAAc;;AACvD,QAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACH;;AACD,aAAO,EAAE,CAAC,KAAK,CAAC,IAAN,CAAW,IAAX,IAAmB,IAApB,CAAT;AACH;AA9BL;AAAA;AAAA,WAgCI,kBAAgB,IAAhB,EAAgC,IAAhC,EAA6C;AACzC,UAAI,CAAC,IAAL,EAAW;AAAE,QAAA,IAAI,GAAG,IAAI,CAAC,MAAZ;AAAqB;AAElC;;;AACA,UAAI,cAAJ,EAAoB;AAChB,YAAI;AACA,cAAM,SAAS,GAAI,MAAnB;;AACA,cAAI,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,SAA3C,EAAsD;AAClD,gBAAI,CAAC,SAAS,CAAC,OAAV,CAAkB,SAAlB,CAA4B,IAA5B,CAAL,EAAwC;AACnC,cAAA,cAAc,CAAC,SAAS,CAAC,OAAV,CAAkB,SAAnB,EAA8B,IAA9B,EAAoC,IAApC,CAAd;AACJ;AACJ;AACJ,SAPD,CAOE,OAAO,KAAP,EAAc,CAAG;AACtB;AACJ;AA9CL;;AAAA;AAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map"]},"metadata":{},"sourceType":"module"}