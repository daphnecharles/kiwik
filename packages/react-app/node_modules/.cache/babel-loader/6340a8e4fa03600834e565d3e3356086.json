{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\n/**\n * Gets a tokenlist (see more at https://tokenlists.org/), returning the .tokens only\n *\n * ~ How can I use? ~\n  const tokenList = useTokenList(); <- default returns the Unsiwap tokens\n  const tokenList = useTokenList(\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\");\n * @param tokenListUri (string)\n * @param chainId (number)\n * @returns (TokenInfo[])\n */\n\nexport var useTokenList = function useTokenList() {\n  var tokenListUri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https://gateway.ipfs.io/ipns/tokens.uniswap.org';\n  var chainId = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tokenList = _useState2[0],\n      setTokenList = _useState2[1];\n\n  useEffect(function () {\n    var getTokenList = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tokenListResp, tokenInfo;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios(tokenListUri);\n\n              case 3:\n                tokenListResp = _context.sent.data;\n\n                if (tokenListResp != null) {\n                  tokenInfo = [];\n\n                  if (chainId) {\n                    tokenInfo = tokenListResp.tokens.filter(function (t) {\n                      return t.chainId === chainId;\n                    });\n                  } else {\n                    tokenInfo = tokenListResp.tokens;\n                  }\n\n                  setTokenList(tokenInfo);\n                }\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function getTokenList() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    void getTokenList();\n  }, [chainId, tokenListUri]);\n  return tokenList;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/dapps/dex/useTokenList.js"],"names":["axios","useState","useEffect","useTokenList","tokenListUri","chainId","tokenList","setTokenList","getTokenList","tokenListResp","data","tokenInfo","tokens","filter","t","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAA+E;AAAA,MAA9EC,YAA8E,uEAA/D,iDAA+D;AAAA,MAAZC,OAAY;;AACvG,kBAAkCJ,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMM,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEgBR,KAAK,CAACI,YAAD,CAFrB;;AAAA;AAEPK,gBAAAA,aAFO,iBAEqCC,IAFrC;;AAGb,oBAAID,aAAa,IAAI,IAArB,EAA2B;AACnBE,kBAAAA,SADmB,GACP,EADO;;AAEvB,sBAAIN,OAAJ,EAAa;AACTM,oBAAAA,SAAS,GAAGF,aAAa,CAACG,MAAd,CAAqBC,MAArB,CAA4B,UAACC,CAAD,EAAO;AAC3C,6BAAOA,CAAC,CAACT,OAAF,KAAcA,OAArB;AACH,qBAFW,CAAZ;AAGH,mBAJD,MAKK;AACDM,oBAAAA,SAAS,GAAGF,aAAa,CAACG,MAA1B;AACH;;AACDL,kBAAAA,YAAY,CAACI,SAAD,CAAZ;AACH;;AAdY;AAAA;;AAAA;AAAA;AAAA;AAiBbI,gBAAAA,OAAO,CAACC,GAAR;;AAjBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZR,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAoBA,SAAKA,YAAY,EAAjB;AACH,GAtBQ,EAsBN,CAACH,OAAD,EAAUD,YAAV,CAtBM,CAAT;AAuBA,SAAOE,SAAP;AACH,CA1BM","sourcesContent":["import axios from 'axios';\nimport { useState, useEffect } from 'react';\n/**\n * Gets a tokenlist (see more at https://tokenlists.org/), returning the .tokens only\n *\n * ~ How can I use? ~\n  const tokenList = useTokenList(); <- default returns the Unsiwap tokens\n  const tokenList = useTokenList(\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\");\n * @param tokenListUri (string)\n * @param chainId (number)\n * @returns (TokenInfo[])\n */\nexport const useTokenList = (tokenListUri = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org', chainId) => {\n    const [tokenList, setTokenList] = useState([]);\n    useEffect(() => {\n        const getTokenList = async () => {\n            try {\n                const tokenListResp = (await axios(tokenListUri)).data;\n                if (tokenListResp != null) {\n                    let tokenInfo = [];\n                    if (chainId) {\n                        tokenInfo = tokenListResp.tokens.filter((t) => {\n                            return t.chainId === chainId;\n                        });\n                    }\n                    else {\n                        tokenInfo = tokenListResp.tokens;\n                    }\n                    setTokenList(tokenInfo);\n                }\n            }\n            catch (e) {\n                console.log(e);\n            }\n        };\n        void getTokenList();\n    }, [chainId, tokenListUri]);\n    return tokenList;\n};\n"]},"metadata":{},"sourceType":"module"}