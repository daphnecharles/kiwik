{"ast":null,"code":"'use strict';\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\n\nvar _regeneratorRuntime = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction browserReadableStreamToIt(_x) {\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\n\nfunction _browserReadableStreamToIt() {\n  _browserReadableStreamToIt = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream) {\n    var options,\n        reader,\n        result,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            reader = stream.getReader();\n            _context.prev = 2;\n\n          case 3:\n            if (!true) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 6;\n            return _awaitAsyncGenerator(reader.read());\n\n          case 6:\n            result = _context.sent;\n\n            if (!result.done) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 9:\n            _context.next = 11;\n            return result.value;\n\n          case 11:\n            _context.next = 3;\n            break;\n\n          case 13:\n            _context.prev = 13;\n\n            if (options.preventCancel !== true) {\n              reader.cancel();\n            }\n\n            reader.releaseLock();\n            return _context.finish(13);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2,, 13, 17]]);\n  }));\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\n\nmodule.exports = browserReadableStreamToIt;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/browser-readablestream-to-it/index.js"],"names":["browserReadableStreamToIt","stream","options","reader","getReader","read","result","done","value","preventCancel","cancel","releaseLock","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;SACiBA,yB;;;;;0FAAjB,iBAA4CC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoDC,YAAAA,OAApD,2DAA8D,EAA9D;AACQC,YAAAA,MADR,GACiBF,MAAM,CAACG,SAAP,EADjB;AAAA;;AAAA;AAAA,iBAIW,IAJX;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAK2BD,MAAM,CAACE,IAAP,EAL3B;;AAAA;AAKYC,YAAAA,MALZ;;AAAA,iBAOUA,MAAM,CAACC,IAPjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAWM,mBAAMD,MAAM,CAACE,KAAb;;AAXN;AAAA;AAAA;;AAAA;AAAA;;AAcI,gBAAIN,OAAO,CAACO,aAAR,KAA0B,IAA9B,EAAoC;AAClCN,cAAAA,MAAM,CAACO,MAAP;AACD;;AAEDP,YAAAA,MAAM,CAACQ,WAAP;AAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBAC,MAAM,CAACC,OAAP,GAAiBb,yBAAjB","sourcesContent":["'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n"]},"metadata":{},"sourceType":"script"}