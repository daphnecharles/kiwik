{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport function generateKey(_x) {\n  return _generateKey.apply(this, arguments);\n}\n\nfunction _generateKey() {\n  _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(length) {\n    var _length, bytes, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _length = (length || 256) / 8;\n            bytes = crypto.randomBytes(_length);\n            result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _generateKey.apply(this, arguments);\n}\n\nexport function verifyHmac(_x2, _x3) {\n  return _verifyHmac.apply(this, arguments);\n}\n\nfunction _verifyHmac() {\n  _verifyHmac = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload, key) {\n    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            hmac = encoding.hexToArray(payload.hmac);\n            hmacHex = encoding.arrayToHex(hmac, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context2.next = 7;\n            return crypto.hmacSha256Sign(key, unsigned);\n\n          case 7:\n            chmac = _context2.sent;\n            chmacHex = encoding.arrayToHex(chmac, false);\n\n            if (!(encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex))) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 11:\n            return _context2.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _verifyHmac.apply(this, arguments);\n}\n\nexport function encrypt(_x4, _x5, _x6) {\n  return _encrypt.apply(this, arguments);\n}\n\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, key, providedIv) {\n    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n            _context3.t0 = providedIv;\n\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 5;\n            return generateKey(128);\n\n          case 5:\n            _context3.t0 = _context3.sent;\n\n          case 6:\n            ivArrayBuffer = _context3.t0;\n            iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n            ivHex = encoding.arrayToHex(iv, false);\n            contentString = JSON.stringify(data);\n            content = encoding.utf8ToArray(contentString);\n            _context3.next = 13;\n            return crypto.aesCbcEncrypt(iv, _key, content);\n\n          case 13:\n            cipherText = _context3.sent;\n            cipherTextHex = encoding.arrayToHex(cipherText, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context3.next = 18;\n            return crypto.hmacSha256Sign(_key, unsigned);\n\n          case 18:\n            hmac = _context3.sent;\n            hmacHex = encoding.arrayToHex(hmac, false);\n            return _context3.abrupt(\"return\", {\n              data: cipherTextHex,\n              hmac: hmacHex,\n              iv: ivHex\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encrypt.apply(this, arguments);\n}\n\nexport function decrypt(_x7, _x8) {\n  return _decrypt.apply(this, arguments);\n}\n\nfunction _decrypt() {\n  _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload, key) {\n    var _key, verified, cipherText, iv, buffer, utf8, data;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n\n            if (_key) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new Error(\"Missing key: required for decryption\");\n\n          case 3:\n            _context4.next = 5;\n            return verifyHmac(payload, _key);\n\n          case 5:\n            verified = _context4.sent;\n\n            if (verified) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            _context4.next = 12;\n            return crypto.aesCbcDecrypt(iv, _key, cipherText);\n\n          case 12:\n            buffer = _context4.sent;\n            utf8 = encoding.arrayToUtf8(buffer);\n            _context4.prev = 14;\n            data = JSON.parse(utf8);\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](14);\n            return _context4.abrupt(\"return\", null);\n\n          case 21:\n            return _context4.abrupt(\"return\", data);\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 18]]);\n  }));\n  return _decrypt.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport async function generateKey(length) {\n    const _length = (length || 256) / 8;\n    const bytes = crypto.randomBytes(_length);\n    const result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n    return result;\n}\nexport async function verifyHmac(payload, key) {\n    const cipherText = encoding.hexToArray(payload.data);\n    const iv = encoding.hexToArray(payload.iv);\n    const hmac = encoding.hexToArray(payload.hmac);\n    const hmacHex = encoding.arrayToHex(hmac, false);\n    const unsigned = encoding.concatArrays(cipherText, iv);\n    const chmac = await crypto.hmacSha256Sign(key, unsigned);\n    const chmacHex = encoding.arrayToHex(chmac, false);\n    if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {\n        return true;\n    }\n    return false;\n}\nexport async function encrypt(data, key, providedIv) {\n    const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n    const ivArrayBuffer = providedIv || (await generateKey(128));\n    const iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n    const ivHex = encoding.arrayToHex(iv, false);\n    const contentString = JSON.stringify(data);\n    const content = encoding.utf8ToArray(contentString);\n    const cipherText = await crypto.aesCbcEncrypt(iv, _key, content);\n    const cipherTextHex = encoding.arrayToHex(cipherText, false);\n    const unsigned = encoding.concatArrays(cipherText, iv);\n    const hmac = await crypto.hmacSha256Sign(_key, unsigned);\n    const hmacHex = encoding.arrayToHex(hmac, false);\n    return {\n        data: cipherTextHex,\n        hmac: hmacHex,\n        iv: ivHex,\n    };\n}\nexport async function decrypt(payload, key) {\n    const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n    if (!_key) {\n        throw new Error(\"Missing key: required for decryption\");\n    }\n    const verified = await verifyHmac(payload, _key);\n    if (!verified) {\n        return null;\n    }\n    const cipherText = encoding.hexToArray(payload.data);\n    const iv = encoding.hexToArray(payload.iv);\n    const buffer = await crypto.aesCbcDecrypt(iv, _key, cipherText);\n    const utf8 = encoding.arrayToUtf8(buffer);\n    let data;\n    try {\n        data = JSON.parse(utf8);\n    }\n    catch (error) {\n        return null;\n    }\n    return data;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}