{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { Token, WETH, Fetcher, Route } from '@uniswap/sdk';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../..\";\n/**\n * Get the Exchange price of ETH/USD (extrapolated from WETH/DAI)\n * @param targetNetwork (TNetwork)\n * @param mainnetProvider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: price\n */\n\nexport var useExchangeEthPrice = function useExchangeEthPrice(targetNetwork, mainnetProvider) {\n  var pollTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      price = _useState2[0],\n      setPrice = _useState2[1];\n\n  var pollPrice = useCallback(function () {\n    var getPrice = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var network, DAI, pair, route;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (mainnetProvider) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                if (!targetNetwork.price) {\n                  _context.next = 8;\n                  break;\n                }\n\n                setPrice(targetNetwork.price);\n                _context.next = 17;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return mainnetProvider.getNetwork();\n\n              case 10:\n                network = _context.sent;\n                DAI = new Token(network ? network.chainId : 1, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18);\n                _context.next = 14;\n                return Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n\n              case 14:\n                pair = _context.sent;\n                route = new Route([pair], WETH[DAI.chainId]);\n                setPrice(parseFloat(route.midPrice.toSignificant(6)));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getPrice() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    void getPrice();\n  }, [targetNetwork.price, mainnetProvider]);\n  useOnRepetition(pollPrice, {\n    pollTime: pollTime,\n    provider: mainnetProvider\n  });\n  return price;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/dapps/dex/useExchangeEthPrice.js"],"names":["Token","WETH","Fetcher","Route","useCallback","useState","useOnRepetition","useExchangeEthPrice","targetNetwork","mainnetProvider","pollTime","price","setPrice","pollPrice","getPrice","getNetwork","network","DAI","chainId","fetchPairData","pair","route","parseFloat","midPrice","toSignificant","provider"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,KAA/B,QAA4C,cAA5C;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,aAAD,EAAgBC,eAAhB,EAAkD;AAAA,MAAjBC,QAAiB,uEAAN,CAAM;;AACjF,kBAA0BL,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,SAAS,GAAGT,WAAW,CAAC,YAAM;AAChC,QAAMU,QAAQ;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACRL,eADQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,qBAIJD,aAAa,CAACG,KAJV;AAAA;AAAA;AAAA;;AAKTC,gBAAAA,QAAQ,CAACJ,aAAa,CAACG,KAAf,CAAR;AALS;AAAA;;AAAA;AAAA;AAAA,uBAQaF,eAAe,CAACM,UAAhB,EARb;;AAAA;AAQHC,gBAAAA,OARG;AASHC,gBAAAA,GATG,GASG,IAAIjB,KAAJ,CAAUgB,OAAO,GAAGA,OAAO,CAACE,OAAX,GAAqB,CAAtC,EAAyC,4CAAzC,EAAuF,EAAvF,CATH;AAAA;AAAA,uBAUUhB,OAAO,CAACiB,aAAR,CAAsBF,GAAtB,EAA2BhB,IAAI,CAACgB,GAAG,CAACC,OAAL,CAA/B,EAA8CT,eAA9C,CAVV;;AAAA;AAUHW,gBAAAA,IAVG;AAWHC,gBAAAA,KAXG,GAWK,IAAIlB,KAAJ,CAAU,CAACiB,IAAD,CAAV,EAAkBnB,IAAI,CAACgB,GAAG,CAACC,OAAL,CAAtB,CAXL;AAYTN,gBAAAA,QAAQ,CAACU,UAAU,CAACD,KAAK,CAACE,QAAN,CAAeC,aAAf,CAA6B,CAA7B,CAAD,CAAX,CAAR;;AAZS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAARV,QAAQ;AAAA;AAAA;AAAA,OAAd;;AAeA,SAAKA,QAAQ,EAAb;AACH,GAjB4B,EAiB1B,CAACN,aAAa,CAACG,KAAf,EAAsBF,eAAtB,CAjB0B,CAA7B;AAkBAH,EAAAA,eAAe,CAACO,SAAD,EAAY;AAAEH,IAAAA,QAAQ,EAARA,QAAF;AAAYe,IAAAA,QAAQ,EAAEhB;AAAtB,GAAZ,CAAf;AACA,SAAOE,KAAP;AACH,CAtBM","sourcesContent":["import { Token, WETH, Fetcher, Route } from '@uniswap/sdk';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../..\";\n/**\n * Get the Exchange price of ETH/USD (extrapolated from WETH/DAI)\n * @param targetNetwork (TNetwork)\n * @param mainnetProvider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: price\n */\nexport const useExchangeEthPrice = (targetNetwork, mainnetProvider, pollTime = 0) => {\n    const [price, setPrice] = useState(0);\n    const pollPrice = useCallback(() => {\n        const getPrice = async () => {\n            if (!mainnetProvider) {\n                return;\n            }\n            else if (targetNetwork.price) {\n                setPrice(targetNetwork.price);\n            }\n            else {\n                const network = await mainnetProvider.getNetwork();\n                const DAI = new Token(network ? network.chainId : 1, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18);\n                const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n                const route = new Route([pair], WETH[DAI.chainId]);\n                setPrice(parseFloat(route.midPrice.toSignificant(6)));\n            }\n        };\n        void getPrice();\n    }, [targetNetwork.price, mainnetProvider]);\n    useOnRepetition(pollPrice, { pollTime, provider: mainnetProvider });\n    return price;\n};\n"]},"metadata":{},"sourceType":"module"}