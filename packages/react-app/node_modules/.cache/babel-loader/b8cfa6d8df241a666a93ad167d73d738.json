{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport var ipfs = create({\n  host: \"ipfs.infura.io\",\n  port: \"5001\",\n  protocol: \"https\"\n});\nexport function addToIPFS(_x) {\n  return _addToIPFS.apply(this, arguments);\n}\n\nfunction _addToIPFS() {\n  _addToIPFS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n    var fileAdded;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ipfs.add(file);\n\n          case 2:\n            fileAdded = _context.sent;\n            return _context.abrupt(\"return\", fileAdded);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addToIPFS.apply(this, arguments);\n}\n\nexport function urlFromCID(cid) {\n  return \"https://ipfs.infura.io/ipfs/\".concat(cid);\n}\nexport function getFromIPFS(_x2) {\n  return _getFromIPFS.apply(this, arguments);\n}\n\nfunction _getFromIPFS() {\n  _getFromIPFS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(hashToGet) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file, content;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 2;\n            _iterator = _asyncIterator(ipfs.cat(hashToGet));\n\n          case 4:\n            _context2.next = 6;\n            return _iterator.next();\n\n          case 6:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 10;\n            return _step.value;\n\n          case 10:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 18;\n              break;\n            }\n\n            file = _value;\n            content = new BufferList(file).toString();\n            return _context2.abrupt(\"return\", content);\n\n          case 15:\n            _iteratorNormalCompletion = true;\n            _context2.next = 4;\n            break;\n\n          case 18:\n            _context2.next = 24;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.prev = 25;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 29;\n              break;\n            }\n\n            _context2.next = 29;\n            return _iterator.return();\n\n          case 29:\n            _context2.prev = 29;\n\n            if (!_didIteratorError) {\n              _context2.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context2.finish(29);\n\n          case 33:\n            return _context2.finish(24);\n\n          case 34:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _getFromIPFS.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/helpers/ipfs.js"],"names":["create","BufferList","ipfs","host","port","protocol","addToIPFS","file","add","fileAdded","urlFromCID","cid","getFromIPFS","hashToGet","cat","content","toString"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,UAAT,QAA2B,IAA3B;AACA,OAAO,IAAMC,IAAI,GAAGF,MAAM,CAAC;AAAEG,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE,MAAhC;AAAwCC,EAAAA,QAAQ,EAAE;AAAlD,CAAD,CAAnB;AAEP,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO,iBAAyBC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBL,IAAI,CAACM,GAAL,CAASD,IAAT,CADnB;;AAAA;AACCE,YAAAA,SADD;AAAA,6CAGEA,SAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,OAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAC9B,+CAAsCA,GAAtC;AACD;AAED,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO,kBAA2BC,SAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACoBX,IAAI,CAACY,GAAL,CAASD,SAAT,CADpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACYN,YAAAA,IADZ;AAEGQ,YAAAA,OAFH,GAEa,IAAId,UAAJ,CAAeM,IAAf,EAAqBS,QAArB,EAFb;AAAA,8CAIID,OAJJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}