{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\n\nvar graphql_1 = require(\"graphql\");\n\nvar jsonParse_1 = __importDefault(require(\"../utils/jsonParse\"));\n\ncodemirror_1.default.registerHelper('lint', 'graphql-variables', function (text, options, editor) {\n  if (!text) {\n    return [];\n  }\n\n  var ast;\n\n  try {\n    ast = jsonParse_1.default(text);\n  } catch (syntaxError) {\n    if (syntaxError.stack) {\n      throw syntaxError;\n    }\n\n    return [lintError(editor, syntaxError, syntaxError.message)];\n  }\n\n  var variableToType = options.variableToType;\n\n  if (!variableToType) {\n    return [];\n  }\n\n  return validateVariables(editor, variableToType, ast);\n});\n\nfunction validateVariables(editor, variableToType, variablesAST) {\n  var errors = [];\n  variablesAST.members.forEach(function (member) {\n    var _a;\n\n    if (member) {\n      var variableName = (_a = member.key) === null || _a === void 0 ? void 0 : _a.value;\n      var type = variableToType[variableName];\n\n      if (!type) {\n        errors.push(lintError(editor, member.key, \"Variable \\\"$\" + variableName + \"\\\" does not appear in any GraphQL query.\"));\n      } else {\n        validateValue(type, member.value).forEach(function (_a) {\n          var _b = __read(_a, 2),\n              node = _b[0],\n              message = _b[1];\n\n          errors.push(lintError(editor, node, message));\n        });\n      }\n    }\n  });\n  return errors;\n}\n\nfunction validateValue(type, valueAST) {\n  if (!type || !valueAST) {\n    return [];\n  }\n\n  if (type instanceof graphql_1.GraphQLNonNull) {\n    if (valueAST.kind === 'Null') {\n      return [[valueAST, \"Type \\\"\" + type + \"\\\" is non-nullable and cannot be null.\"]];\n    }\n\n    return validateValue(type.ofType, valueAST);\n  }\n\n  if (valueAST.kind === 'Null') {\n    return [];\n  }\n\n  if (type instanceof graphql_1.GraphQLList) {\n    var itemType_1 = type.ofType;\n\n    if (valueAST.kind === 'Array') {\n      var values = valueAST.values || [];\n      return mapCat(values, function (item) {\n        return validateValue(itemType_1, item);\n      });\n    }\n\n    return validateValue(itemType_1, valueAST);\n  }\n\n  if (type instanceof graphql_1.GraphQLInputObjectType) {\n    if (valueAST.kind !== 'Object') {\n      return [[valueAST, \"Type \\\"\" + type + \"\\\" must be an Object.\"]];\n    }\n\n    var providedFields_1 = Object.create(null);\n    var fieldErrors_1 = mapCat(valueAST.members, function (member) {\n      var _a;\n\n      var fieldName = (_a = member === null || member === void 0 ? void 0 : member.key) === null || _a === void 0 ? void 0 : _a.value;\n      providedFields_1[fieldName] = true;\n      var inputField = type.getFields()[fieldName];\n\n      if (!inputField) {\n        return [[member.key, \"Type \\\"\" + type + \"\\\" does not have a field \\\"\" + fieldName + \"\\\".\"]];\n      }\n\n      var fieldType = inputField ? inputField.type : undefined;\n      return validateValue(fieldType, member.value);\n    });\n    Object.keys(type.getFields()).forEach(function (fieldName) {\n      if (!providedFields_1[fieldName]) {\n        var fieldType = type.getFields()[fieldName].type;\n\n        if (fieldType instanceof graphql_1.GraphQLNonNull) {\n          fieldErrors_1.push([valueAST, \"Object of type \\\"\" + type + \"\\\" is missing required field \\\"\" + fieldName + \"\\\".\"]);\n        }\n      }\n    });\n    return fieldErrors_1;\n  }\n\n  if (type.name === 'Boolean' && valueAST.kind !== 'Boolean' || type.name === 'String' && valueAST.kind !== 'String' || type.name === 'ID' && valueAST.kind !== 'Number' && valueAST.kind !== 'String' || type.name === 'Float' && valueAST.kind !== 'Number' || type.name === 'Int' && (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value)) {\n    return [[valueAST, \"Expected value of type \\\"\" + type + \"\\\".\"]];\n  }\n\n  if (type instanceof graphql_1.GraphQLEnumType || type instanceof graphql_1.GraphQLScalarType) {\n    if (valueAST.kind !== 'String' && valueAST.kind !== 'Number' && valueAST.kind !== 'Boolean' && valueAST.kind !== 'Null' || isNullish(type.parseValue(valueAST.value))) {\n      return [[valueAST, \"Expected value of type \\\"\" + type + \"\\\".\"]];\n    }\n  }\n\n  return [];\n}\n\nfunction lintError(editor, node, message) {\n  return {\n    message: message,\n    severity: 'error',\n    type: 'validation',\n    from: editor.posFromIndex(node.start),\n    to: editor.posFromIndex(node.end)\n  };\n}\n\nfunction isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}\n\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}","map":{"version":3,"sources":["../src/variables/lint.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\nvar graphql_1 = require(\"graphql\");\nvar jsonParse_1 = __importDefault(require(\"../utils/jsonParse\"));\ncodemirror_1.default.registerHelper('lint', 'graphql-variables', function (text, options, editor) {\n    if (!text) {\n        return [];\n    }\n    var ast;\n    try {\n        ast = jsonParse_1.default(text);\n    }\n    catch (syntaxError) {\n        if (syntaxError.stack) {\n            throw syntaxError;\n        }\n        return [lintError(editor, syntaxError, syntaxError.message)];\n    }\n    var variableToType = options.variableToType;\n    if (!variableToType) {\n        return [];\n    }\n    return validateVariables(editor, variableToType, ast);\n});\nfunction validateVariables(editor, variableToType, variablesAST) {\n    var errors = [];\n    variablesAST.members.forEach(function (member) {\n        var _a;\n        if (member) {\n            var variableName = (_a = member.key) === null || _a === void 0 ? void 0 : _a.value;\n            var type = variableToType[variableName];\n            if (!type) {\n                errors.push(lintError(editor, member.key, \"Variable \\\"$\" + variableName + \"\\\" does not appear in any GraphQL query.\"));\n            }\n            else {\n                validateValue(type, member.value).forEach(function (_a) {\n                    var _b = __read(_a, 2), node = _b[0], message = _b[1];\n                    errors.push(lintError(editor, node, message));\n                });\n            }\n        }\n    });\n    return errors;\n}\nfunction validateValue(type, valueAST) {\n    if (!type || !valueAST) {\n        return [];\n    }\n    if (type instanceof graphql_1.GraphQLNonNull) {\n        if (valueAST.kind === 'Null') {\n            return [[valueAST, \"Type \\\"\" + type + \"\\\" is non-nullable and cannot be null.\"]];\n        }\n        return validateValue(type.ofType, valueAST);\n    }\n    if (valueAST.kind === 'Null') {\n        return [];\n    }\n    if (type instanceof graphql_1.GraphQLList) {\n        var itemType_1 = type.ofType;\n        if (valueAST.kind === 'Array') {\n            var values = valueAST.values || [];\n            return mapCat(values, function (item) { return validateValue(itemType_1, item); });\n        }\n        return validateValue(itemType_1, valueAST);\n    }\n    if (type instanceof graphql_1.GraphQLInputObjectType) {\n        if (valueAST.kind !== 'Object') {\n            return [[valueAST, \"Type \\\"\" + type + \"\\\" must be an Object.\"]];\n        }\n        var providedFields_1 = Object.create(null);\n        var fieldErrors_1 = mapCat(valueAST.members, function (member) {\n            var _a;\n            var fieldName = (_a = member === null || member === void 0 ? void 0 : member.key) === null || _a === void 0 ? void 0 : _a.value;\n            providedFields_1[fieldName] = true;\n            var inputField = type.getFields()[fieldName];\n            if (!inputField) {\n                return [\n                    [\n                        member.key,\n                        \"Type \\\"\" + type + \"\\\" does not have a field \\\"\" + fieldName + \"\\\".\",\n                    ],\n                ];\n            }\n            var fieldType = inputField ? inputField.type : undefined;\n            return validateValue(fieldType, member.value);\n        });\n        Object.keys(type.getFields()).forEach(function (fieldName) {\n            if (!providedFields_1[fieldName]) {\n                var fieldType = type.getFields()[fieldName].type;\n                if (fieldType instanceof graphql_1.GraphQLNonNull) {\n                    fieldErrors_1.push([\n                        valueAST,\n                        \"Object of type \\\"\" + type + \"\\\" is missing required field \\\"\" + fieldName + \"\\\".\",\n                    ]);\n                }\n            }\n        });\n        return fieldErrors_1;\n    }\n    if ((type.name === 'Boolean' && valueAST.kind !== 'Boolean') ||\n        (type.name === 'String' && valueAST.kind !== 'String') ||\n        (type.name === 'ID' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'String') ||\n        (type.name === 'Float' && valueAST.kind !== 'Number') ||\n        (type.name === 'Int' &&\n            (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value))) {\n        return [[valueAST, \"Expected value of type \\\"\" + type + \"\\\".\"]];\n    }\n    if (type instanceof graphql_1.GraphQLEnumType || type instanceof graphql_1.GraphQLScalarType) {\n        if ((valueAST.kind !== 'String' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'Boolean' &&\n            valueAST.kind !== 'Null') ||\n            isNullish(type.parseValue(valueAST.value))) {\n            return [[valueAST, \"Expected value of type \\\"\" + type + \"\\\".\"]];\n        }\n    }\n    return [];\n}\nfunction lintError(editor, node, message) {\n    return {\n        message: message,\n        severity: 'error',\n        type: 'validation',\n        from: editor.posFromIndex(node.start),\n        to: editor.posFromIndex(node.end),\n    };\n}\nfunction isNullish(value) {\n    return value === null || value === undefined || value !== value;\n}\nfunction mapCat(array, mapper) {\n    return Array.prototype.concat.apply([], array.map(mapper));\n}\n//# sourceMappingURL=lint.js.map"]},"metadata":{},"sourceType":"script"}