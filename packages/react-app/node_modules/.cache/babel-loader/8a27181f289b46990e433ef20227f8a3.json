{"ast":null,"code":"import { WordArray } from './core.js';\n\nvar parseLoop = function parseLoop(base64Str, base64StrLength, reverseMap) {\n  var words = [];\n  var nBytes = 0;\n\n  for (var i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n      var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n      var bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n      nBytes += 1;\n    }\n  }\n\n  return WordArray.create(words, nBytes);\n};\n/**\n * Base64 encoding strategy.\n */\n\n\nexport var Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes;\n    var map = this._map; // Clamp excess bits\n\n    wordArray.clamp(); // Convert\n\n    var base64Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 3) {\n      var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n      var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n      var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n      for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j += 1) {\n        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n      }\n    } // Add padding\n\n\n    var paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse: function parse(base64Str) {\n    // Shortcuts\n    var base64StrLength = base64Str.length;\n    var map = this._map;\n    var reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n\n      for (var j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    } // Ignore padding\n\n\n    var paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      var paddingIndex = base64Str.indexOf(paddingChar);\n\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    } // Convert\n\n\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/enc-base64.js"],"names":["WordArray","parseLoop","base64Str","base64StrLength","reverseMap","words","nBytes","i","bits1","charCodeAt","bits2","bitsCombined","create","Base64","stringify","wordArray","sigBytes","map","_map","clamp","base64Chars","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","_reverseMap","paddingIndex","indexOf"],"mappings":"AAAA,SACEA,SADF,QAEO,WAFP;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAYC,eAAZ,EAA6BC,UAA7B,EAA4C;AAC5D,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,eAApB,EAAqCI,CAAC,IAAI,CAA1C,EAA6C;AAC3C,QAAIA,CAAC,GAAG,CAAR,EAAW;AACT,UAAMC,KAAK,GAAGJ,UAAU,CAACF,SAAS,CAACO,UAAV,CAAqBF,CAAC,GAAG,CAAzB,CAAD,CAAV,IAA6CA,CAAC,GAAG,CAAL,GAAU,CAApE;AACA,UAAMG,KAAK,GAAGN,UAAU,CAACF,SAAS,CAACO,UAAV,CAAqBF,CAArB,CAAD,CAAV,KAAyC,IAAKA,CAAC,GAAG,CAAL,GAAU,CAArE;AACA,UAAMI,YAAY,GAAGH,KAAK,GAAGE,KAA7B;AACAL,MAAAA,KAAK,CAACC,MAAM,KAAK,CAAZ,CAAL,IAAuBK,YAAY,IAAK,KAAML,MAAM,GAAG,CAAV,GAAe,CAA5D;AACAA,MAAAA,MAAM,IAAI,CAAV;AACD;AACF;;AACD,SAAON,SAAS,CAACY,MAAV,CAAiBP,KAAjB,EAAwBC,MAAxB,CAAP;AACD,CAbD;AAeA;AACA;AACA;;;AACA,OAAO,IAAMO,MAAM,GAAG;AACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAdoB,qBAcVC,SAdU,EAcC;AACnB;AACA,QAAQV,KAAR,GAA4BU,SAA5B,CAAQV,KAAR;AAAA,QAAeW,QAAf,GAA4BD,SAA5B,CAAeC,QAAf;AACA,QAAMC,GAAG,GAAG,KAAKC,IAAjB,CAHmB,CAKnB;;AACAH,IAAAA,SAAS,CAACI,KAAV,GANmB,CAQnB;;AACA,QAAMC,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,QAApB,EAA8BT,CAAC,IAAI,CAAnC,EAAsC;AACpC,UAAMc,KAAK,GAAIhB,KAAK,CAACE,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAxD;AACA,UAAMe,KAAK,GAAIjB,KAAK,CAAEE,CAAC,GAAG,CAAL,KAAY,CAAb,CAAL,KAA0B,KAAM,CAACA,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,CAAhD,GAAsD,IAApE;AACA,UAAMgB,KAAK,GAAIlB,KAAK,CAAEE,CAAC,GAAG,CAAL,KAAY,CAAb,CAAL,KAA0B,KAAM,CAACA,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,CAAhD,GAAsD,IAApE;AAEA,UAAMiB,OAAO,GAAIH,KAAK,IAAI,EAAV,GAAiBC,KAAK,IAAI,CAA1B,GAA+BC,KAA/C;;AAEA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,CAAL,IAAYlB,CAAC,GAAGkB,CAAC,GAAG,IAAR,GAAeT,QAA3C,EAAsDS,CAAC,IAAI,CAA3D,EAA8D;AAC5DL,QAAAA,WAAW,CAACM,IAAZ,CAAiBT,GAAG,CAACU,MAAJ,CAAYH,OAAO,KAAM,KAAK,IAAIC,CAAT,CAAd,GAA8B,IAAzC,CAAjB;AACD;AACF,KApBkB,CAsBnB;;;AACA,QAAMG,WAAW,GAAGX,GAAG,CAACU,MAAJ,CAAW,EAAX,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOR,WAAW,CAACS,MAAZ,GAAqB,CAA5B,EAA+B;AAC7BT,QAAAA,WAAW,CAACM,IAAZ,CAAiBE,WAAjB;AACD;AACF;;AAED,WAAOR,WAAW,CAACU,IAAZ,CAAiB,EAAjB,CAAP;AACD,GA7CmB;;AA+CpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KA5DoB,iBA4Dd7B,SA5Dc,EA4DH;AACf;AACA,QAAIC,eAAe,GAAGD,SAAS,CAAC2B,MAAhC;AACA,QAAMZ,GAAG,GAAG,KAAKC,IAAjB;AACA,QAAId,UAAU,GAAG,KAAK4B,WAAtB;;AAEA,QAAI,CAAC5B,UAAL,EAAiB;AACf,WAAK4B,WAAL,GAAmB,EAAnB;AACA5B,MAAAA,UAAU,GAAG,KAAK4B,WAAlB;;AACA,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACY,MAAxB,EAAgCJ,CAAC,IAAI,CAArC,EAAwC;AACtCrB,QAAAA,UAAU,CAACa,GAAG,CAACR,UAAJ,CAAegB,CAAf,CAAD,CAAV,GAAgCA,CAAhC;AACD;AACF,KAZc,CAcf;;;AACA,QAAMG,WAAW,GAAGX,GAAG,CAACU,MAAJ,CAAW,EAAX,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACf,UAAMK,YAAY,GAAG/B,SAAS,CAACgC,OAAV,CAAkBN,WAAlB,CAArB;;AACA,UAAIK,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB9B,QAAAA,eAAe,GAAG8B,YAAlB;AACD;AACF,KArBc,CAuBf;;;AACA,WAAOhC,SAAS,CAACC,SAAD,EAAYC,eAAZ,EAA6BC,UAA7B,CAAhB;AACD,GArFmB;AAuFpBc,EAAAA,IAAI,EAAE;AAvFc,CAAf","sourcesContent":["import {\n  WordArray,\n} from './core.js';\n\nconst parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n      nBytes += 1;\n    }\n  }\n  return WordArray.create(words, nBytes);\n};\n\n/**\n * Base64 encoding strategy.\n */\nexport const Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n    const map = this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j += 1) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n};\n"]},"metadata":{},"sourceType":"module"}