{"ast":null,"code":"import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  var match = Object.values(STANDARD_ERROR_MAP).find(function (e) {\n    return e.code === code;\n  });\n\n  if (!match) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: \"Invalid error code type for JSON-RPC: \".concat(response.error.code)\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    var error = getErrorByCode(response.error.code);\n\n    if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: \"Invalid error code message for JSON-RPC: \".concat(response.error.code)\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(\"Unavailable \".concat(type, \" RPC url at \").concat(url)) : e;\n}","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"AACA,SACE,cADF,EAEE,uBAFF,EAGE,oBAHF,EAIE,kBAJF,QAKO,aALP;AAQA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;AAC5C,SAAO,IAAI,IAAI,uBAAuB,CAAC,CAAD,CAA/B,IAAsC,IAAI,IAAI,uBAAuB,CAAC,CAAD,CAA5E;AACD;AAED,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAA0C;AAC9C,SAAO,oBAAoB,CAAC,QAArB,CAA8B,IAA9B,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAuC;AAC3C,SAAO,OAAO,IAAP,KAAgB,QAAvB;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA+B;AACnC,MAAI,CAAC,MAAM,CAAC,IAAP,CAAY,kBAAZ,EAAgC,QAAhC,CAAyC,IAAzC,CAAL,EAAqD;AACnD,WAAO,kBAAkB,CAAC,cAAD,CAAzB;AACD;;AACD,SAAO,kBAAkB,CAAC,IAAD,CAAzB;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAqC;AACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,kBAAd,EAAkC,IAAlC,CAAuC,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,IAAF,KAAW,IAAf;AAAA,GAAxC,CAAd;;AACA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,kBAAkB,CAAC,cAAD,CAAzB;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,QAA/B,EAAqD;AACzD,MAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,IAAtB,KAA+B,WAAnC,EAAgD;AAC9C,WAAO;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,KAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,OAAtB,KAAkC,WAAtC,EAAmD;AACjD,WAAO;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,KAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAArB,EAA4C;AAC1C,WAAO;AACL,MAAA,KAAK,EAAE,KADF;AAEL,MAAA,KAAK,kDAA2C,QAAQ,CAAC,KAAT,CAAe,IAA1D;AAFA,KAAP;AAID;;AACD,MAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAAvB,EAA8C;AAC5C,QAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAA5B;;AACA,QACE,KAAK,CAAC,OAAN,KAAkB,kBAAkB,CAAC,cAAD,CAAlB,CAAmC,OAArD,IACA,QAAQ,CAAC,KAAT,CAAe,OAAf,KAA2B,KAAK,CAAC,OAFnC,EAGE;AACA,aAAO;AACL,QAAA,KAAK,EAAE,KADF;AAEL,QAAA,KAAK,qDAA8C,QAAQ,CAAC,KAAT,CAAe,IAA7D;AAFA,OAAP;AAID;AACF;;AACD,SAAO;AAAE,IAAA,KAAK,EAAE;AAAT,GAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,CAA/B,EAAyC,GAAzC,EAAsD,IAAtD,EAAkE;AACtE,SAAO,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,uBAAnB,KAA+C,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,sBAAnB,CAA/C,GACH,IAAI,KAAJ,uBAAyB,IAAzB,yBAA4C,GAA5C,EADG,GAEH,CAFJ;AAGD","sourceRoot":"","sourcesContent":["import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP, } from \"./constants\";\nexport function isServerErrorCode(code) {\n    return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n    return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nexport function getError(type) {\n    if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n        return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n    }\n    return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n    const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n    if (!match) {\n        return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n    }\n    return match;\n}\nexport function validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return { valid: false, error: \"Missing code for JSON-RPC error\" };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return { valid: false, error: \"Missing message for JSON-RPC error\" };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`,\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message &&\n            response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`,\n            };\n        }\n    }\n    return { valid: true };\n}\nexport function parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\")\n        ? new Error(`Unavailable ${type} RPC url at ${url}`)\n        : e;\n}\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"module"}