{"ast":null,"code":"import _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * Counter block mode.\n */\nimport { BlockCipherMode } from './cipher-core.js';\nexport var CTR = /*#__PURE__*/function (_BlockCipherMode) {\n  _inherits(CTR, _BlockCipherMode);\n\n  var _super = _createSuper(CTR);\n\n  function CTR() {\n    _classCallCheck(this, CTR);\n\n    return _super.apply(this, arguments);\n  }\n\n  return CTR;\n}(BlockCipherMode);\n\nCTR.Encryptor = /*#__PURE__*/function (_CTR) {\n  _inherits(_class, _CTR);\n\n  var _super2 = _createSuper(_class);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(_class, [{\n    key: \"processBlock\",\n    value: function processBlock(words, offset) {\n      var _words = words; // Shortcuts\n\n      var cipher = this._cipher;\n      var blockSize = cipher.blockSize;\n      var iv = this._iv;\n      var counter = this._counter; // Generate keystream\n\n      if (iv) {\n        this._counter = iv.slice(0);\n        counter = this._counter; // Remove IV for subsequent blocks\n\n        this._iv = undefined;\n      }\n\n      var keystream = counter.slice(0);\n      cipher.encryptBlock(keystream, 0); // Increment counter\n\n      counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0; // Encrypt\n\n      for (var i = 0; i < blockSize; i += 1) {\n        _words[offset + i] ^= keystream[i];\n      }\n    }\n  }]);\n\n  return _class;\n}(CTR);\n\nCTR.Decryptor = CTR.Encryptor;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/mode-ctr.js"],"names":["BlockCipherMode","CTR","Encryptor","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":";;;;;AAAA;AACA;AACA;AACA,SACEA,eADF,QAEO,kBAFP;AAIA,WAAaC,GAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAyBD,eAAzB;;AAEAC,GAAG,CAACC,SAAJ;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,sBAAaC,KAAb,EAAoBC,MAApB,EAA4B;AAC1B,UAAMC,MAAM,GAAGF,KAAf,CAD0B,CAG1B;;AACA,UAAMG,MAAM,GAAG,KAAKC,OAApB;AACA,UAAQC,SAAR,GAAsBF,MAAtB,CAAQE,SAAR;AACA,UAAMC,EAAE,GAAG,KAAKC,GAAhB;AACA,UAAIC,OAAO,GAAG,KAAKC,QAAnB,CAP0B,CAS1B;;AACA,UAAIH,EAAJ,EAAQ;AACN,aAAKG,QAAL,GAAgBH,EAAE,CAACI,KAAH,CAAS,CAAT,CAAhB;AACAF,QAAAA,OAAO,GAAG,KAAKC,QAAf,CAFM,CAIN;;AACA,aAAKF,GAAL,GAAWI,SAAX;AACD;;AACD,UAAMC,SAAS,GAAGJ,OAAO,CAACE,KAAR,CAAc,CAAd,CAAlB;AACAP,MAAAA,MAAM,CAACU,YAAP,CAAoBD,SAApB,EAA+B,CAA/B,EAlB0B,CAoB1B;;AACAJ,MAAAA,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAA0BG,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAAyB,CAA1B,GAA+B,CAAxD,CArB0B,CAuB1B;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,IAAI,CAApC,EAAuC;AACrCZ,QAAAA,MAAM,CAACD,MAAM,GAAGa,CAAV,CAAN,IAAsBF,SAAS,CAACE,CAAD,CAA/B;AACD;AACF;AA5BH;;AAAA;AAAA,EAA8BhB,GAA9B;;AA8BAA,GAAG,CAACiB,SAAJ,GAAgBjB,GAAG,CAACC,SAApB","sourcesContent":["/**\n * Counter block mode.\n */\nimport {\n  BlockCipherMode,\n} from './cipher-core.js';\n\nexport class CTR extends BlockCipherMode {\n}\nCTR.Encryptor = class extends CTR {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Increment counter\n    counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTR.Decryptor = CTR.Encryptor;\n"]},"metadata":{},"sourceType":"module"}