{"ast":null,"code":"var errorValues = require('./errorValues.json');\n\nvar FALLBACK_ERROR_CODE = require('./errorCodes.json').jsonRpc.internal;\n\nvar _require = require('./classes'),\n    JsonRpcError = _require.JsonRpcError;\n\nvar JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\nvar FALLBACK_MESSAGE = 'Unspecified error message. This is  bug, please report it.';\nvar FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * @param {number} code - The integer error code.\n * @param {string} fallbackMessage - The fallback message.\n * @return {string} The corresponding message or the fallback message.\n */\n\nfunction getMessageFromCode(code) {\n  var fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n\n  if (Number.isInteger(code)) {\n    var codeString = code.toString();\n    if (errorValues[codeString]) return errorValues[codeString].message;\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE; // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n\n  return fallbackMessage;\n}\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\n\n\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) return false;\n  var codeString = code.toString();\n  if (errorValues[codeString]) return true;\n  if (isJsonRpcServerError(code)) return true; // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false;\n}\n/**\n * Serializes the given error to an ETH JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\n\n\nfunction serializeError(error) {\n  var fallbackError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_ERROR;\n\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('fallbackError must contain integer number code and string message.');\n  }\n\n  if (typeof error === 'object' && error instanceof JsonRpcError) {\n    return error.serialize();\n  }\n\n  var serialized = {};\n\n  if (error && isValidCode(error.code)) {\n    serialized.code = error.code;\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message;\n      if (error.hasOwnProperty('data')) serialized.data = error.data;\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    serialized.message = error && error.message ? error.message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n\n  if (error && error.stack) serialized.stack = error.stack;\n  return serialized;\n} // Internal\n\n\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\n\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n\n  return error;\n} // Exports\n\n\nmodule.exports = {\n  getMessageFromCode: getMessageFromCode,\n  isValidCode: isValidCode,\n  serializeError: serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE: JSON_RPC_SERVER_ERROR_MESSAGE\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-json-rpc-errors/src/utils.js"],"names":["errorValues","require","FALLBACK_ERROR_CODE","jsonRpc","internal","JsonRpcError","JSON_RPC_SERVER_ERROR_MESSAGE","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","fallbackMessage","Number","isInteger","codeString","toString","isJsonRpcServerError","isValidCode","serializeError","error","fallbackError","Error","serialize","serialized","hasOwnProperty","data","originalError","assignOriginalError","stack","Array","isArray","Object","assign","module","exports"],"mappings":"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","sourcesContent":["\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').jsonRpc.internal\nconst { JsonRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is  bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * @param {number} code - The integer error code.\n * @param {string} fallbackMessage - The fallback message.\n * @return {string} The corresponding message or the fallback message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an ETH JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (typeof error === 'object' && error instanceof JsonRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n"]},"metadata":{},"sourceType":"script"}