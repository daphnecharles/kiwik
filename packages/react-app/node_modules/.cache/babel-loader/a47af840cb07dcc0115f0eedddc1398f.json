{"ast":null,"code":"import _get from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _construct from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport var Base = /*#__PURE__*/function () {\n  function Base() {\n    _classCallCheck(this, Base);\n  }\n\n  _createClass(Base, [{\n    key: \"mixIn\",\n    value:\n    /**\n     * Copies properties into this object.\n     *\n     * @param {Object} properties The properties to mix in.\n     *\n     * @example\n     *\n     *     MyType.mixIn({\n     *         field: 'value'\n     *     });\n     */\n    function mixIn(properties) {\n      return Object.assign(this, properties);\n    }\n    /**\n     * Creates a copy of this object.\n     *\n     * @return {Object} The clone.\n     *\n     * @example\n     *\n     *     var clone = instance.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new this.constructor();\n      Object.assign(clone, this);\n      return clone;\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * Extends this object and runs the init method.\n     * Arguments to create() will be passed to init().\n     *\n     * @return {Object} The new object.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var instance = MyType.create();\n     */\n    function create() {\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _construct(this, args);\n    }\n  }]);\n\n  return Base;\n}();\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\nexport var WordArray = /*#__PURE__*/function (_Base) {\n  _inherits(WordArray, _Base);\n\n  var _super = _createSuper(WordArray);\n\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  function WordArray() {\n    var _this;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 4;\n\n    _classCallCheck(this, WordArray);\n\n    _this = _super.call(this);\n    var typedArray = words; // Convert buffers to uint8\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    } // Convert other array views to uint8\n\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    } // Handle Uint8Array\n\n\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      var typedArrayByteLength = typedArray.byteLength; // Extract bytes\n\n      var _words = [];\n\n      for (var i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      } // Initialize this word array\n\n\n      _this.words = _words;\n      _this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      _this.words = words;\n      _this.sigBytes = sigBytes;\n    }\n\n    return _this;\n  }\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n\n\n  _createClass(WordArray, [{\n    key: \"toString\",\n    value:\n    /**\n     * Converts this word array to a string.\n     *\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return {string} The stringified word array.\n     *\n     * @example\n     *\n     *     var string = wordArray + '';\n     *     var string = wordArray.toString();\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n     */\n    function toString() {\n      var encoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Hex;\n      return encoder.stringify(this);\n    }\n    /**\n     * Concatenates a word array to this word array.\n     *\n     * @param {WordArray} wordArray The word array to append.\n     *\n     * @return {WordArray} This word array.\n     *\n     * @example\n     *\n     *     wordArray1.concat(wordArray2);\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat(wordArray) {\n      // Shortcuts\n      var thisWords = this.words;\n      var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;\n      var thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n      this.clamp(); // Concat\n\n      if (thisSigBytes % 4) {\n        // Copy one byte at a time\n        for (var i = 0; i < thatSigBytes; i += 1) {\n          var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n        }\n      } else {\n        // Copy one word at a time\n        for (var _i = 0; _i < thatSigBytes; _i += 4) {\n          thisWords[thisSigBytes + _i >>> 2] = thatWords[_i >>> 2];\n        }\n      }\n\n      this.sigBytes += thatSigBytes; // Chainable\n\n      return this;\n    }\n    /**\n     * Removes insignificant bits.\n     *\n     * @example\n     *\n     *     wordArray.clamp();\n     */\n\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      // Shortcuts\n      var words = this.words,\n          sigBytes = this.sigBytes; // Clamp\n\n      words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n      words.length = Math.ceil(sigBytes / 4);\n    }\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return {WordArray} The clone.\n     *\n     * @example\n     *\n     *     var clone = wordArray.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(WordArray.prototype), \"clone\", this).call(this);\n\n      clone.words = this.words.slice(0);\n      return clone;\n    }\n  }], [{\n    key: \"random\",\n    value: function random(nBytes) {\n      var words = [];\n\n      var r = function r(m_w) {\n        var _m_w = m_w;\n        var _m_z = 0x3ade68b1;\n        var mask = 0xffffffff;\n        return function () {\n          _m_z = 0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10) & mask;\n          _m_w = 0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10) & mask;\n          var result = (_m_z << 0x10) + _m_w & mask;\n          result /= 0x100000000;\n          result += 0.5;\n          return result * (Math.random() > 0.5 ? 1 : -1);\n        };\n      };\n\n      for (var i = 0, rcache; i < nBytes; i += 4) {\n        var _r = r((rcache || Math.random()) * 0x100000000);\n\n        rcache = _r() * 0x3ade67b7;\n        words.push(_r() * 0x100000000 | 0);\n      }\n\n      return new WordArray(words, nBytes);\n    }\n  }]);\n\n  return WordArray;\n}(Base);\n/**\n * Hex encoding strategy.\n */\n\nexport var Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var hexChars = [];\n\n    for (var i = 0; i < sigBytes; i += 1) {\n      var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse: function parse(hexStr) {\n    // Shortcut\n    var hexStrLength = hexStr.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  }\n};\n/**\n * Latin1 encoding strategy.\n */\n\nexport var Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var latin1Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 1) {\n      var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse: function parse(latin1Str) {\n    // Shortcut\n    var latin1StrLength = latin1Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n    }\n\n    return new WordArray(words, latin1StrLength);\n  }\n};\n/**\n * UTF-8 encoding strategy.\n */\n\nexport var Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse: function parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n};\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\n\nexport var BufferedBlockAlgorithm = /*#__PURE__*/function (_Base2) {\n  _inherits(BufferedBlockAlgorithm, _Base2);\n\n  var _super2 = _createSuper(BufferedBlockAlgorithm);\n\n  function BufferedBlockAlgorithm() {\n    var _this2;\n\n    _classCallCheck(this, BufferedBlockAlgorithm);\n\n    _this2 = _super2.call(this);\n    _this2._minBufferSize = 0;\n    return _this2;\n  }\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n\n\n  _createClass(BufferedBlockAlgorithm, [{\n    key: \"reset\",\n    value: function reset() {\n      // Initial values\n      this._data = new WordArray();\n      this._nDataBytes = 0;\n    }\n    /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * @param {WordArray|string} data\n     *\n     *     The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     */\n\n  }, {\n    key: \"_append\",\n    value: function _append(data) {\n      var m_data = data; // Convert string to WordArray, else assume WordArray already\n\n      if (typeof m_data === 'string') {\n        m_data = Utf8.parse(m_data);\n      } // Append\n\n\n      this._data.concat(m_data);\n\n      this._nDataBytes += m_data.sigBytes;\n    }\n    /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return {WordArray} The processed data.\n     *\n     * @example\n     *\n     *     var processedData = bufferedBlockAlgorithm._process();\n     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n     */\n\n  }, {\n    key: \"_process\",\n    value: function _process(doFlush) {\n      var processedWords; // Shortcuts\n\n      var data = this._data,\n          blockSize = this.blockSize;\n      var dataWords = data.words;\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4; // Count blocks ready\n\n      var nBlocksReady = dataSigBytes / blockSizeBytes;\n\n      if (doFlush) {\n        // Round up to include partial blocks\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        // Round down to include only full blocks,\n        // less the number of blocks that must remain in the buffer\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      } // Count words ready\n\n\n      var nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n      if (nWordsReady) {\n        for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n          // Perform concrete-algorithm logic\n          this._doProcessBlock(dataWords, offset);\n        } // Remove processed words\n\n\n        processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      } // Return processed words\n\n\n      return new WordArray(processedWords, nBytesReady);\n    }\n    /**\n     * Creates a copy of this object.\n     *\n     * @return {Object} The clone.\n     *\n     * @example\n     *\n     *     var clone = bufferedBlockAlgorithm.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(BufferedBlockAlgorithm.prototype), \"clone\", this).call(this);\n\n      clone._data = this._data.clone();\n      return clone;\n    }\n  }]);\n\n  return BufferedBlockAlgorithm;\n}(Base);\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\n\nexport var Hasher = /*#__PURE__*/function (_BufferedBlockAlgorit) {\n  _inherits(Hasher, _BufferedBlockAlgorit);\n\n  var _super3 = _createSuper(Hasher);\n\n  function Hasher(cfg) {\n    var _this3;\n\n    _classCallCheck(this, Hasher);\n\n    _this3 = _super3.call(this);\n    _this3.blockSize = 512 / 32;\n    /**\n     * Configuration options.\n     */\n\n    _this3.cfg = Object.assign(new Base(), cfg); // Set initial values\n\n    _this3.reset();\n\n    return _this3;\n  }\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  _createClass(Hasher, [{\n    key: \"reset\",\n    value:\n    /**\n     * Resets this hasher to its initial state.\n     *\n     * @example\n     *\n     *     hasher.reset();\n     */\n    function reset() {\n      // Reset data buffer\n      _get(_getPrototypeOf(Hasher.prototype), \"reset\", this).call(this); // Perform concrete-hasher logic\n\n\n      this._doReset();\n    }\n    /**\n     * Updates this hasher with a message.\n     *\n     * @param {WordArray|string} messageUpdate The message to append.\n     *\n     * @return {Hasher} This hasher.\n     *\n     * @example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(messageUpdate) {\n      // Append\n      this._append(messageUpdate); // Update the hash\n\n\n      this._process(); // Chainable\n\n\n      return this;\n    }\n    /**\n     * Finalizes the hash computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @example\n     *\n     *     var hash = hasher.finalize();\n     *     var hash = hasher.finalize('message');\n     *     var hash = hasher.finalize(wordArray);\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(messageUpdate) {\n      // Final message update\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      } // Perform concrete-hasher logic\n\n\n      var hash = this._doFinalize();\n\n      return hash;\n    }\n  }], [{\n    key: \"_createHelper\",\n    value: function _createHelper(SubHasher) {\n      return function (message, cfg) {\n        return new SubHasher(cfg).finalize(message);\n      };\n    }\n    /**\n     * Creates a shortcut function to the HMAC's object interface.\n     *\n     * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n     *\n     * @return {Function} The shortcut function.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n     */\n\n  }, {\n    key: \"_createHmacHelper\",\n    value: function _createHmacHelper(SubHasher) {\n      return function (message, key) {\n        return new HMAC(SubHasher, key).finalize(message);\n      };\n    }\n  }]);\n\n  return Hasher;\n}(BufferedBlockAlgorithm);\n/**\n * HMAC algorithm.\n */\n\nexport var HMAC = /*#__PURE__*/function (_Base3) {\n  _inherits(HMAC, _Base3);\n\n  var _super4 = _createSuper(HMAC);\n\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  function HMAC(SubHasher, key) {\n    var _this4;\n\n    _classCallCheck(this, HMAC);\n\n    _this4 = _super4.call(this);\n    var hasher = new SubHasher();\n    _this4._hasher = hasher; // Convert string to WordArray, else assume WordArray already\n\n    var _key = key;\n\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    } // Shortcuts\n\n\n    var hasherBlockSize = hasher.blockSize;\n    var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    } // Clamp excess bits\n\n\n    _key.clamp(); // Clone key for inner and outer pads\n\n\n    var oKey = _key.clone();\n\n    _this4._oKey = oKey;\n\n    var iKey = _key.clone();\n\n    _this4._iKey = iKey; // Shortcuts\n\n    var oKeyWords = oKey.words;\n    var iKeyWords = iKey.words; // XOR keys with pad constants\n\n    for (var i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n    _this4.reset();\n\n    return _this4;\n  }\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n\n\n  _createClass(HMAC, [{\n    key: \"reset\",\n    value: function reset() {\n      // Shortcut\n      var hasher = this._hasher; // Reset\n\n      hasher.reset();\n      hasher.update(this._iKey);\n    }\n    /**\n     * Updates this HMAC with a message.\n     *\n     * @param {WordArray|string} messageUpdate The message to append.\n     *\n     * @return {HMAC} This HMAC instance.\n     *\n     * @example\n     *\n     *     hmacHasher.update('message');\n     *     hmacHasher.update(wordArray);\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(messageUpdate) {\n      this._hasher.update(messageUpdate); // Chainable\n\n\n      return this;\n    }\n    /**\n     * Finalizes the HMAC computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @example\n     *\n     *     var hmac = hmacHasher.finalize();\n     *     var hmac = hmacHasher.finalize('message');\n     *     var hmac = hmacHasher.finalize(wordArray);\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(messageUpdate) {\n      // Shortcut\n      var hasher = this._hasher; // Compute HMAC\n\n      var innerHash = hasher.finalize(messageUpdate);\n      hasher.reset();\n      var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n      return hmac;\n    }\n  }]);\n\n  return HMAC;\n}(Base);","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/core.js"],"names":["Base","properties","Object","assign","clone","constructor","args","WordArray","words","sigBytes","length","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","encoder","Hex","stringify","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","Math","ceil","call","slice","nBytes","r","m_w","_m_w","_m_z","mask","result","random","rcache","_r","push","hexChars","bite","toString","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","_minBufferSize","_data","_nDataBytes","data","m_data","concat","doFlush","processedWords","blockSize","dataWords","dataSigBytes","blockSizeBytes","nBlocksReady","max","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Hasher","cfg","reset","_doReset","messageUpdate","_append","_process","hash","_doFinalize","SubHasher","message","finalize","key","HMAC","hasher","_hasher","_key","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","update","innerHash","hmac"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n}\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n\n    let typedArray = words;\n    // Convert buffers to uint8\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    // Convert other array views to uint8\n    if (\n      typedArray instanceof Int8Array\n      || typedArray instanceof Uint8ClampedArray\n      || typedArray instanceof Int16Array\n      || typedArray instanceof Uint16Array\n      || typedArray instanceof Int32Array\n      || typedArray instanceof Uint32Array\n      || typedArray instanceof Float32Array\n      || typedArray instanceof Float64Array\n    ) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    // Handle Uint8Array\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength;\n\n      // Extract bytes\n      const _words = [];\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n      }\n\n      // Initialize this word array\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  static random(nBytes) {\n    const words = [];\n\n    const r = (m_w) => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n\n      return () => {\n        _m_z = (0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10)) & mask;\n        _m_w = (0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10)) & mask;\n        let result = ((_m_z << 0x10) + _m_w) & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push((_r() * 0x100000000) | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes;\n\n    // Clamp excess bits\n    this.clamp();\n\n    // Concat\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n      }\n    }\n    this.sigBytes += thatSigBytes;\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n  clamp() {\n    // Shortcuts\n    const { words, sigBytes } = this;\n\n    // Clamp\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n    words.length = Math.ceil(sigBytes / 4);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n\n    return clone;\n  }\n}\n\n/**\n * Hex encoding strategy.\n */\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  },\n};\n\n/**\n * Latin1 encoding strategy.\n */\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const latin1Chars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n\n    return new WordArray(words, latin1StrLength);\n  },\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  },\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n  _append(data) {\n    let m_data = data;\n\n    // Convert string to WordArray, else assume WordArray already\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    }\n\n    // Append\n    this._data.concat(m_data);\n    this._nDataBytes += m_data.sigBytes;\n  }\n\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n  _process(doFlush) {\n    let processedWords;\n\n    // Shortcuts\n    const { _data: data, blockSize } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count blocks ready\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n\n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n\n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n    // Process blocks\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      }\n\n      // Remove processed words\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    }\n\n    // Return processed words\n    return new WordArray(processedWords, nBytesReady);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n\n    this.blockSize = 512 / 32;\n\n    /**\n     * Configuration options.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate);\n\n    // Update the hash\n    this._process();\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n\n    // Perform concrete-hasher logic\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n}\n\n/**\n * HMAC algorithm.\n */\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n\n    const hasher = new SubHasher();\n    this._hasher = hasher;\n\n    // Convert string to WordArray, else assume WordArray already\n    let _key = key;\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    }\n\n    // Shortcuts\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n\n    // Allow arbitrary length keys\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    }\n\n    // Clamp excess bits\n    _key.clamp();\n\n    // Clone key for inner and outer pads\n    const oKey = _key.clone();\n    this._oKey = oKey;\n    const iKey = _key.clone();\n    this._iKey = iKey;\n\n    // Shortcuts\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n\n    // XOR keys with pad constants\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n  reset() {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Reset\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate);\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Compute HMAC\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n    return hmac;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}