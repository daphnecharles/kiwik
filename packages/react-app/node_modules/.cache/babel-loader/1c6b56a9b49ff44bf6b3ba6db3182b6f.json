{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current nonce of the address provided\n * @param provider (TEthersProvider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) nonce\n */\n\nexport var useNonce = function useNonce(provider, address) {\n  var pollTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      nonce = _useState2[0],\n      setNonce = _useState2[1];\n\n  var getTransactionCount = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var nextNonce;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return provider === null || provider === void 0 ? void 0 : provider.getTransactionCount(address);\n\n          case 2:\n            nextNonce = _context.sent;\n\n            if (nextNonce !== nonce && nextNonce >= 0) {\n              setNonce(nextNonce);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [nonce]);\n  useOnRepetition(getTransactionCount, {\n    pollTime: pollTime,\n    leadingTrigger: provider != null\n  });\n  return nonce;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/eth-hooks/useNonce.js"],"names":["useCallback","useState","useOnRepetition","useNonce","provider","address","pollTime","nonce","setNonce","getTransactionCount","nextNonce","leadingTrigger"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,OAAX,EAAqC;AAAA,MAAjBC,QAAiB,uEAAN,CAAM;;AACzD,kBAA0BL,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,mBAAmB,GAAGT,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXI,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACK,mBAAT,CAA6BJ,OAA7B,CADzC;;AAAA;AAC9BK,YAAAA,SAD8B;;AAEpC,gBAAIA,SAAS,KAAKH,KAAd,IAAuBG,SAAS,IAAI,CAAxC,EAA2C;AACvCF,cAAAA,QAAQ,CAACE,SAAD,CAAR;AACH;;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAKpC,CAACH,KAAD,CALoC,CAAvC;AAMAL,EAAAA,eAAe,CAACO,mBAAD,EAAsB;AAAEH,IAAAA,QAAQ,EAARA,QAAF;AAAYK,IAAAA,cAAc,EAAEP,QAAQ,IAAI;AAAxC,GAAtB,CAAf;AACA,SAAOG,KAAP;AACH,CAVM","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current nonce of the address provided\n * @param provider (TEthersProvider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) nonce\n */\nexport const useNonce = (provider, address, pollTime = 0) => {\n    const [nonce, setNonce] = useState(0);\n    const getTransactionCount = useCallback(async () => {\n        const nextNonce = await (provider === null || provider === void 0 ? void 0 : provider.getTransactionCount(address));\n        if (nextNonce !== nonce && nextNonce >= 0) {\n            setNonce(nextNonce);\n        }\n    }, [nonce]);\n    useOnRepetition(getTransactionCount, { pollTime, leadingTrigger: provider != null });\n    return nonce;\n};\n"]},"metadata":{},"sourceType":"module"}