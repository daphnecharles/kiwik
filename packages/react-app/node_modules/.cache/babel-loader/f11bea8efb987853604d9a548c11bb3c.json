{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeReference = exports.getEnumValueReference = exports.getArgumentReference = exports.getDirectiveReference = exports.getFieldReference = void 0;\n\nvar graphql_1 = require(\"graphql\");\n\nfunction getFieldReference(typeInfo) {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nexports.getFieldReference = getFieldReference;\n\nfunction getDirectiveReference(typeInfo) {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef\n  };\n}\n\nexports.getDirectiveReference = getDirectiveReference;\n\nfunction getArgumentReference(typeInfo) {\n  return typeInfo.directiveDef ? {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    directive: typeInfo.directiveDef\n  } : {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nexports.getArgumentReference = getArgumentReference;\n\nfunction getEnumValueReference(typeInfo) {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue || undefined,\n    type: typeInfo.inputType ? graphql_1.getNamedType(typeInfo.inputType) : undefined\n  };\n}\n\nexports.getEnumValueReference = getEnumValueReference;\n\nfunction getTypeReference(typeInfo, type) {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type\n  };\n}\n\nexports.getTypeReference = getTypeReference;\n\nfunction isMetaField(fieldDef) {\n  return fieldDef.name.slice(0, 2) === '__';\n}","map":{"version":3,"sources":["../src/utils/SchemaReference.ts"],"names":[],"mappings":";;;;;;;AASA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAuDA,SAAgB,iBAAhB,CAAkC,QAAlC,EAA+C;AAC7C,SAAO;AACL,IAAA,IAAI,EAAE,OADD;AAEL,IAAA,MAAM,EAAE,QAAQ,CAAC,MAFZ;AAGL,IAAA,KAAK,EAAE,QAAQ,CAAC,QAHX;AAIL,IAAA,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,QAAV,CAAX,GAAiC,IAAjC,GAAwC,QAAQ,CAAC;AAJlD,GAAP;AAMD;;AAPD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AASA,SAAgB,qBAAhB,CAAsC,QAAtC,EAAmD;AACjD,SAAO;AACL,IAAA,IAAI,EAAE,WADD;AAEL,IAAA,MAAM,EAAE,QAAQ,CAAC,MAFZ;AAGL,IAAA,SAAS,EAAE,QAAQ,CAAC;AAHf,GAAP;AAKD;;AAND,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAQA,SAAgB,oBAAhB,CAAqC,QAArC,EAAkD;AAChD,SAAO,QAAQ,CAAC,YAAT,GACH;AACE,IAAA,IAAI,EAAE,UADR;AAEE,IAAA,MAAM,EAAE,QAAQ,CAAC,MAFnB;AAGE,IAAA,QAAQ,EAAE,QAAQ,CAAC,MAHrB;AAIE,IAAA,SAAS,EAAE,QAAQ,CAAC;AAJtB,GADG,GAOH;AACE,IAAA,IAAI,EAAE,UADR;AAEE,IAAA,MAAM,EAAE,QAAQ,CAAC,MAFnB;AAGE,IAAA,QAAQ,EAAE,QAAQ,CAAC,MAHrB;AAIE,IAAA,KAAK,EAAE,QAAQ,CAAC,QAJlB;AAKE,IAAA,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,QAAV,CAAX,GAAiC,IAAjC,GAAwC,QAAQ,CAAC;AALzD,GAPJ;AAcD;;AAfD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAiBA,SAAgB,qBAAhB,CAAsC,QAAtC,EAAwD;AACtD,SAAO;AACL,IAAA,IAAI,EAAE,WADD;AAEL,IAAA,KAAK,EAAE,QAAQ,CAAC,SAAT,IAAsB,SAFxB;AAIL,IAAA,IAAI,EAAE,QAAQ,CAAC,SAAT,GACD,SAAA,CAAA,YAAA,CAAa,QAAQ,CAAC,SAAtB,CADC,GAEF;AANC,GAAP;AAQD;;AATD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAaA,SAAgB,gBAAhB,CACE,QADF,EAEE,IAFF,EAEgC;AAE9B,SAAO;AACL,IAAA,IAAI,EAAE,MADD;AAEL,IAAA,MAAM,EAAE,QAAQ,CAAC,MAFZ;AAGL,IAAA,IAAI,EAAE,IAAI,IAAI,QAAQ,CAAC;AAHlB,GAAP;AAKD;;AATD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAWA,SAAS,WAAT,CAAqB,QAArB,EAAqD;AACnD,SAAO,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,IAArC;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypeReference = exports.getEnumValueReference = exports.getArgumentReference = exports.getDirectiveReference = exports.getFieldReference = void 0;\nvar graphql_1 = require(\"graphql\");\nfunction getFieldReference(typeInfo) {\n    return {\n        kind: 'Field',\n        schema: typeInfo.schema,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n    };\n}\nexports.getFieldReference = getFieldReference;\nfunction getDirectiveReference(typeInfo) {\n    return {\n        kind: 'Directive',\n        schema: typeInfo.schema,\n        directive: typeInfo.directiveDef,\n    };\n}\nexports.getDirectiveReference = getDirectiveReference;\nfunction getArgumentReference(typeInfo) {\n    return typeInfo.directiveDef\n        ? {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            directive: typeInfo.directiveDef,\n        }\n        : {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            field: typeInfo.fieldDef,\n            type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n        };\n}\nexports.getArgumentReference = getArgumentReference;\nfunction getEnumValueReference(typeInfo) {\n    return {\n        kind: 'EnumValue',\n        value: typeInfo.enumValue || undefined,\n        type: typeInfo.inputType\n            ? graphql_1.getNamedType(typeInfo.inputType)\n            : undefined,\n    };\n}\nexports.getEnumValueReference = getEnumValueReference;\nfunction getTypeReference(typeInfo, type) {\n    return {\n        kind: 'Type',\n        schema: typeInfo.schema,\n        type: type || typeInfo.type,\n    };\n}\nexports.getTypeReference = getTypeReference;\nfunction isMetaField(fieldDef) {\n    return fieldDef.name.slice(0, 2) === '__';\n}\n//# sourceMappingURL=SchemaReference.js.map"]},"metadata":{},"sourceType":"script"}