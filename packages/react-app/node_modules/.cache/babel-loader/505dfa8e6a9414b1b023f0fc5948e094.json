{"ast":null,"code":"// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict'; // TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/; // Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\n\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i,\n      token,\n      inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i,\n      token,\n      inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content.replace(/\\+-/g, '±') // .., ..., ....... -> …\n        // but ?..... & !..... -> ?.. & !..\n        .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',') // em-dash\n        .replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1\\u2014\") // en-dash\n        .replace(/(^|\\s)--(?=\\s|$)/mg, \"$1\\u2013\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1\\u2013\");\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) {\n    return;\n  }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_core/replacements.js"],"names":["RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","c","r","p","tm","replaceFn","match","name","toLowerCase","replace_scoped","inlineTokens","i","token","inside_autolink","length","type","content","replace","info","replace_rare","test","module","exports","state","blkIdx","md","options","typographer","tokens","children"],"mappings":"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","sourcesContent":["// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n"]},"metadata":{},"sourceType":"script"}