{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textEncoder = new TextEncoder();\nvar maxInt32 = Math.pow(2, 32);\nvar maxUInt32 = Math.pow(2, 31);\n\nfunction encodeLink(link, bytes) {\n  var i = bytes.length;\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 24;\n  }\n\n  if (typeof link.Name === 'string') {\n    var nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 18;\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 10;\n  }\n\n  return bytes.length - i;\n}\n\nfunction encodeNode(node) {\n  var size = sizeNode(node);\n  var bytes = new Uint8Array(size);\n  var i = size;\n\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 10;\n  }\n\n  if (node.Links) {\n    for (var index = node.Links.length - 1; index >= 0; index--) {\n      var _size = encodeLink(node.Links[index], bytes.subarray(0, i));\n\n      i -= _size;\n      i = encodeVarint(bytes, i, _size) - 1;\n      bytes[i] = 18;\n    }\n  }\n\n  return bytes;\n}\n\nfunction sizeLink(link) {\n  var n = 0;\n\n  if (link.Hash) {\n    var l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (typeof link.Name === 'string') {\n    var _l = textEncoder.encode(link.Name).length;\n    n += 1 + _l + sov(_l);\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n\n  return n;\n}\n\nfunction sizeNode(node) {\n  var n = 0;\n\n  if (node.Data) {\n    var l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (node.Links) {\n    var _iterator = _createForOfIteratorHelper(node.Links),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var link = _step.value;\n\n        var _l2 = sizeLink(link);\n\n        n += 1 + _l2 + sov(_l2);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return n;\n}\n\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  var base = offset;\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 127 | 128;\n    v /= 128;\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = v & 127 | 128;\n    v >>>= 7;\n  }\n\n  bytes[offset] = v;\n  return base;\n}\n\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n\n  return Math.floor((len64(x) + 6) / 7);\n}\n\nfunction len64(x) {\n  var n = 0;\n\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n\n  return n + len8tab[x];\n}\n\nvar len8tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];\nexports.encodeNode = encodeNode;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/@ipld/dag-pb/cjs/src/pb-encode.js"],"names":["Object","defineProperty","exports","value","textEncoder","TextEncoder","maxInt32","maxUInt32","encodeLink","link","bytes","i","length","Tsize","Error","Number","isSafeInteger","encodeVarint","Name","nameBytes","encode","set","Hash","encodeNode","node","size","sizeNode","Uint8Array","Data","Links","index","subarray","sizeLink","n","l","sov","offset","v","base","x","Math","floor","len64","len8tab"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst textEncoder = new TextEncoder();\nconst maxInt32 = 2 ** 32;\nconst maxUInt32 = 2 ** 31;\nfunction encodeLink(link, bytes) {\n  let i = bytes.length;\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 24;\n  }\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 18;\n  }\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 10;\n  }\n  return bytes.length - i;\n}\nfunction encodeNode(node) {\n  const size = sizeNode(node);\n  const bytes = new Uint8Array(size);\n  let i = size;\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 10;\n  }\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i));\n      i -= size;\n      i = encodeVarint(bytes, i, size) - 1;\n      bytes[i] = 18;\n    }\n  }\n  return bytes;\n}\nfunction sizeLink(link) {\n  let n = 0;\n  if (link.Hash) {\n    const l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n  return n;\n}\nfunction sizeNode(node) {\n  let n = 0;\n  if (node.Data) {\n    const l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link);\n      n += 1 + l + sov(l);\n    }\n  }\n  return n;\n}\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  const base = offset;\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 127 | 128;\n    v /= 128;\n  }\n  while (v >= 128) {\n    bytes[offset++] = v & 127 | 128;\n    v >>>= 7;\n  }\n  bytes[offset] = v;\n  return base;\n}\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n  return Math.floor((len64(x) + 6) / 7);\n}\nfunction len64(x) {\n  let n = 0;\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n  return n + len8tab[x];\n}\nconst len8tab = [\n  0,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  6,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8,\n  8\n];\n\nexports.encodeNode = encodeNode;\n"]},"metadata":{},"sourceType":"script"}