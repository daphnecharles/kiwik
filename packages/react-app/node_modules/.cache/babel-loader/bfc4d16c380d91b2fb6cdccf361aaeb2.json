{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _digest = require('./digest.js');\n\nvar from = function from(_ref) {\n  var name = _ref.name,\n      code = _ref.code,\n      encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\n\nvar Hasher = /*#__PURE__*/function () {\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function digest(input) {\n      var _this = this;\n\n      if (input instanceof Uint8Array) {\n        var result = this.encode(input);\n        return result instanceof Uint8Array ? _digest.create(this.code, result) : result.then(function (digest$1) {\n          return _digest.create(_this.code, digest$1);\n        });\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n\n  return Hasher;\n}();\n\nexports.Hasher = Hasher;\nexports.from = from;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/multiformats/cjs/src/hashes/hasher.js"],"names":["Object","defineProperty","exports","value","digest","require","from","name","code","encode","Hasher","input","Uint8Array","result","create","then","digest$1","Error"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAQC,IAAR,QAAQA,IAAR;AAAA,MAAcC,MAAd,QAAcA,MAAd;AAAA,SAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA1B;AAAA,CAAb;;IACMC,M;AACJ,kBAAYH,IAAZ,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAAA;;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;WACD,gBAAOE,KAAP,EAAc;AAAA;;AACZ,UAAIA,KAAK,YAAYC,UAArB,EAAiC;AAC/B,YAAMC,MAAM,GAAG,KAAKJ,MAAL,CAAYE,KAAZ,CAAf;AACA,eAAOE,MAAM,YAAYD,UAAlB,GAA+BR,OAAM,CAACU,MAAP,CAAc,KAAKN,IAAnB,EAAyBK,MAAzB,CAA/B,GAAkEA,MAAM,CAACE,IAAP,CAAY,UAAAC,QAAQ;AAAA,iBAAIZ,OAAM,CAACU,MAAP,CAAc,KAAI,CAACN,IAAnB,EAAyBQ,QAAzB,CAAJ;AAAA,SAApB,CAAzE;AACD,OAHD,MAGO;AACL,cAAMC,KAAK,CAAC,mCAAD,CAAX;AACD;AACF;;;;;;AAGHf,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACAR,OAAO,CAACI,IAAR,GAAeA,IAAf","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"]},"metadata":{},"sourceType":"script"}