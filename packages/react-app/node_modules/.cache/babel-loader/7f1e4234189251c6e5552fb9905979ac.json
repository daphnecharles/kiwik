{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // These are load-balancer-based applicatoin IDs\n\nvar defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n\n  var _super = _createSuper(PocketProvider);\n\n  function PocketProvider(network, apiKey) {\n    _classCallCheck(this, PocketProvider);\n\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      var n = getStatic(this instanceof PocketProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (n) {\n        var applicationId = defaultApplicationIds[n.name];\n\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      } // If there was any issue above, we don't know this network\n\n\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n\n    return _super.call(this, network, apiKey);\n  }\n\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationIds[this.network.name];\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      // Most API Providers allow null to get the default configuration, but\n      // Pocket requires the network to decide the default provider, so we\n      // rely on hijacking the constructor to add a sensible default for us\n      if (apiKey == null) {\n        logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n      }\n\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: false,\n        applicationSecretKey: null\n      }; // Parse applicationId and applicationSecretKey\n\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n        logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else if (apiKey.applicationId) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var url = null;\n\n      if (apiKey.loadBalancer) {\n        url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      } else {\n        url = \"https://\".concat(host, \"/v1/\").concat(apiKey.applicationId);\n      }\n\n      var connection = {\n        url: url\n      }; // Initialize empty headers\n\n      connection.headers = {}; // Apply application secret key\n\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based applicatoin IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = getStatic((new.target), \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}