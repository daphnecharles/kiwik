{"ast":null,"code":"'use strict';\n\nvar assert = require('./assert');\n\nvar der = require('./der');\n\nvar messages = require('./messages.json');\n\nfunction initCompressedValue(value, defaultValue) {\n  if (value === undefined) return defaultValue;\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);\n  return value;\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function privateKeyVerify(privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);\n    },\n    privateKeyExport: function privateKeyExport(privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed);\n      return der.privateKeyExport(privateKey, publicKey, compressed);\n    },\n    privateKeyImport: function privateKeyImport(privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      privateKey = der.privateKeyImport(privateKey);\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);\n    },\n    privateKeyNegate: function privateKeyNegate(privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.privateKeyNegate(privateKey);\n    },\n    privateKeyModInverse: function privateKeyModInverse(privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.privateKeyModInverse(privateKey);\n    },\n    privateKeyTweakAdd: function privateKeyTweakAdd(privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak);\n    },\n    privateKeyTweakMul: function privateKeyTweakMul(privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      return secp256k1.privateKeyTweakMul(privateKey, tweak);\n    },\n    publicKeyCreate: function publicKeyCreate(privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyCreate(privateKey, compressed);\n    },\n    publicKeyConvert: function publicKeyConvert(publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyConvert(publicKey, compressed);\n    },\n    publicKeyVerify: function publicKeyVerify(publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      return secp256k1.publicKeyVerify(publicKey);\n    },\n    publicKeyTweakAdd: function publicKeyTweakAdd(publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);\n    },\n    publicKeyTweakMul: function publicKeyTweakMul(publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);\n    },\n    publicKeyCombine: function publicKeyCombine(publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);\n\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      }\n\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyCombine(publicKeys, compressed);\n    },\n    signatureNormalize: function signatureNormalize(signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      return secp256k1.signatureNormalize(signature);\n    },\n    signatureExport: function signatureExport(signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = secp256k1.signatureExport(signature);\n      return der.signatureExport(sigObj);\n    },\n    signatureImport: function signatureImport(sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = der.signatureImport(sig);\n      if (sigObj) return secp256k1.signatureImport(sigObj);\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n    },\n    signatureImportLax: function signatureImportLax(sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = der.signatureImportLax(sig);\n      if (sigObj) return secp256k1.signatureImport(sigObj);\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n    },\n    sign: function sign(message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      var data = null;\n      var noncefn = null;\n\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID);\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);\n          data = options.data;\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);\n          noncefn = options.noncefn;\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data);\n    },\n    verify: function verify(message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      return secp256k1.verify(message, signature, publicKey);\n    },\n    recover: function recover(message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.recover(message, signature, recovery, compressed);\n    },\n    ecdh: function ecdh(publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.ecdh(publicKey, privateKey);\n    },\n    ecdhUnsafe: function ecdhUnsafe(publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/secp256k1/lib/index.js"],"names":["assert","require","der","messages","initCompressedValue","value","defaultValue","undefined","isBoolean","COMPRESSED_TYPE_INVALID","module","exports","secp256k1","privateKeyVerify","privateKey","isBuffer","EC_PRIVATE_KEY_TYPE_INVALID","length","privateKeyExport","compressed","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","publicKey","privateKeyImport","Error","EC_PRIVATE_KEY_IMPORT_DER_FAIL","privateKeyNegate","privateKeyModInverse","privateKeyTweakAdd","tweak","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","privateKeyTweakMul","publicKeyCreate","publicKeyConvert","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","publicKeyVerify","publicKeyTweakAdd","publicKeyTweakMul","publicKeyCombine","publicKeys","isArray","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","i","signatureNormalize","signature","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","signatureExport","sigObj","signatureImport","sig","ECDSA_SIGNATURE_PARSE_DER_FAIL","signatureImportLax","sign","message","options","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","data","noncefn","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","verify","recover","recovery","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","ecdh","ecdhUnsafe"],"mappings":"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","sourcesContent":["'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}