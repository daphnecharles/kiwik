{"ast":null,"code":"import _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BlockCipherMode } from './cipher-core.js';\n\nvar incWord = function incWord(word) {\n  var _word = word;\n\n  if ((word >> 24 & 0xff) === 0xff) {\n    // overflow\n    var b1 = word >> 16 & 0xff;\n    var b2 = word >> 8 & 0xff;\n    var b3 = word & 0xff;\n\n    if (b1 === 0xff) {\n      // overflow b1\n      b1 = 0;\n\n      if (b2 === 0xff) {\n        b2 = 0;\n\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += b1 << 16;\n    _word += b2 << 8;\n    _word += b3;\n  } else {\n    _word += 0x01 << 24;\n  }\n\n  return _word;\n};\n\nvar incCounter = function incCounter(counter) {\n  var _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n\n  return _counter;\n};\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\n\n\nexport var CTRGladman = /*#__PURE__*/function (_BlockCipherMode) {\n  _inherits(CTRGladman, _BlockCipherMode);\n\n  var _super = _createSuper(CTRGladman);\n\n  function CTRGladman() {\n    _classCallCheck(this, CTRGladman);\n\n    return _super.apply(this, arguments);\n  }\n\n  return CTRGladman;\n}(BlockCipherMode);\n\nCTRGladman.Encryptor = /*#__PURE__*/function (_CTRGladman) {\n  _inherits(_class, _CTRGladman);\n\n  var _super2 = _createSuper(_class);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(_class, [{\n    key: \"processBlock\",\n    value: function processBlock(words, offset) {\n      var _words = words; // Shortcuts\n\n      var cipher = this._cipher;\n      var blockSize = cipher.blockSize;\n      var iv = this._iv;\n      var counter = this._counter; // Generate keystream\n\n      if (iv) {\n        this._counter = iv.slice(0);\n        counter = this._counter; // Remove IV for subsequent blocks\n\n        this._iv = undefined;\n      }\n\n      incCounter(counter);\n      var keystream = counter.slice(0);\n      cipher.encryptBlock(keystream, 0); // Encrypt\n\n      for (var i = 0; i < blockSize; i += 1) {\n        _words[offset + i] ^= keystream[i];\n      }\n    }\n  }]);\n\n  return _class;\n}(CTRGladman);\n\nCTRGladman.Decryptor = CTRGladman.Encryptor;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/mode-ctr-gladman.js"],"names":["BlockCipherMode","incWord","word","_word","b1","b2","b3","incCounter","counter","_counter","CTRGladman","Encryptor","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":"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","sourcesContent":["import {\n  BlockCipherMode,\n} from './cipher-core.js';\n\nconst incWord = (word) => {\n  let _word = word;\n\n  if (((word >> 24) & 0xff) === 0xff) { // overflow\n    let b1 = (word >> 16) & 0xff;\n    let b2 = (word >> 8) & 0xff;\n    let b3 = word & 0xff;\n\n    if (b1 === 0xff) { // overflow b1\n      b1 = 0;\n      if (b2 === 0xff) {\n        b2 = 0;\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += (b1 << 16);\n    _word += (b2 << 8);\n    _word += b3;\n  } else {\n    _word += (0x01 << 24);\n  }\n  return _word;\n};\n\nconst incCounter = (counter) => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n  return _counter;\n};\n\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nexport class CTRGladman extends BlockCipherMode {\n}\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n\n    incCounter(counter);\n\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;\n"]},"metadata":{},"sourceType":"module"}