{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar introspection_1 = require(\"graphql/type/introspection\");\n\nvar forEachState_1 = __importDefault(require(\"./forEachState\"));\n\nfunction getTypeInfo(schema, tokenState) {\n  var info = {\n    schema: schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null\n  };\n  forEachState_1.default(tokenState, function (state) {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n\n        break;\n\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef = info.type && state.name ? getFieldDef(schema, info.parentType, state.name) : null;\n        info.type = info.fieldDef && info.fieldDef.type;\n        break;\n\n      case 'SelectionSet':\n        info.parentType = info.type ? graphql_1.getNamedType(info.type) : null;\n        break;\n\n      case 'Directive':\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n\n      case 'Arguments':\n        var parentDef = state.prevState ? state.prevState.kind === 'Field' ? info.fieldDef : state.prevState.kind === 'Directive' ? info.directiveDef : state.prevState.kind === 'AliasedField' ? state.prevState.name && getFieldDef(schema, info.parentType, state.prevState.name) : null : null;\n        info.argDefs = parentDef ? parentDef.args : null;\n        break;\n\n      case 'Argument':\n        info.argDef = null;\n\n        if (info.argDefs) {\n          for (var i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n\n        info.inputType = info.argDef && info.argDef.type;\n        break;\n\n      case 'EnumValue':\n        var enumType = info.inputType ? graphql_1.getNamedType(info.inputType) : null;\n        info.enumValue = enumType instanceof graphql_1.GraphQLEnumType ? find(enumType.getValues(), function (val) {\n          return val.value === state.name;\n        }) : null;\n        break;\n\n      case 'ListValue':\n        var nullableType = info.inputType ? graphql_1.getNullableType(info.inputType) : null;\n        info.inputType = nullableType instanceof graphql_1.GraphQLList ? nullableType.ofType : null;\n        break;\n\n      case 'ObjectValue':\n        var objectType = info.inputType ? graphql_1.getNamedType(info.inputType) : null;\n        info.objectFieldDefs = objectType instanceof graphql_1.GraphQLInputObjectType ? objectType.getFields() : null;\n        break;\n\n      case 'ObjectField':\n        var objectField = state.name && info.objectFieldDefs ? info.objectFieldDefs[state.name] : null;\n        info.inputType = objectField && objectField.type;\n        break;\n\n      case 'NamedType':\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n  return info;\n}\n\nexports.default = getTypeInfo;\n\nfunction getFieldDef(schema, type, fieldName) {\n  if (fieldName === introspection_1.SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return introspection_1.SchemaMetaFieldDef;\n  }\n\n  if (fieldName === introspection_1.TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return introspection_1.TypeMetaFieldDef;\n  }\n\n  if (fieldName === introspection_1.TypeNameMetaFieldDef.name && graphql_1.isCompositeType(type)) {\n    return introspection_1.TypeNameMetaFieldDef;\n  }\n\n  if (type && type.getFields) {\n    return type.getFields()[fieldName];\n  }\n}\n\nfunction find(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}","map":{"version":3,"sources":["../src/utils/getTypeInfo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar introspection_1 = require(\"graphql/type/introspection\");\nvar forEachState_1 = __importDefault(require(\"./forEachState\"));\nfunction getTypeInfo(schema, tokenState) {\n    var info = {\n        schema: schema,\n        type: null,\n        parentType: null,\n        inputType: null,\n        directiveDef: null,\n        fieldDef: null,\n        argDef: null,\n        argDefs: null,\n        objectFieldDefs: null,\n    };\n    forEachState_1.default(tokenState, function (state) {\n        switch (state.kind) {\n            case 'Query':\n            case 'ShortQuery':\n                info.type = schema.getQueryType();\n                break;\n            case 'Mutation':\n                info.type = schema.getMutationType();\n                break;\n            case 'Subscription':\n                info.type = schema.getSubscriptionType();\n                break;\n            case 'InlineFragment':\n            case 'FragmentDefinition':\n                if (state.type) {\n                    info.type = schema.getType(state.type);\n                }\n                break;\n            case 'Field':\n            case 'AliasedField':\n                info.fieldDef =\n                    info.type && state.name\n                        ? getFieldDef(schema, info.parentType, state.name)\n                        : null;\n                info.type = info.fieldDef && info.fieldDef.type;\n                break;\n            case 'SelectionSet':\n                info.parentType = info.type ? graphql_1.getNamedType(info.type) : null;\n                break;\n            case 'Directive':\n                info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n                break;\n            case 'Arguments':\n                var parentDef = state.prevState\n                    ? state.prevState.kind === 'Field'\n                        ? info.fieldDef\n                        : state.prevState.kind === 'Directive'\n                            ? info.directiveDef\n                            : state.prevState.kind === 'AliasedField'\n                                ? state.prevState.name &&\n                                    getFieldDef(schema, info.parentType, state.prevState.name)\n                                : null\n                    : null;\n                info.argDefs = parentDef ? parentDef.args : null;\n                break;\n            case 'Argument':\n                info.argDef = null;\n                if (info.argDefs) {\n                    for (var i = 0; i < info.argDefs.length; i++) {\n                        if (info.argDefs[i].name === state.name) {\n                            info.argDef = info.argDefs[i];\n                            break;\n                        }\n                    }\n                }\n                info.inputType = info.argDef && info.argDef.type;\n                break;\n            case 'EnumValue':\n                var enumType = info.inputType ? graphql_1.getNamedType(info.inputType) : null;\n                info.enumValue =\n                    enumType instanceof graphql_1.GraphQLEnumType\n                        ? find(enumType.getValues(), function (val) { return val.value === state.name; })\n                        : null;\n                break;\n            case 'ListValue':\n                var nullableType = info.inputType\n                    ? graphql_1.getNullableType(info.inputType)\n                    : null;\n                info.inputType =\n                    nullableType instanceof graphql_1.GraphQLList ? nullableType.ofType : null;\n                break;\n            case 'ObjectValue':\n                var objectType = info.inputType ? graphql_1.getNamedType(info.inputType) : null;\n                info.objectFieldDefs =\n                    objectType instanceof graphql_1.GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            case 'ObjectField':\n                var objectField = state.name && info.objectFieldDefs\n                    ? info.objectFieldDefs[state.name]\n                    : null;\n                info.inputType = objectField && objectField.type;\n                break;\n            case 'NamedType':\n                info.type = state.name ? schema.getType(state.name) : null;\n                break;\n        }\n    });\n    return info;\n}\nexports.default = getTypeInfo;\nfunction getFieldDef(schema, type, fieldName) {\n    if (fieldName === introspection_1.SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n        return introspection_1.SchemaMetaFieldDef;\n    }\n    if (fieldName === introspection_1.TypeMetaFieldDef.name && schema.getQueryType() === type) {\n        return introspection_1.TypeMetaFieldDef;\n    }\n    if (fieldName === introspection_1.TypeNameMetaFieldDef.name && graphql_1.isCompositeType(type)) {\n        return introspection_1.TypeNameMetaFieldDef;\n    }\n    if (type && type.getFields) {\n        return type.getFields()[fieldName];\n    }\n}\nfunction find(array, predicate) {\n    for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i])) {\n            return array[i];\n        }\n    }\n}\n//# sourceMappingURL=getTypeInfo.js.map"]},"metadata":{},"sourceType":"script"}