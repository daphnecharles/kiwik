{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar createKeccakHash = require('keccak');\n\nvar BN = require('bn.js');\n\nfunction keccak256(a) {\n  a = toBuffer(a);\n  return createKeccakHash('keccak256').update(a).digest();\n}\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (isHexString(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('while padding to even, value must be string, is currently ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n\nfunction isHexPrefixed(str) {\n  if (typeof str !== 'string') {\n    throw new Error(\"value must be type 'string', is currently type \" + (typeof str === 'undefined' ? 'undefined' : _typeof(str)) + ', while checking isHexPrefixed.');\n  }\n\n  return str.slice(0, 2) === '0x';\n}\n\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return Buffer.from(padToEven(hex.slice(2)), 'hex');\n}\n\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\nif (typeof window !== 'undefined') {\n  window.keccak256 = keccak256;\n}\n\nmodule.exports = keccak256;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/keccak256/dist/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","createKeccakHash","require","BN","keccak256","a","toBuffer","update","digest","v","Buffer","isBuffer","Array","isArray","from","isHexString","padToEven","stripHexPrefix","intToBuffer","undefined","allocUnsafe","isBN","toArrayLike","toArray","Error","value","length","match","str","isHexPrefixed","slice","i","hex","intToHex","toString","window","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar createKeccakHash = require('keccak');\nvar BN = require('bn.js');\n\nfunction keccak256(a) {\n  a = toBuffer(a);\n\n  return createKeccakHash('keccak256').update(a).digest();\n}\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (isHexString(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('while padding to even, value must be string, is currently ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n\nfunction isHexPrefixed(str) {\n  if (typeof str !== 'string') {\n    throw new Error(\"value must be type 'string', is currently type \" + (typeof str === 'undefined' ? 'undefined' : _typeof(str)) + ', while checking isHexPrefixed.');\n  }\n\n  return str.slice(0, 2) === '0x';\n}\n\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return Buffer.from(padToEven(hex.slice(2)), 'hex');\n}\n\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\nif (typeof window !== 'undefined') {\n  window.keccak256 = keccak256;\n}\n\nmodule.exports = keccak256;"]},"metadata":{},"sourceType":"script"}