{"ast":null,"code":"/* eslint-env node */\n'use strict'; // SDP helpers.\n\nvar SDPUtils = {}; // Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\n\nSDPUtils.generateIdentifier = function () {\n  return Math.random().toString(36).substr(2, 10);\n}; // The RTCP CNAME used by all peerconnections from the same JS.\n\n\nSDPUtils.localCName = SDPUtils.generateIdentifier(); // Splits SDP into lines, dealing with both CRLF and LF.\n\nSDPUtils.splitLines = function (blob) {\n  return blob.trim().split('\\n').map(function (line) {\n    return line.trim();\n  });\n}; // Splits SDP into sessionpart and mediasections. Ensures CRLF.\n\n\nSDPUtils.splitSections = function (blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function (part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n}; // returns the session description.\n\n\nSDPUtils.getDescription = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n}; // returns the individual media sections.\n\n\nSDPUtils.getMediaSections = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n}; // Returns lines that start with a certain prefix.\n\n\nSDPUtils.matchPrefix = function (blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function (line) {\n    return line.indexOf(prefix) === 0;\n  });\n}; // Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n\n\nSDPUtils.parseCandidate = function (line) {\n  var parts; // Parse both variants.\n\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4],\n    // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n\n        candidate.usernameFragment = parts[i + 1];\n        break;\n\n      default:\n        // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n\n  return candidate;\n}; // Translates a candidate object into SDP candidate attribute.\n\n\nSDPUtils.writeCandidate = function (candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n\n  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n\n  return 'candidate:' + sdp.join(' ');\n}; // Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\n\n\nSDPUtils.parseIceOptions = function (line) {\n  return line.substr(14).split(' ');\n}; // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\n\n\nSDPUtils.parseRtpMap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n\n  };\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // legacy alias, got renamed back to channels in ORTC.\n\n  parsed.numChannels = parsed.channels;\n  return parsed;\n}; // Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\n\n\nSDPUtils.writeRtpMap = function (codec) {\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n}; // Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\n\n\nSDPUtils.parseExtmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n}; // Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\n\n\nSDPUtils.writeExtmap = function (headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\\r\\n';\n}; // Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\n\n\nSDPUtils.parseFmtp = function (line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n\n  return parsed;\n}; // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n\n\nSDPUtils.writeFmtp = function (codec) {\n  var line = '';\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function (param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n\n  return line;\n}; // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\n\n\nSDPUtils.parseRtcpFb = function (line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n}; // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\n\n\nSDPUtils.writeRtcpFb = function (codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function (fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n    });\n  }\n\n  return lines;\n}; // Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\n\n\nSDPUtils.parseSsrcMedia = function (line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function (line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function (ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n}; // Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\n\n\nSDPUtils.getMid = function (mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function (line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(),\n    // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n}; // Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\n\n\nSDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:'); // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n}; // Serializes DTLS parameters to SDP.\n\n\nSDPUtils.writeDtlsParameters = function (params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function (fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n}; // Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\n\n\nSDPUtils.parseCryptoLine = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3)\n  };\n};\n\nSDPUtils.writeCryptoLine = function (parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\n}; // Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\n\n\nSDPUtils.parseCryptoKeyParams = function (keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function (keyParams) {\n  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\n}; // Extracts all SDES paramters.\n\n\nSDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n}; // Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\n\n\nSDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\n\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10)\n  };\n}; // Serializes ICE parameters to SDP.\n\n\nSDPUtils.writeIceParameters = function (params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n}; // Parses the SDP media section and returns RTCRtpParameters.\n\n\nSDPUtils.parseRtpParameters = function (mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n\n  for (var i = 3; i < mline.length; i++) {\n    // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' '); // Only the first a=fmtp:<pt> is considered.\n\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec); // parse FEC mechanisms from rtpmap lines.\n\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n\n        default:\n          // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  }); // FIXME: parse rtcp.\n\n  return description;\n}; // Generates parts of the SDP media section describing the capabilities /\n// parameters.\n\n\nSDPUtils.writeRtpDescription = function (kind, caps) {\n  var sdp = ''; // Build the mline.\n\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function (codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n'; // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n\n  caps.codecs.forEach(function (codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function (codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function (extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  } // FIXME: write fecMechanisms.\n\n\n  return sdp;\n}; // Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\n\n\nSDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1; // filter a=ssrc:... cname:, ignore PlanB-msid\n\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(function (line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function (part) {\n      return parseInt(part, 10);\n    });\n  });\n\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function (codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {\n          ssrc: secondarySsrc\n        };\n      }\n\n      encodingParameters.push(encParam);\n\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  } // we support both b=AS and b=TIAS but interpret AS as TIAS.\n\n\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n    } else {\n      bandwidth = undefined;\n    }\n\n    encodingParameters.forEach(function (params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n\n  return encodingParameters;\n}; // parses http://draft.ortc.org/#rtcrtcpparameters*\n\n\nSDPUtils.parseRtcpParameters = function (mediaSection) {\n  var rtcpParameters = {}; // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (obj) {\n    return obj.attribute === 'cname';\n  })[0];\n\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  } // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n\n\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0; // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n  return rtcpParameters;\n}; // parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\n\n\nSDPUtils.parseMsid = function (mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n}; // SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\n\n\nSDPUtils.parseSctpDescription = function (mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0].substr(10).split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n}; // SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\n\n\nSDPUtils.writeSctpDescription = function (media, sctp) {\n  var output = [];\n\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\n  } else {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\n  }\n\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n\n  return output.join('');\n}; // Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\n\n\nSDPUtils.generateSessionId = function () {\n  return Math.random().toString().substr(2, 21);\n}; // Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\n\n\nSDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n\n  var user = sessUser || 'thisisadapterortc'; // FIXME: sess-id should be an NTP timestamp.\n\n  return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function (transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps); // Map ICE parameters (ufrag, pwd) to SDP.\n\n  sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters()); // Map DTLS parameters to SDP.\n\n  sdp += SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(), type === 'offer' ? 'actpass' : 'active');\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' + transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid; // for Chrome.\n\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' ' + msid;\n\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' + transceiver.sendEncodingParameters[0].ssrc + ' ' + transceiver.sendEncodingParameters[0].rtx.ssrc + '\\r\\n';\n    }\n  } // FIXME: this should be written by writeRtpDescription.\n\n\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n\n  return sdp;\n}; // Gets the direction from the mediaSection or the sessionpart.\n\n\nSDPUtils.getDirection = function (mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n\n      default: // FIXME: What should happen here?\n\n    }\n  }\n\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function (mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function (mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n}; // a very naive interpretation of a valid SDP.\n\n\nSDPUtils.isValidSDP = function (blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n\n  var lines = SDPUtils.splitLines(blob);\n\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    } // TODO: check the modifier a bit more.\n\n  }\n\n  return true;\n}; // Expose public methods.\n\n\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/sdp/sdp.js"],"names":["SDPUtils","generateIdentifier","Math","random","toString","substr","localCName","splitLines","blob","trim","split","map","line","splitSections","parts","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","substring","candidate","foundation","component","parseInt","protocol","toLowerCase","priority","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","undefined","parseExtmap","id","direction","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","slice","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","parseMsid","spec","stream","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","media","sctp","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","user","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","msid","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports"],"mappings":"AAAA;AACA,a,CAEA;;AACA,IAAIA,QAAQ,GAAG,EAAf,C,CAEA;AACA;;AACAA,QAAQ,CAACC,kBAAT,GAA8B,YAAW;AACvC,SAAOC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,EAArC,CAAP;AACD,CAFD,C,CAIA;;;AACAL,QAAQ,CAACM,UAAT,GAAsBN,QAAQ,CAACC,kBAAT,EAAtB,C,CAEA;;AACAD,QAAQ,CAACO,UAAT,GAAsB,UAASC,IAAT,EAAe;AACnC,SAAOA,IAAI,CAACC,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,GAAxB,CAA4B,UAASC,IAAT,EAAe;AAChD,WAAOA,IAAI,CAACH,IAAL,EAAP;AACD,GAFM,CAAP;AAGD,CAJD,C,CAKA;;;AACAT,QAAQ,CAACa,aAAT,GAAyB,UAASL,IAAT,EAAe;AACtC,MAAIM,KAAK,GAAGN,IAAI,CAACE,KAAL,CAAW,MAAX,CAAZ;AACA,SAAOI,KAAK,CAACH,GAAN,CAAU,UAASI,IAAT,EAAeC,KAAf,EAAsB;AACrC,WAAO,CAACA,KAAK,GAAG,CAAR,GAAY,OAAOD,IAAnB,GAA0BA,IAA3B,EAAiCN,IAAjC,KAA0C,MAAjD;AACD,GAFM,CAAP;AAGD,CALD,C,CAOA;;;AACAT,QAAQ,CAACiB,cAAT,GAA0B,UAAST,IAAT,EAAe;AACvC,MAAIU,QAAQ,GAAGlB,QAAQ,CAACa,aAAT,CAAuBL,IAAvB,CAAf;AACA,SAAOU,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAA3B;AACD,CAHD,C,CAKA;;;AACAlB,QAAQ,CAACmB,gBAAT,GAA4B,UAASX,IAAT,EAAe;AACzC,MAAIU,QAAQ,GAAGlB,QAAQ,CAACa,aAAT,CAAuBL,IAAvB,CAAf;AACAU,EAAAA,QAAQ,CAACE,KAAT;AACA,SAAOF,QAAP;AACD,CAJD,C,CAMA;;;AACAlB,QAAQ,CAACqB,WAAT,GAAuB,UAASb,IAAT,EAAec,MAAf,EAAuB;AAC5C,SAAOtB,QAAQ,CAACO,UAAT,CAAoBC,IAApB,EAA0Be,MAA1B,CAAiC,UAASX,IAAT,EAAe;AACrD,WAAOA,IAAI,CAACY,OAAL,CAAaF,MAAb,MAAyB,CAAhC;AACD,GAFM,CAAP;AAGD,CAJD,C,CAMA;AACA;AACA;;;AACAtB,QAAQ,CAACyB,cAAT,GAA0B,UAASb,IAAT,EAAe;AACvC,MAAIE,KAAJ,CADuC,CAEvC;;AACA,MAAIF,IAAI,CAACY,OAAL,CAAa,cAAb,MAAiC,CAArC,EAAwC;AACtCV,IAAAA,KAAK,GAAGF,IAAI,CAACc,SAAL,CAAe,EAAf,EAAmBhB,KAAnB,CAAyB,GAAzB,CAAR;AACD,GAFD,MAEO;AACLI,IAAAA,KAAK,GAAGF,IAAI,CAACc,SAAL,CAAe,EAAf,EAAmBhB,KAAnB,CAAyB,GAAzB,CAAR;AACD;;AAED,MAAIiB,SAAS,GAAG;AACdC,IAAAA,UAAU,EAAEd,KAAK,CAAC,CAAD,CADH;AAEde,IAAAA,SAAS,EAAEC,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAFL;AAGdiB,IAAAA,QAAQ,EAAEjB,KAAK,CAAC,CAAD,CAAL,CAASkB,WAAT,EAHI;AAIdC,IAAAA,QAAQ,EAAEH,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAJJ;AAKdoB,IAAAA,EAAE,EAAEpB,KAAK,CAAC,CAAD,CALK;AAMdqB,IAAAA,OAAO,EAAErB,KAAK,CAAC,CAAD,CANA;AAMK;AACnBsB,IAAAA,IAAI,EAAEN,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAPA;AAQd;AACAuB,IAAAA,IAAI,EAAEvB,KAAK,CAAC,CAAD;AATG,GAAhB;;AAYA,OAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,KAAK,CAACyB,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC,YAAQxB,KAAK,CAACwB,CAAD,CAAb;AACE,WAAK,OAAL;AACEX,QAAAA,SAAS,CAACa,cAAV,GAA2B1B,KAAK,CAACwB,CAAC,GAAG,CAAL,CAAhC;AACA;;AACF,WAAK,OAAL;AACEX,QAAAA,SAAS,CAACc,WAAV,GAAwBX,QAAQ,CAAChB,KAAK,CAACwB,CAAC,GAAG,CAAL,CAAN,EAAe,EAAf,CAAhC;AACA;;AACF,WAAK,SAAL;AACEX,QAAAA,SAAS,CAACe,OAAV,GAAoB5B,KAAK,CAACwB,CAAC,GAAG,CAAL,CAAzB;AACA;;AACF,WAAK,OAAL;AACEX,QAAAA,SAAS,CAACgB,KAAV,GAAkB7B,KAAK,CAACwB,CAAC,GAAG,CAAL,CAAvB,CADF,CACkC;;AAChCX,QAAAA,SAAS,CAACiB,gBAAV,GAA6B9B,KAAK,CAACwB,CAAC,GAAG,CAAL,CAAlC;AACA;;AACF;AAAS;AACPX,QAAAA,SAAS,CAACb,KAAK,CAACwB,CAAD,CAAN,CAAT,GAAsBxB,KAAK,CAACwB,CAAC,GAAG,CAAL,CAA3B;AACA;AAhBJ;AAkBD;;AACD,SAAOX,SAAP;AACD,CA1CD,C,CA4CA;;;AACA3B,QAAQ,CAAC6C,cAAT,GAA0B,UAASlB,SAAT,EAAoB;AAC5C,MAAImB,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACC,UAAnB;AACAkB,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACE,SAAnB;AACAiB,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACI,QAAV,CAAmBiB,WAAnB,EAAT;AACAF,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACM,QAAnB;AACAa,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACQ,OAAV,IAAqBR,SAAS,CAACO,EAAxC;AACAY,EAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACS,IAAnB;AAEA,MAAIC,IAAI,GAAGV,SAAS,CAACU,IAArB;AACAS,EAAAA,GAAG,CAACC,IAAJ,CAAS,KAAT;AACAD,EAAAA,GAAG,CAACC,IAAJ,CAASV,IAAT;;AACA,MAAIA,IAAI,KAAK,MAAT,IAAmBV,SAAS,CAACa,cAA7B,IACAb,SAAS,CAACc,WADd,EAC2B;AACzBK,IAAAA,GAAG,CAACC,IAAJ,CAAS,OAAT;AACAD,IAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACa,cAAnB;AACAM,IAAAA,GAAG,CAACC,IAAJ,CAAS,OAAT;AACAD,IAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACc,WAAnB;AACD;;AACD,MAAId,SAAS,CAACe,OAAV,IAAqBf,SAAS,CAACI,QAAV,CAAmBC,WAAnB,OAAqC,KAA9D,EAAqE;AACnEc,IAAAA,GAAG,CAACC,IAAJ,CAAS,SAAT;AACAD,IAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACe,OAAnB;AACD;;AACD,MAAIf,SAAS,CAACiB,gBAAV,IAA8BjB,SAAS,CAACgB,KAA5C,EAAmD;AACjDG,IAAAA,GAAG,CAACC,IAAJ,CAAS,OAAT;AACAD,IAAAA,GAAG,CAACC,IAAJ,CAASpB,SAAS,CAACiB,gBAAV,IAA8BjB,SAAS,CAACgB,KAAjD;AACD;;AACD,SAAO,eAAeG,GAAG,CAACG,IAAJ,CAAS,GAAT,CAAtB;AACD,CA5BD,C,CA8BA;AACA;;;AACAjD,QAAQ,CAACkD,eAAT,GAA2B,UAAStC,IAAT,EAAe;AACxC,SAAOA,IAAI,CAACP,MAAL,CAAY,EAAZ,EAAgBK,KAAhB,CAAsB,GAAtB,CAAP;AACD,CAFD,C,CAIA;AACA;;;AACAV,QAAQ,CAACmD,WAAT,GAAuB,UAASvC,IAAT,EAAe;AACpC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,CAAZ,EAAeK,KAAf,CAAqB,GAArB,CAAZ;AACA,MAAI0C,MAAM,GAAG;AACXC,IAAAA,WAAW,EAAEvB,QAAQ,CAAChB,KAAK,CAACM,KAAN,EAAD,EAAgB,EAAhB,CADV,CAC8B;;AAD9B,GAAb;AAIAN,EAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAAR;AAEA0C,EAAAA,MAAM,CAACE,IAAP,GAAcxC,KAAK,CAAC,CAAD,CAAnB;AACAsC,EAAAA,MAAM,CAACG,SAAP,GAAmBzB,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAA3B,CAToC,CASO;;AAC3CsC,EAAAA,MAAM,CAACI,QAAP,GAAkB1C,KAAK,CAACyB,MAAN,KAAiB,CAAjB,GAAqBT,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAA7B,GAA8C,CAAhE,CAVoC,CAWpC;;AACAsC,EAAAA,MAAM,CAACK,WAAP,GAAqBL,MAAM,CAACI,QAA5B;AACA,SAAOJ,MAAP;AACD,CAdD,C,CAgBA;AACA;;;AACApD,QAAQ,CAAC0D,WAAT,GAAuB,UAASC,KAAT,EAAgB;AACrC,MAAIC,EAAE,GAAGD,KAAK,CAACN,WAAf;;AACA,MAAIM,KAAK,CAACE,oBAAN,KAA+BC,SAAnC,EAA8C;AAC5CF,IAAAA,EAAE,GAAGD,KAAK,CAACE,oBAAX;AACD;;AACD,MAAIL,QAAQ,GAAGG,KAAK,CAACH,QAAN,IAAkBG,KAAK,CAACF,WAAxB,IAAuC,CAAtD;AACA,SAAO,cAAcG,EAAd,GAAmB,GAAnB,GAAyBD,KAAK,CAACL,IAA/B,GAAsC,GAAtC,GAA4CK,KAAK,CAACJ,SAAlD,IACFC,QAAQ,KAAK,CAAb,GAAiB,MAAMA,QAAvB,GAAkC,EADhC,IACsC,MAD7C;AAED,CARD,C,CAUA;AACA;AACA;;;AACAxD,QAAQ,CAAC+D,WAAT,GAAuB,UAASnD,IAAT,EAAe;AACpC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,CAAZ,EAAeK,KAAf,CAAqB,GAArB,CAAZ;AACA,SAAO;AACLsD,IAAAA,EAAE,EAAElC,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADP;AAELmD,IAAAA,SAAS,EAAEnD,KAAK,CAAC,CAAD,CAAL,CAASU,OAAT,CAAiB,GAAjB,IAAwB,CAAxB,GAA4BV,KAAK,CAAC,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,EAAoB,CAApB,CAA5B,GAAqD,UAF3D;AAGLwD,IAAAA,GAAG,EAAEpD,KAAK,CAAC,CAAD;AAHL,GAAP;AAKD,CAPD,C,CASA;AACA;;;AACAd,QAAQ,CAACmE,WAAT,GAAuB,UAASC,eAAT,EAA0B;AAC/C,SAAO,eAAeA,eAAe,CAACJ,EAAhB,IAAsBI,eAAe,CAACC,WAArD,KACFD,eAAe,CAACH,SAAhB,IAA6BG,eAAe,CAACH,SAAhB,KAA8B,UAA3D,GACG,MAAMG,eAAe,CAACH,SADzB,GAEG,EAHD,IAIH,GAJG,GAIGG,eAAe,CAACF,GAJnB,GAIyB,MAJhC;AAKD,CAND,C,CAQA;AACA;AACA;;;AACAlE,QAAQ,CAACsE,SAAT,GAAqB,UAAS1D,IAAT,EAAe;AAClC,MAAIwC,MAAM,GAAG,EAAb;AACA,MAAImB,EAAJ;AACA,MAAIzD,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAYO,IAAI,CAACY,OAAL,CAAa,GAAb,IAAoB,CAAhC,EAAmCd,KAAnC,CAAyC,GAAzC,CAAZ;;AACA,OAAK,IAAI8D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1D,KAAK,CAACyB,MAA1B,EAAkCiC,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,EAAE,GAAGzD,KAAK,CAAC0D,CAAD,CAAL,CAAS/D,IAAT,GAAgBC,KAAhB,CAAsB,GAAtB,CAAL;AACA0C,IAAAA,MAAM,CAACmB,EAAE,CAAC,CAAD,CAAF,CAAM9D,IAAN,EAAD,CAAN,GAAuB8D,EAAE,CAAC,CAAD,CAAzB;AACD;;AACD,SAAOnB,MAAP;AACD,CATD,C,CAWA;;;AACApD,QAAQ,CAACyE,SAAT,GAAqB,UAASd,KAAT,EAAgB;AACnC,MAAI/C,IAAI,GAAG,EAAX;AACA,MAAIgD,EAAE,GAAGD,KAAK,CAACN,WAAf;;AACA,MAAIM,KAAK,CAACE,oBAAN,KAA+BC,SAAnC,EAA8C;AAC5CF,IAAAA,EAAE,GAAGD,KAAK,CAACE,oBAAX;AACD;;AACD,MAAIF,KAAK,CAACe,UAAN,IAAoBC,MAAM,CAACC,IAAP,CAAYjB,KAAK,CAACe,UAAlB,EAA8BnC,MAAtD,EAA8D;AAC5D,QAAIsC,MAAM,GAAG,EAAb;AACAF,IAAAA,MAAM,CAACC,IAAP,CAAYjB,KAAK,CAACe,UAAlB,EAA8BI,OAA9B,CAAsC,UAASC,KAAT,EAAgB;AACpD,UAAIpB,KAAK,CAACe,UAAN,CAAiBK,KAAjB,CAAJ,EAA6B;AAC3BF,QAAAA,MAAM,CAAC9B,IAAP,CAAYgC,KAAK,GAAG,GAAR,GAAcpB,KAAK,CAACe,UAAN,CAAiBK,KAAjB,CAA1B;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,CAAC9B,IAAP,CAAYgC,KAAZ;AACD;AACF,KAND;AAOAnE,IAAAA,IAAI,IAAI,YAAYgD,EAAZ,GAAiB,GAAjB,GAAuBiB,MAAM,CAAC5B,IAAP,CAAY,GAAZ,CAAvB,GAA0C,MAAlD;AACD;;AACD,SAAOrC,IAAP;AACD,CAlBD,C,CAoBA;AACA;;;AACAZ,QAAQ,CAACgF,WAAT,GAAuB,UAASpE,IAAT,EAAe;AACpC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAYO,IAAI,CAACY,OAAL,CAAa,GAAb,IAAoB,CAAhC,EAAmCd,KAAnC,CAAyC,GAAzC,CAAZ;AACA,SAAO;AACL2B,IAAAA,IAAI,EAAEvB,KAAK,CAACM,KAAN,EADD;AAEL6D,IAAAA,SAAS,EAAEnE,KAAK,CAACmC,IAAN,CAAW,GAAX;AAFN,GAAP;AAID,CAND,C,CAOA;;;AACAjD,QAAQ,CAACkF,WAAT,GAAuB,UAASvB,KAAT,EAAgB;AACrC,MAAIwB,KAAK,GAAG,EAAZ;AACA,MAAIvB,EAAE,GAAGD,KAAK,CAACN,WAAf;;AACA,MAAIM,KAAK,CAACE,oBAAN,KAA+BC,SAAnC,EAA8C;AAC5CF,IAAAA,EAAE,GAAGD,KAAK,CAACE,oBAAX;AACD;;AACD,MAAIF,KAAK,CAACyB,YAAN,IAAsBzB,KAAK,CAACyB,YAAN,CAAmB7C,MAA7C,EAAqD;AACnD;AACAoB,IAAAA,KAAK,CAACyB,YAAN,CAAmBN,OAAnB,CAA2B,UAASO,EAAT,EAAa;AACtCF,MAAAA,KAAK,IAAI,eAAevB,EAAf,GAAoB,GAApB,GAA0ByB,EAAE,CAAChD,IAA7B,IACRgD,EAAE,CAACJ,SAAH,IAAgBI,EAAE,CAACJ,SAAH,CAAa1C,MAA7B,GAAsC,MAAM8C,EAAE,CAACJ,SAA/C,GAA2D,EADnD,IAEL,MAFJ;AAGD,KAJD;AAKD;;AACD,SAAOE,KAAP;AACD,CAfD,C,CAiBA;AACA;;;AACAnF,QAAQ,CAACsF,cAAT,GAA0B,UAAS1E,IAAT,EAAe;AACvC,MAAI2E,EAAE,GAAG3E,IAAI,CAACY,OAAL,CAAa,GAAb,CAAT;AACA,MAAIV,KAAK,GAAG;AACV0E,IAAAA,IAAI,EAAE1D,QAAQ,CAAClB,IAAI,CAACP,MAAL,CAAY,CAAZ,EAAekF,EAAE,GAAG,CAApB,CAAD,EAAyB,EAAzB;AADJ,GAAZ;AAGA,MAAIE,KAAK,GAAG7E,IAAI,CAACY,OAAL,CAAa,GAAb,EAAkB+D,EAAlB,CAAZ;;AACA,MAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd3E,IAAAA,KAAK,CAAC4E,SAAN,GAAkB9E,IAAI,CAACP,MAAL,CAAYkF,EAAE,GAAG,CAAjB,EAAoBE,KAAK,GAAGF,EAAR,GAAa,CAAjC,CAAlB;AACAzE,IAAAA,KAAK,CAAC6E,KAAN,GAAc/E,IAAI,CAACP,MAAL,CAAYoF,KAAK,GAAG,CAApB,CAAd;AACD,GAHD,MAGO;AACL3E,IAAAA,KAAK,CAAC4E,SAAN,GAAkB9E,IAAI,CAACP,MAAL,CAAYkF,EAAE,GAAG,CAAjB,CAAlB;AACD;;AACD,SAAOzE,KAAP;AACD,CAbD;;AAeAd,QAAQ,CAAC4F,cAAT,GAA0B,UAAShF,IAAT,EAAe;AACvC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,EAAZ,EAAgBK,KAAhB,CAAsB,GAAtB,CAAZ;AACA,SAAO;AACLmF,IAAAA,SAAS,EAAE/E,KAAK,CAACM,KAAN,EADN;AAEL0E,IAAAA,KAAK,EAAEhF,KAAK,CAACH,GAAN,CAAU,UAAS6E,IAAT,EAAe;AAC9B,aAAO1D,QAAQ,CAAC0D,IAAD,EAAO,EAAP,CAAf;AACD,KAFM;AAFF,GAAP;AAMD,CARD,C,CAUA;AACA;;;AACAxF,QAAQ,CAAC+F,MAAT,GAAkB,UAASC,YAAT,EAAuB;AACvC,MAAIC,GAAG,GAAGjG,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,QAAnC,EAA6C,CAA7C,CAAV;;AACA,MAAIC,GAAJ,EAAS;AACP,WAAOA,GAAG,CAAC5F,MAAJ,CAAW,CAAX,CAAP;AACD;AACF,CALD;;AAOAL,QAAQ,CAACkG,gBAAT,GAA4B,UAAStF,IAAT,EAAe;AACzC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,EAAZ,EAAgBK,KAAhB,CAAsB,GAAtB,CAAZ;AACA,SAAO;AACLyF,IAAAA,SAAS,EAAErF,KAAK,CAAC,CAAD,CAAL,CAASkB,WAAT,EADN;AAC8B;AACnC2D,IAAAA,KAAK,EAAE7E,KAAK,CAAC,CAAD;AAFP,GAAP;AAID,CAND,C,CAQA;AACA;AACA;;;AACAd,QAAQ,CAACoG,iBAAT,GAA6B,UAASJ,YAAT,EAAuBK,WAAvB,EAAoC;AAC/D,MAAIlB,KAAK,GAAGnF,QAAQ,CAACqB,WAAT,CAAqB2E,YAAY,GAAGK,WAApC,EACV,gBADU,CAAZ,CAD+D,CAG/D;AACA;;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,YAAY,EAAEpB,KAAK,CAACxE,GAAN,CAAUX,QAAQ,CAACkG,gBAAnB;AAFT,GAAP;AAID,CATD,C,CAWA;;;AACAlG,QAAQ,CAACwG,mBAAT,GAA+B,UAAS3B,MAAT,EAAiB4B,SAAjB,EAA4B;AACzD,MAAI3D,GAAG,GAAG,aAAa2D,SAAb,GAAyB,MAAnC;AACA5B,EAAAA,MAAM,CAAC0B,YAAP,CAAoBzB,OAApB,CAA4B,UAAS4B,EAAT,EAAa;AACvC5D,IAAAA,GAAG,IAAI,mBAAmB4D,EAAE,CAACP,SAAtB,GAAkC,GAAlC,GAAwCO,EAAE,CAACf,KAA3C,GAAmD,MAA1D;AACD,GAFD;AAGA,SAAO7C,GAAP;AACD,CAND,C,CAQA;AACA;;;AACA9C,QAAQ,CAAC2G,eAAT,GAA2B,UAAS/F,IAAT,EAAe;AACxC,MAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,CAAZ,EAAeK,KAAf,CAAqB,GAArB,CAAZ;AACA,SAAO;AACLkG,IAAAA,GAAG,EAAE9E,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADR;AAEL+F,IAAAA,WAAW,EAAE/F,KAAK,CAAC,CAAD,CAFb;AAGLgG,IAAAA,SAAS,EAAEhG,KAAK,CAAC,CAAD,CAHX;AAILiG,IAAAA,aAAa,EAAEjG,KAAK,CAACkG,KAAN,CAAY,CAAZ;AAJV,GAAP;AAMD,CARD;;AAUAhH,QAAQ,CAACiH,eAAT,GAA2B,UAASvC,UAAT,EAAqB;AAC9C,SAAO,cAAcA,UAAU,CAACkC,GAAzB,GAA+B,GAA/B,GACLlC,UAAU,CAACmC,WADN,GACoB,GADpB,IAEJ,OAAOnC,UAAU,CAACoC,SAAlB,KAAgC,QAAhC,GACG9G,QAAQ,CAACkH,oBAAT,CAA8BxC,UAAU,CAACoC,SAAzC,CADH,GAEGpC,UAAU,CAACoC,SAJV,KAKJpC,UAAU,CAACqC,aAAX,GAA2B,MAAMrC,UAAU,CAACqC,aAAX,CAAyB9D,IAAzB,CAA8B,GAA9B,CAAjC,GAAsE,EALlE,IAML,MANF;AAOD,CARD,C,CAUA;AACA;;;AACAjD,QAAQ,CAACmH,oBAAT,GAAgC,UAASL,SAAT,EAAoB;AAClD,MAAIA,SAAS,CAACtF,OAAV,CAAkB,SAAlB,MAAiC,CAArC,EAAwC;AACtC,WAAO,IAAP;AACD;;AACD,MAAIV,KAAK,GAAGgG,SAAS,CAACzG,MAAV,CAAiB,CAAjB,EAAoBK,KAApB,CAA0B,GAA1B,CAAZ;AACA,SAAO;AACL0G,IAAAA,SAAS,EAAE,QADN;AAELC,IAAAA,OAAO,EAAEvG,KAAK,CAAC,CAAD,CAFT;AAGLwG,IAAAA,QAAQ,EAAExG,KAAK,CAAC,CAAD,CAHV;AAILyG,IAAAA,QAAQ,EAAEzG,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX,GAAoCoD,SAJzC;AAKL0D,IAAAA,SAAS,EAAE1G,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX,GAAoCoD;AAL1C,GAAP;AAOD,CAZD;;AAcA9D,QAAQ,CAACkH,oBAAT,GAAgC,UAASJ,SAAT,EAAoB;AAClD,SAAOA,SAAS,CAACM,SAAV,GAAsB,GAAtB,GACHN,SAAS,CAACO,OADP,IAEJP,SAAS,CAACQ,QAAV,GAAqB,MAAMR,SAAS,CAACQ,QAArC,GAAgD,EAF5C,KAGJR,SAAS,CAACS,QAAV,IAAsBT,SAAS,CAACU,SAAhC,GACG,MAAMV,SAAS,CAACS,QAAhB,GAA2B,GAA3B,GAAiCT,SAAS,CAACU,SAD9C,GAEG,EALC,CAAP;AAMD,CAPD,C,CASA;;;AACAxH,QAAQ,CAACyH,mBAAT,GAA+B,UAASzB,YAAT,EAAuBK,WAAvB,EAAoC;AACjE,MAAIlB,KAAK,GAAGnF,QAAQ,CAACqB,WAAT,CAAqB2E,YAAY,GAAGK,WAApC,EACV,WADU,CAAZ;AAEA,SAAOlB,KAAK,CAACxE,GAAN,CAAUX,QAAQ,CAAC2G,eAAnB,CAAP;AACD,CAJD,C,CAMA;AACA;AACA;;;AACA3G,QAAQ,CAAC0H,gBAAT,GAA4B,UAAS1B,YAAT,EAAuBK,WAAvB,EAAoC;AAC9D,MAAI1D,KAAK,GAAG3C,QAAQ,CAACqB,WAAT,CAAqB2E,YAAY,GAAGK,WAApC,EACV,cADU,EACM,CADN,CAAZ;AAEA,MAAIsB,GAAG,GAAG3H,QAAQ,CAACqB,WAAT,CAAqB2E,YAAY,GAAGK,WAApC,EACR,YADQ,EACM,CADN,CAAV;;AAEA,MAAI,EAAE1D,KAAK,IAAIgF,GAAX,CAAJ,EAAqB;AACnB,WAAO,IAAP;AACD;;AACD,SAAO;AACL/E,IAAAA,gBAAgB,EAAED,KAAK,CAACtC,MAAN,CAAa,EAAb,CADb;AAELuH,IAAAA,QAAQ,EAAED,GAAG,CAACtH,MAAJ,CAAW,EAAX;AAFL,GAAP;AAID,CAZD,C,CAcA;;;AACAL,QAAQ,CAAC6H,kBAAT,GAA8B,UAAShD,MAAT,EAAiB;AAC7C,SAAO,iBAAiBA,MAAM,CAACjC,gBAAxB,GAA2C,MAA3C,GACH,YADG,GACYiC,MAAM,CAAC+C,QADnB,GAC8B,MADrC;AAED,CAHD,C,CAKA;;;AACA5H,QAAQ,CAAC8H,kBAAT,GAA8B,UAAS9B,YAAT,EAAuB;AACnD,MAAI+B,WAAW,GAAG;AAChBC,IAAAA,MAAM,EAAE,EADQ;AAEhBC,IAAAA,gBAAgB,EAAE,EAFF;AAGhBC,IAAAA,aAAa,EAAE,EAHC;AAIhBC,IAAAA,IAAI,EAAE;AAJU,GAAlB;AAMA,MAAIhD,KAAK,GAAGnF,QAAQ,CAACO,UAAT,CAAoByF,YAApB,CAAZ;AACA,MAAIoC,KAAK,GAAGjD,KAAK,CAAC,CAAD,CAAL,CAASzE,KAAT,CAAe,GAAf,CAAZ;;AACA,OAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8F,KAAK,CAAC7F,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE;AACvC,QAAIsB,EAAE,GAAGwE,KAAK,CAAC9F,CAAD,CAAd;AACA,QAAI+F,UAAU,GAAGrI,QAAQ,CAACqB,WAAT,CACf2E,YADe,EACD,cAAcpC,EAAd,GAAmB,GADlB,EACuB,CADvB,CAAjB;;AAEA,QAAIyE,UAAJ,EAAgB;AACd,UAAI1E,KAAK,GAAG3D,QAAQ,CAACmD,WAAT,CAAqBkF,UAArB,CAAZ;AACA,UAAIC,KAAK,GAAGtI,QAAQ,CAACqB,WAAT,CACV2E,YADU,EACI,YAAYpC,EAAZ,GAAiB,GADrB,CAAZ,CAFc,CAId;;AACAD,MAAAA,KAAK,CAACe,UAAN,GAAmB4D,KAAK,CAAC/F,MAAN,GAAevC,QAAQ,CAACsE,SAAT,CAAmBgE,KAAK,CAAC,CAAD,CAAxB,CAAf,GAA8C,EAAjE;AACA3E,MAAAA,KAAK,CAACyB,YAAN,GAAqBpF,QAAQ,CAACqB,WAAT,CACnB2E,YADmB,EACL,eAAepC,EAAf,GAAoB,GADf,EAElBjD,GAFkB,CAEdX,QAAQ,CAACgF,WAFK,CAArB;AAGA+C,MAAAA,WAAW,CAACC,MAAZ,CAAmBjF,IAAnB,CAAwBY,KAAxB,EATc,CAUd;;AACA,cAAQA,KAAK,CAACL,IAAN,CAAWN,WAAX,EAAR;AACE,aAAK,KAAL;AACA,aAAK,QAAL;AACE+E,UAAAA,WAAW,CAACG,aAAZ,CAA0BnF,IAA1B,CAA+BY,KAAK,CAACL,IAAN,CAAWN,WAAX,EAA/B;AACA;;AACF;AAAS;AACP;AANJ;AAQD;AACF;;AACDhD,EAAAA,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,WAAnC,EAAgDlB,OAAhD,CAAwD,UAASlE,IAAT,EAAe;AACrEmH,IAAAA,WAAW,CAACE,gBAAZ,CAA6BlF,IAA7B,CAAkC/C,QAAQ,CAAC+D,WAAT,CAAqBnD,IAArB,CAAlC;AACD,GAFD,EAlCmD,CAqCnD;;AACA,SAAOmH,WAAP;AACD,CAvCD,C,CAyCA;AACA;;;AACA/H,QAAQ,CAACuI,mBAAT,GAA+B,UAASC,IAAT,EAAeC,IAAf,EAAqB;AAClD,MAAI3F,GAAG,GAAG,EAAV,CADkD,CAGlD;;AACAA,EAAAA,GAAG,IAAI,OAAO0F,IAAP,GAAc,GAArB;AACA1F,EAAAA,GAAG,IAAI2F,IAAI,CAACT,MAAL,CAAYzF,MAAZ,GAAqB,CAArB,GAAyB,GAAzB,GAA+B,GAAtC,CALkD,CAKP;;AAC3CO,EAAAA,GAAG,IAAI,qBAAP;AACAA,EAAAA,GAAG,IAAI2F,IAAI,CAACT,MAAL,CAAYrH,GAAZ,CAAgB,UAASgD,KAAT,EAAgB;AACrC,QAAIA,KAAK,CAACE,oBAAN,KAA+BC,SAAnC,EAA8C;AAC5C,aAAOH,KAAK,CAACE,oBAAb;AACD;;AACD,WAAOF,KAAK,CAACN,WAAb;AACD,GALM,EAKJJ,IALI,CAKC,GALD,IAKQ,MALf;AAOAH,EAAAA,GAAG,IAAI,sBAAP;AACAA,EAAAA,GAAG,IAAI,6BAAP,CAfkD,CAiBlD;;AACA2F,EAAAA,IAAI,CAACT,MAAL,CAAYlD,OAAZ,CAAoB,UAASnB,KAAT,EAAgB;AAClCb,IAAAA,GAAG,IAAI9C,QAAQ,CAAC0D,WAAT,CAAqBC,KAArB,CAAP;AACAb,IAAAA,GAAG,IAAI9C,QAAQ,CAACyE,SAAT,CAAmBd,KAAnB,CAAP;AACAb,IAAAA,GAAG,IAAI9C,QAAQ,CAACkF,WAAT,CAAqBvB,KAArB,CAAP;AACD,GAJD;AAKA,MAAI+E,QAAQ,GAAG,CAAf;AACAD,EAAAA,IAAI,CAACT,MAAL,CAAYlD,OAAZ,CAAoB,UAASnB,KAAT,EAAgB;AAClC,QAAIA,KAAK,CAAC+E,QAAN,GAAiBA,QAArB,EAA+B;AAC7BA,MAAAA,QAAQ,GAAG/E,KAAK,CAAC+E,QAAjB;AACD;AACF,GAJD;;AAKA,MAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB5F,IAAAA,GAAG,IAAI,gBAAgB4F,QAAhB,GAA2B,MAAlC;AACD;;AACD5F,EAAAA,GAAG,IAAI,gBAAP;;AAEA,MAAI2F,IAAI,CAACR,gBAAT,EAA2B;AACzBQ,IAAAA,IAAI,CAACR,gBAAL,CAAsBnD,OAAtB,CAA8B,UAAS6D,SAAT,EAAoB;AAChD7F,MAAAA,GAAG,IAAI9C,QAAQ,CAACmE,WAAT,CAAqBwE,SAArB,CAAP;AACD,KAFD;AAGD,GAtCiD,CAuClD;;;AACA,SAAO7F,GAAP;AACD,CAzCD,C,CA2CA;AACA;;;AACA9C,QAAQ,CAAC4I,0BAAT,GAAsC,UAAS5C,YAAT,EAAuB;AAC3D,MAAI6C,kBAAkB,GAAG,EAAzB;AACA,MAAId,WAAW,GAAG/H,QAAQ,CAAC8H,kBAAT,CAA4B9B,YAA5B,CAAlB;AACA,MAAI8C,MAAM,GAAGf,WAAW,CAACG,aAAZ,CAA0B1G,OAA1B,CAAkC,KAAlC,MAA6C,CAAC,CAA3D;AACA,MAAIuH,SAAS,GAAGhB,WAAW,CAACG,aAAZ,CAA0B1G,OAA1B,CAAkC,QAAlC,MAAgD,CAAC,CAAjE,CAJ2D,CAM3D;;AACA,MAAIsE,KAAK,GAAG9F,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,SAAnC,EACTrF,GADS,CACL,UAASC,IAAT,EAAe;AAClB,WAAOZ,QAAQ,CAACsF,cAAT,CAAwB1E,IAAxB,CAAP;AACD,GAHS,EAITW,MAJS,CAIF,UAAST,KAAT,EAAgB;AACtB,WAAOA,KAAK,CAAC4E,SAAN,KAAoB,OAA3B;AACD,GANS,CAAZ;AAOA,MAAIsD,WAAW,GAAGlD,KAAK,CAACvD,MAAN,GAAe,CAAf,IAAoBuD,KAAK,CAAC,CAAD,CAAL,CAASN,IAA/C;AACA,MAAIyD,aAAJ;AAEA,MAAIC,KAAK,GAAGlJ,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,kBAAnC,EACTrF,GADS,CACL,UAASC,IAAT,EAAe;AAClB,QAAIE,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,EAAZ,EAAgBK,KAAhB,CAAsB,GAAtB,CAAZ;AACA,WAAOI,KAAK,CAACH,GAAN,CAAU,UAASI,IAAT,EAAe;AAC9B,aAAOe,QAAQ,CAACf,IAAD,EAAO,EAAP,CAAf;AACD,KAFM,CAAP;AAGD,GANS,CAAZ;;AAOA,MAAImI,KAAK,CAAC3G,MAAN,GAAe,CAAf,IAAoB2G,KAAK,CAAC,CAAD,CAAL,CAAS3G,MAAT,GAAkB,CAAtC,IAA2C2G,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgBF,WAA/D,EAA4E;AAC1EC,IAAAA,aAAa,GAAGC,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAhB;AACD;;AAEDnB,EAAAA,WAAW,CAACC,MAAZ,CAAmBlD,OAAnB,CAA2B,UAASnB,KAAT,EAAgB;AACzC,QAAIA,KAAK,CAACL,IAAN,CAAWN,WAAX,OAA6B,KAA7B,IAAsCW,KAAK,CAACe,UAAN,CAAiByE,GAA3D,EAAgE;AAC9D,UAAIC,QAAQ,GAAG;AACb5D,QAAAA,IAAI,EAAEwD,WADO;AAEbK,QAAAA,gBAAgB,EAAEvH,QAAQ,CAAC6B,KAAK,CAACe,UAAN,CAAiByE,GAAlB,EAAuB,EAAvB;AAFb,OAAf;;AAIA,UAAIH,WAAW,IAAIC,aAAnB,EAAkC;AAChCG,QAAAA,QAAQ,CAACE,GAAT,GAAe;AAAC9D,UAAAA,IAAI,EAAEyD;AAAP,SAAf;AACD;;AACDJ,MAAAA,kBAAkB,CAAC9F,IAAnB,CAAwBqG,QAAxB;;AACA,UAAIN,MAAJ,EAAY;AACVM,QAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAf,CAAX,CAAX;AACAA,QAAAA,QAAQ,CAACM,GAAT,GAAe;AACblE,UAAAA,IAAI,EAAEwD,WADO;AAEbW,UAAAA,SAAS,EAAEZ,SAAS,GAAG,YAAH,GAAkB;AAFzB,SAAf;AAIAF,QAAAA,kBAAkB,CAAC9F,IAAnB,CAAwBqG,QAAxB;AACD;AACF;AACF,GAnBD;;AAoBA,MAAIP,kBAAkB,CAACtG,MAAnB,KAA8B,CAA9B,IAAmCyG,WAAvC,EAAoD;AAClDH,IAAAA,kBAAkB,CAAC9F,IAAnB,CAAwB;AACtByC,MAAAA,IAAI,EAAEwD;AADgB,KAAxB;AAGD,GApD0D,CAsD3D;;;AACA,MAAIY,SAAS,GAAG5J,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,IAAnC,CAAhB;;AACA,MAAI4D,SAAS,CAACrH,MAAd,EAAsB;AACpB,QAAIqH,SAAS,CAAC,CAAD,CAAT,CAAapI,OAAb,CAAqB,SAArB,MAAoC,CAAxC,EAA2C;AACzCoI,MAAAA,SAAS,GAAG9H,QAAQ,CAAC8H,SAAS,CAAC,CAAD,CAAT,CAAavJ,MAAb,CAAoB,CAApB,CAAD,EAAyB,EAAzB,CAApB;AACD,KAFD,MAEO,IAAIuJ,SAAS,CAAC,CAAD,CAAT,CAAapI,OAAb,CAAqB,OAArB,MAAkC,CAAtC,EAAyC;AAC9C;AACAoI,MAAAA,SAAS,GAAG9H,QAAQ,CAAC8H,SAAS,CAAC,CAAD,CAAT,CAAavJ,MAAb,CAAoB,CAApB,CAAD,EAAyB,EAAzB,CAAR,GAAuC,IAAvC,GAA8C,IAA9C,GACL,KAAK,EAAL,GAAU,CADjB;AAED,KAJM,MAIA;AACLuJ,MAAAA,SAAS,GAAG9F,SAAZ;AACD;;AACD+E,IAAAA,kBAAkB,CAAC/D,OAAnB,CAA2B,UAASD,MAAT,EAAiB;AAC1CA,MAAAA,MAAM,CAACgF,UAAP,GAAoBD,SAApB;AACD,KAFD;AAGD;;AACD,SAAOf,kBAAP;AACD,CAvED,C,CAyEA;;;AACA7I,QAAQ,CAAC8J,mBAAT,GAA+B,UAAS9D,YAAT,EAAuB;AACpD,MAAI+D,cAAc,GAAG,EAArB,CADoD,CAGpD;AACA;;AACA,MAAIC,UAAU,GAAGhK,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,SAAnC,EACdrF,GADc,CACV,UAASC,IAAT,EAAe;AAClB,WAAOZ,QAAQ,CAACsF,cAAT,CAAwB1E,IAAxB,CAAP;AACD,GAHc,EAIdW,MAJc,CAIP,UAAS0I,GAAT,EAAc;AACpB,WAAOA,GAAG,CAACvE,SAAJ,KAAkB,OAAzB;AACD,GANc,EAMZ,CANY,CAAjB;;AAOA,MAAIsE,UAAJ,EAAgB;AACdD,IAAAA,cAAc,CAACG,KAAf,GAAuBF,UAAU,CAACrE,KAAlC;AACAoE,IAAAA,cAAc,CAACvE,IAAf,GAAsBwE,UAAU,CAACxE,IAAjC;AACD,GAfmD,CAiBpD;AACA;;;AACA,MAAI2E,KAAK,GAAGnK,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,cAAnC,CAAZ;AACA+D,EAAAA,cAAc,CAACK,WAAf,GAA6BD,KAAK,CAAC5H,MAAN,GAAe,CAA5C;AACAwH,EAAAA,cAAc,CAACM,QAAf,GAA0BF,KAAK,CAAC5H,MAAN,KAAiB,CAA3C,CArBoD,CAuBpD;AACA;;AACA,MAAI+H,GAAG,GAAGtK,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,YAAnC,CAAV;AACA+D,EAAAA,cAAc,CAACO,GAAf,GAAqBA,GAAG,CAAC/H,MAAJ,GAAa,CAAlC;AAEA,SAAOwH,cAAP;AACD,CA7BD,C,CA+BA;AACA;;;AACA/J,QAAQ,CAACuK,SAAT,GAAqB,UAASvE,YAAT,EAAuB;AAC1C,MAAIlF,KAAJ;AACA,MAAI0J,IAAI,GAAGxK,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,SAAnC,CAAX;;AACA,MAAIwE,IAAI,CAACjI,MAAL,KAAgB,CAApB,EAAuB;AACrBzB,IAAAA,KAAK,GAAG0J,IAAI,CAAC,CAAD,CAAJ,CAAQnK,MAAR,CAAe,CAAf,EAAkBK,KAAlB,CAAwB,GAAxB,CAAR;AACA,WAAO;AAAC+J,MAAAA,MAAM,EAAE3J,KAAK,CAAC,CAAD,CAAd;AAAmB4J,MAAAA,KAAK,EAAE5J,KAAK,CAAC,CAAD;AAA/B,KAAP;AACD;;AACD,MAAI6J,KAAK,GAAG3K,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,SAAnC,EACTrF,GADS,CACL,UAASC,IAAT,EAAe;AAClB,WAAOZ,QAAQ,CAACsF,cAAT,CAAwB1E,IAAxB,CAAP;AACD,GAHS,EAITW,MAJS,CAIF,UAASqJ,SAAT,EAAoB;AAC1B,WAAOA,SAAS,CAAClF,SAAV,KAAwB,MAA/B;AACD,GANS,CAAZ;;AAOA,MAAIiF,KAAK,CAACpI,MAAN,GAAe,CAAnB,EAAsB;AACpBzB,IAAAA,KAAK,GAAG6J,KAAK,CAAC,CAAD,CAAL,CAAShF,KAAT,CAAejF,KAAf,CAAqB,GAArB,CAAR;AACA,WAAO;AAAC+J,MAAAA,MAAM,EAAE3J,KAAK,CAAC,CAAD,CAAd;AAAmB4J,MAAAA,KAAK,EAAE5J,KAAK,CAAC,CAAD;AAA/B,KAAP;AACD;AACF,CAlBD,C,CAoBA;AACA;AACA;;;AACAd,QAAQ,CAAC6K,oBAAT,GAAgC,UAAS7E,YAAT,EAAuB;AACrD,MAAIoC,KAAK,GAAGpI,QAAQ,CAAC8K,UAAT,CAAoB9E,YAApB,CAAZ;AACA,MAAI+E,WAAW,GAAG/K,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,qBAAnC,CAAlB;AACA,MAAIgF,cAAJ;;AACA,MAAID,WAAW,CAACxI,MAAZ,GAAqB,CAAzB,EAA4B;AAC1ByI,IAAAA,cAAc,GAAGlJ,QAAQ,CAACiJ,WAAW,CAAC,CAAD,CAAX,CAAe1K,MAAf,CAAsB,EAAtB,CAAD,EAA4B,EAA5B,CAAzB;AACD;;AACD,MAAI4K,KAAK,CAACD,cAAD,CAAT,EAA2B;AACzBA,IAAAA,cAAc,GAAG,KAAjB;AACD;;AACD,MAAIE,QAAQ,GAAGlL,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,cAAnC,CAAf;;AACA,MAAIkF,QAAQ,CAAC3I,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAO;AACLH,MAAAA,IAAI,EAAEN,QAAQ,CAACoJ,QAAQ,CAAC,CAAD,CAAR,CAAY7K,MAAZ,CAAmB,EAAnB,CAAD,EAAyB,EAAzB,CADT;AAEL0B,MAAAA,QAAQ,EAAEqG,KAAK,CAAC+C,GAFX;AAGLH,MAAAA,cAAc,EAAEA;AAHX,KAAP;AAKD;;AACD,MAAII,YAAY,GAAGpL,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,YAAnC,CAAnB;;AACA,MAAIoF,YAAY,CAAC7I,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,QAAIzB,KAAK,GAAGd,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,YAAnC,EAAiD,CAAjD,EACT3F,MADS,CACF,EADE,EAETK,KAFS,CAEH,GAFG,CAAZ;AAGA,WAAO;AACL0B,MAAAA,IAAI,EAAEN,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADT;AAELiB,MAAAA,QAAQ,EAAEjB,KAAK,CAAC,CAAD,CAFV;AAGLkK,MAAAA,cAAc,EAAEA;AAHX,KAAP;AAKD;AACF,CA7BD,C,CA+BA;AACA;AACA;AACA;AACA;;;AACAhL,QAAQ,CAACqL,oBAAT,GAAgC,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;AACpD,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIF,KAAK,CAACvJ,QAAN,KAAmB,WAAvB,EAAoC;AAClCyJ,IAAAA,MAAM,GAAG,CACP,OAAOF,KAAK,CAAC9C,IAAb,GAAoB,KAApB,GAA4B8C,KAAK,CAACvJ,QAAlC,GAA6C,GAA7C,GAAmDwJ,IAAI,CAACxJ,QAAxD,GAAmE,MAD5D,EAEP,sBAFO,EAGP,iBAAiBwJ,IAAI,CAACnJ,IAAtB,GAA6B,MAHtB,CAAT;AAKD,GAND,MAMO;AACLoJ,IAAAA,MAAM,GAAG,CACP,OAAOF,KAAK,CAAC9C,IAAb,GAAoB,KAApB,GAA4B8C,KAAK,CAACvJ,QAAlC,GAA6C,GAA7C,GAAmDwJ,IAAI,CAACnJ,IAAxD,GAA+D,MADxD,EAEP,sBAFO,EAGP,eAAemJ,IAAI,CAACnJ,IAApB,GAA2B,GAA3B,GAAiCmJ,IAAI,CAACxJ,QAAtC,GAAiD,YAH1C,CAAT;AAKD;;AACD,MAAIwJ,IAAI,CAACP,cAAL,KAAwBlH,SAA5B,EAAuC;AACrC0H,IAAAA,MAAM,CAACzI,IAAP,CAAY,wBAAwBwI,IAAI,CAACP,cAA7B,GAA8C,MAA1D;AACD;;AACD,SAAOQ,MAAM,CAACvI,IAAP,CAAY,EAAZ,CAAP;AACD,CAnBD,C,CAqBA;AACA;AACA;AACA;;;AACAjD,QAAQ,CAACyL,iBAAT,GAA6B,YAAW;AACtC,SAAOvL,IAAI,CAACC,MAAL,GAAcC,QAAd,GAAyBC,MAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;;;AACAL,QAAQ,CAAC0L,uBAAT,GAAmC,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoC;AACrE,MAAIC,SAAJ;AACA,MAAIC,OAAO,GAAGH,OAAO,KAAK9H,SAAZ,GAAwB8H,OAAxB,GAAkC,CAAhD;;AACA,MAAID,MAAJ,EAAY;AACVG,IAAAA,SAAS,GAAGH,MAAZ;AACD,GAFD,MAEO;AACLG,IAAAA,SAAS,GAAG9L,QAAQ,CAACyL,iBAAT,EAAZ;AACD;;AACD,MAAIO,IAAI,GAAGH,QAAQ,IAAI,mBAAvB,CARqE,CASrE;;AACA,SAAO,YACH,IADG,GACIG,IADJ,GACW,GADX,GACiBF,SADjB,GAC6B,GAD7B,GACmCC,OADnC,GAED,uBAFC,GAGH,SAHG,GAIH,WAJJ;AAKD,CAfD;;AAiBA/L,QAAQ,CAACiM,iBAAT,GAA6B,UAASC,WAAT,EAAsBzD,IAAtB,EAA4BpG,IAA5B,EAAkCoI,MAAlC,EAA0C;AACrE,MAAI3H,GAAG,GAAG9C,QAAQ,CAACuI,mBAAT,CAA6B2D,WAAW,CAAC1D,IAAzC,EAA+CC,IAA/C,CAAV,CADqE,CAGrE;;AACA3F,EAAAA,GAAG,IAAI9C,QAAQ,CAAC6H,kBAAT,CACLqE,WAAW,CAACC,WAAZ,CAAwBC,kBAAxB,EADK,CAAP,CAJqE,CAOrE;;AACAtJ,EAAAA,GAAG,IAAI9C,QAAQ,CAACwG,mBAAT,CACL0F,WAAW,CAACG,aAAZ,CAA0BD,kBAA1B,EADK,EAEL/J,IAAI,KAAK,OAAT,GAAmB,SAAnB,GAA+B,QAF1B,CAAP;AAIAS,EAAAA,GAAG,IAAI,WAAWoJ,WAAW,CAACjG,GAAvB,GAA6B,MAApC;;AAEA,MAAIiG,WAAW,CAACjI,SAAhB,EAA2B;AACzBnB,IAAAA,GAAG,IAAI,OAAOoJ,WAAW,CAACjI,SAAnB,GAA+B,MAAtC;AACD,GAFD,MAEO,IAAIiI,WAAW,CAACI,SAAZ,IAAyBJ,WAAW,CAACK,WAAzC,EAAsD;AAC3DzJ,IAAAA,GAAG,IAAI,gBAAP;AACD,GAFM,MAEA,IAAIoJ,WAAW,CAACI,SAAhB,EAA2B;AAChCxJ,IAAAA,GAAG,IAAI,gBAAP;AACD,GAFM,MAEA,IAAIoJ,WAAW,CAACK,WAAhB,EAA6B;AAClCzJ,IAAAA,GAAG,IAAI,gBAAP;AACD,GAFM,MAEA;AACLA,IAAAA,GAAG,IAAI,gBAAP;AACD;;AAED,MAAIoJ,WAAW,CAACI,SAAhB,EAA2B;AACzB;AACA,QAAIE,IAAI,GAAG,UAAU/B,MAAM,CAACzG,EAAjB,GAAsB,GAAtB,GACPkI,WAAW,CAACI,SAAZ,CAAsB5B,KAAtB,CAA4B1G,EADrB,GAC0B,MADrC;AAEAlB,IAAAA,GAAG,IAAI,OAAO0J,IAAd,CAJyB,CAMzB;;AACA1J,IAAAA,GAAG,IAAI,YAAYoJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCjH,IAAlD,GACH,GADG,GACGgH,IADV;;AAEA,QAAIN,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCnD,GAA1C,EAA+C;AAC7CxG,MAAAA,GAAG,IAAI,YAAYoJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCnD,GAAtC,CAA0C9D,IAAtD,GACH,GADG,GACGgH,IADV;AAEA1J,MAAAA,GAAG,IAAI,sBACHoJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCjH,IADnC,GAC0C,GAD1C,GAEH0G,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCnD,GAAtC,CAA0C9D,IAFvC,GAGH,MAHJ;AAID;AACF,GA3CoE,CA4CrE;;;AACA1C,EAAAA,GAAG,IAAI,YAAYoJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCjH,IAAlD,GACH,SADG,GACSxF,QAAQ,CAACM,UADlB,GAC+B,MADtC;;AAEA,MAAI4L,WAAW,CAACI,SAAZ,IAAyBJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCnD,GAAnE,EAAwE;AACtExG,IAAAA,GAAG,IAAI,YAAYoJ,WAAW,CAACO,sBAAZ,CAAmC,CAAnC,EAAsCnD,GAAtC,CAA0C9D,IAAtD,GACH,SADG,GACSxF,QAAQ,CAACM,UADlB,GAC+B,MADtC;AAED;;AACD,SAAOwC,GAAP;AACD,CApDD,C,CAsDA;;;AACA9C,QAAQ,CAAC0M,YAAT,GAAwB,UAAS1G,YAAT,EAAuBK,WAAvB,EAAoC;AAC1D;AACA,MAAIlB,KAAK,GAAGnF,QAAQ,CAACO,UAAT,CAAoByF,YAApB,CAAZ;;AACA,OAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,KAAK,CAAC5C,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAQ6C,KAAK,CAAC7C,CAAD,CAAb;AACE,WAAK,YAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACE,eAAO6C,KAAK,CAAC7C,CAAD,CAAL,CAASjC,MAAT,CAAgB,CAAhB,CAAP;;AACF,cANF,CAOI;;AAPJ;AASD;;AACD,MAAIgG,WAAJ,EAAiB;AACf,WAAOrG,QAAQ,CAAC0M,YAAT,CAAsBrG,WAAtB,CAAP;AACD;;AACD,SAAO,UAAP;AACD,CAlBD;;AAoBArG,QAAQ,CAAC2M,OAAT,GAAmB,UAAS3G,YAAT,EAAuB;AACxC,MAAIb,KAAK,GAAGnF,QAAQ,CAACO,UAAT,CAAoByF,YAApB,CAAZ;AACA,MAAIoC,KAAK,GAAGjD,KAAK,CAAC,CAAD,CAAL,CAASzE,KAAT,CAAe,GAAf,CAAZ;AACA,SAAO0H,KAAK,CAAC,CAAD,CAAL,CAAS/H,MAAT,CAAgB,CAAhB,CAAP;AACD,CAJD;;AAMAL,QAAQ,CAAC4M,UAAT,GAAsB,UAAS5G,YAAT,EAAuB;AAC3C,SAAOA,YAAY,CAACtF,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B,MAAkC,GAAzC;AACD,CAFD;;AAIAV,QAAQ,CAAC8K,UAAT,GAAsB,UAAS9E,YAAT,EAAuB;AAC3C,MAAIb,KAAK,GAAGnF,QAAQ,CAACO,UAAT,CAAoByF,YAApB,CAAZ;AACA,MAAIlF,KAAK,GAAGqE,KAAK,CAAC,CAAD,CAAL,CAAS9E,MAAT,CAAgB,CAAhB,EAAmBK,KAAnB,CAAyB,GAAzB,CAAZ;AACA,SAAO;AACL8H,IAAAA,IAAI,EAAE1H,KAAK,CAAC,CAAD,CADN;AAELsB,IAAAA,IAAI,EAAEN,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAFT;AAGLiB,IAAAA,QAAQ,EAAEjB,KAAK,CAAC,CAAD,CAHV;AAILqK,IAAAA,GAAG,EAAErK,KAAK,CAACkG,KAAN,CAAY,CAAZ,EAAe/D,IAAf,CAAoB,GAApB;AAJA,GAAP;AAMD,CATD;;AAWAjD,QAAQ,CAAC6M,UAAT,GAAsB,UAAS7G,YAAT,EAAuB;AAC3C,MAAIpF,IAAI,GAAGZ,QAAQ,CAACqB,WAAT,CAAqB2E,YAArB,EAAmC,IAAnC,EAAyC,CAAzC,CAAX;AACA,MAAIlF,KAAK,GAAGF,IAAI,CAACP,MAAL,CAAY,CAAZ,EAAeK,KAAf,CAAqB,GAArB,CAAZ;AACA,SAAO;AACLoM,IAAAA,QAAQ,EAAEhM,KAAK,CAAC,CAAD,CADV;AAELgL,IAAAA,SAAS,EAAEhL,KAAK,CAAC,CAAD,CAFX;AAGLiM,IAAAA,cAAc,EAAEjL,QAAQ,CAAChB,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAHnB;AAILkM,IAAAA,OAAO,EAAElM,KAAK,CAAC,CAAD,CAJT;AAKLmM,IAAAA,WAAW,EAAEnM,KAAK,CAAC,CAAD,CALb;AAMLqB,IAAAA,OAAO,EAAErB,KAAK,CAAC,CAAD;AANT,GAAP;AAQD,CAXD,C,CAaA;;;AACAd,QAAQ,CAACkN,UAAT,GAAsB,UAAS1M,IAAT,EAAe;AACnC,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAAC+B,MAAL,KAAgB,CAAhD,EAAmD;AACjD,WAAO,KAAP;AACD;;AACD,MAAI4C,KAAK,GAAGnF,QAAQ,CAACO,UAAT,CAAoBC,IAApB,CAAZ;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,KAAK,CAAC5C,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAI6C,KAAK,CAAC7C,CAAD,CAAL,CAASC,MAAT,GAAkB,CAAlB,IAAuB4C,KAAK,CAAC7C,CAAD,CAAL,CAAS6K,MAAT,CAAgB,CAAhB,MAAuB,GAAlD,EAAuD;AACrD,aAAO,KAAP;AACD,KAHoC,CAIrC;;AACD;;AACD,SAAO,IAAP;AACD,CAZD,C,CAcA;;;AACA,IAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,EAAAA,MAAM,CAACC,OAAP,GAAiBrN,QAAjB;AACD","sourcesContent":["/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n"]},"metadata":{},"sourceType":"script"}