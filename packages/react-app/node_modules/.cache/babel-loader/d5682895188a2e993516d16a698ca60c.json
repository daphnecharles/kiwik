{"ast":null,"code":"import { GraphQLNonNull, GraphQLList } from 'graphql';\nimport escapeHTML from 'escape-html';\nimport MD from 'markdown-it';\nvar md = new MD();\nexport default function onHasCompletion(_cm, data, onHintInformationRender) {\n  var CodeMirror = require('codemirror');\n\n  var information;\n  var deprecation;\n  CodeMirror.on(data, 'select', function (ctx, el) {\n    if (!information) {\n      var hintsUl_1 = el.parentNode;\n      information = document.createElement('div');\n      information.className = 'CodeMirror-hint-information';\n      hintsUl_1.appendChild(information);\n      deprecation = document.createElement('div');\n      deprecation.className = 'CodeMirror-hint-deprecation';\n      hintsUl_1.appendChild(deprecation);\n\n      var _onRemoveFn_;\n\n      hintsUl_1.addEventListener('DOMNodeRemoved', _onRemoveFn_ = function onRemoveFn_1(event) {\n        if (event.target === hintsUl_1) {\n          hintsUl_1.removeEventListener('DOMNodeRemoved', _onRemoveFn_);\n          information = null;\n          deprecation = null;\n          _onRemoveFn_ = null;\n        }\n      });\n    }\n\n    var description = ctx.description ? md.render(ctx.description) : 'Self descriptive.';\n    var type = ctx.type ? '<span class=\"infoType\">' + renderType(ctx.type) + '</span>' : '';\n    information.innerHTML = '<div class=\"content\">' + (description.slice(0, 3) === '<p>' ? '<p>' + type + description.slice(3) : type + description) + '</div>';\n\n    if (ctx && deprecation && ctx.isDeprecated) {\n      var reason = ctx.deprecationReason ? md.render(ctx.deprecationReason) : '';\n      deprecation.innerHTML = '<span class=\"deprecation-label\">Deprecated</span>' + reason;\n      deprecation.style.display = 'block';\n    } else if (deprecation) {\n      deprecation.style.display = 'none';\n    }\n\n    if (onHintInformationRender) {\n      onHintInformationRender(information);\n    }\n  });\n}\n\nfunction renderType(type) {\n  if (type instanceof GraphQLNonNull) {\n    return renderType(type.ofType) + \"!\";\n  }\n\n  if (type instanceof GraphQLList) {\n    return \"[\" + renderType(type.ofType) + \"]\";\n  }\n\n  return \"<a class=\\\"typeName\\\">\" + escapeHTML(type.name) + \"</a>\";\n}","map":{"version":3,"sources":["../../src/utility/onHasCompletion.ts"],"names":[],"mappings":"AAQA,SACE,cADF,EAEE,WAFF,QAKO,SALP;AAMA,OAAO,UAAP,MAAuB,aAAvB;AACA,OAAO,EAAP,MAAe,aAAf;AAEA,IAAM,EAAE,GAAG,IAAI,EAAJ,EAAX;AAMA,eAAc,SAAU,eAAV,CACZ,GADY,EAEZ,IAFY,EAGZ,uBAHY,EAGyC;AAErD,MAAM,UAAU,GAAG,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAI,WAAJ;AACA,MAAI,WAAJ;AAGA,EAAA,UAAU,CAAC,EAAX,CACE,IADF,EAEE,QAFF,EAGE,UAAC,GAAD,EAAgC,EAAhC,EAAkD;AAGhD,QAAI,CAAC,WAAL,EAAkB;AAChB,UAAM,SAAO,GAAG,EAAE,CAAC,UAAnB;AAIA,MAAA,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAd;AACA,MAAA,WAAW,CAAC,SAAZ,GAAwB,6BAAxB;AACA,MAAA,SAAO,CAAC,WAAR,CAAoB,WAApB;AAGA,MAAA,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAd;AACA,MAAA,WAAW,CAAC,SAAZ,GAAwB,6BAAxB;AACA,MAAA,SAAO,CAAC,WAAR,CAAoB,WAApB;;AAIA,UAAI,YAAJ;;AACA,MAAA,SAAO,CAAC,gBAAR,CACE,gBADF,EAEG,YAAU,GAAG,sBAAC,KAAD,EAAa;AACzB,YAAI,KAAK,CAAC,MAAN,KAAiB,SAArB,EAA8B;AAC5B,UAAA,SAAO,CAAC,mBAAR,CAA4B,gBAA5B,EAA8C,YAA9C;AACA,UAAA,WAAW,GAAG,IAAd;AACA,UAAA,WAAW,GAAG,IAAd;AACA,UAAA,YAAU,GAAG,IAAb;AACD;AACF,OATH;AAWD;;AAGD,QAAM,WAAW,GAAG,GAAG,CAAC,WAAJ,GAChB,EAAE,CAAC,MAAH,CAAU,GAAG,CAAC,WAAd,CADgB,GAEhB,mBAFJ;AAGA,QAAM,IAAI,GAAG,GAAG,CAAC,IAAJ,GACT,4BAA4B,UAAU,CAAC,GAAG,CAAC,IAAL,CAAtC,GAAmD,SAD1C,GAET,EAFJ;AAIA,IAAA,WAAW,CAAC,SAAZ,GACE,2BACC,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,MAA4B,KAA5B,GACG,QAAQ,IAAR,GAAe,WAAW,CAAC,KAAZ,CAAkB,CAAlB,CADlB,GAEG,IAAI,GAAG,WAHX,IAIA,QALF;;AAOA,QAAI,GAAG,IAAI,WAAP,IAAsB,GAAG,CAAC,YAA9B,EAA4C;AAC1C,UAAM,MAAM,GAAG,GAAG,CAAC,iBAAJ,GACX,EAAE,CAAC,MAAH,CAAU,GAAG,CAAC,iBAAd,CADW,GAEX,EAFJ;AAGA,MAAA,WAAW,CAAC,SAAZ,GACE,sDAAsD,MADxD;AAEA,MAAA,WAAW,CAAC,KAAZ,CAAkB,OAAlB,GAA4B,OAA5B;AACD,KAPD,MAOO,IAAI,WAAJ,EAAiB;AACtB,MAAA,WAAW,CAAC,KAAZ,CAAkB,OAAlB,GAA4B,MAA5B;AACD;;AAGD,QAAI,uBAAJ,EAA6B;AAC3B,MAAA,uBAAuB,CAAC,WAAD,CAAvB;AACD;AACF,GAlEH;AAoED;;AAED,SAAS,UAAT,CAAoB,IAApB,EAAqC;AACnC,MAAI,IAAI,YAAY,cAApB,EAAoC;AAClC,WAAU,UAAU,CAAC,IAAI,CAAC,MAAN,CAAV,GAAuB,GAAjC;AACD;;AACD,MAAI,IAAI,YAAY,WAApB,EAAiC;AAC/B,WAAO,MAAI,UAAU,CAAC,IAAI,CAAC,MAAN,CAAd,GAA2B,GAAlC;AACD;;AACD,SAAO,2BAAuB,UAAU,CAAC,IAAI,CAAC,IAAN,CAAjC,GAA4C,MAAnD;AACD","sourceRoot":"","sourcesContent":["import { GraphQLNonNull, GraphQLList, } from 'graphql';\nimport escapeHTML from 'escape-html';\nimport MD from 'markdown-it';\nvar md = new MD();\nexport default function onHasCompletion(_cm, data, onHintInformationRender) {\n    var CodeMirror = require('codemirror');\n    var information;\n    var deprecation;\n    CodeMirror.on(data, 'select', function (ctx, el) {\n        if (!information) {\n            var hintsUl_1 = el.parentNode;\n            information = document.createElement('div');\n            information.className = 'CodeMirror-hint-information';\n            hintsUl_1.appendChild(information);\n            deprecation = document.createElement('div');\n            deprecation.className = 'CodeMirror-hint-deprecation';\n            hintsUl_1.appendChild(deprecation);\n            var onRemoveFn_1;\n            hintsUl_1.addEventListener('DOMNodeRemoved', (onRemoveFn_1 = function (event) {\n                if (event.target === hintsUl_1) {\n                    hintsUl_1.removeEventListener('DOMNodeRemoved', onRemoveFn_1);\n                    information = null;\n                    deprecation = null;\n                    onRemoveFn_1 = null;\n                }\n            }));\n        }\n        var description = ctx.description\n            ? md.render(ctx.description)\n            : 'Self descriptive.';\n        var type = ctx.type\n            ? '<span class=\"infoType\">' + renderType(ctx.type) + '</span>'\n            : '';\n        information.innerHTML =\n            '<div class=\"content\">' +\n                (description.slice(0, 3) === '<p>'\n                    ? '<p>' + type + description.slice(3)\n                    : type + description) +\n                '</div>';\n        if (ctx && deprecation && ctx.isDeprecated) {\n            var reason = ctx.deprecationReason\n                ? md.render(ctx.deprecationReason)\n                : '';\n            deprecation.innerHTML =\n                '<span class=\"deprecation-label\">Deprecated</span>' + reason;\n            deprecation.style.display = 'block';\n        }\n        else if (deprecation) {\n            deprecation.style.display = 'none';\n        }\n        if (onHintInformationRender) {\n            onHintInformationRender(information);\n        }\n    });\n}\nfunction renderType(type) {\n    if (type instanceof GraphQLNonNull) {\n        return renderType(type.ofType) + \"!\";\n    }\n    if (type instanceof GraphQLList) {\n        return \"[\" + renderType(type.ofType) + \"]\";\n    }\n    return \"<a class=\\\"typeName\\\">\" + escapeHTML(type.name) + \"</a>\";\n}\n//# sourceMappingURL=onHasCompletion.js.map"]},"metadata":{},"sourceType":"module"}