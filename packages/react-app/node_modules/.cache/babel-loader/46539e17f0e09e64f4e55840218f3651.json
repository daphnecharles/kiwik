{"ast":null,"code":"// Process escaped chars and hardbreaks\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\n\nmodule.exports = function escape(state, silent) {\n  var ch,\n      pos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C\n  /* \\ */\n  ) {\n    return false;\n  }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) {\n        state.pending += state.src[pos];\n      }\n\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++; // skip leading whitespaces from next line\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (!isSpace(ch)) {\n          break;\n        }\n\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) {\n    state.pending += '\\\\';\n  }\n\n  state.pos++;\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_inline/escape.js"],"names":["isSpace","require","ESCAPED","i","push","split","forEach","ch","charCodeAt","module","exports","escape","state","silent","pos","max","posMax","src","pending"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,OAAzC;;AAEA,IAAIE,OAAO,GAAG,EAAd;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAAED,EAAAA,OAAO,CAACE,IAAR,CAAa,CAAb;AAAkB;;AAElD,qCACGC,KADH,CACS,EADT,EACaC,OADb,CACqB,UAAUC,EAAV,EAAc;AAAEL,EAAAA,OAAO,CAACK,EAAE,CAACC,UAAH,CAAc,CAAd,CAAD,CAAP,GAA4B,CAA5B;AAAgC,CADrE;;AAIAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;AAC9C,MAAIN,EAAJ;AAAA,MAAQO,GAAG,GAAGF,KAAK,CAACE,GAApB;AAAA,MAAyBC,GAAG,GAAGH,KAAK,CAACI,MAArC;;AAEA,MAAIJ,KAAK,CAACK,GAAN,CAAUT,UAAV,CAAqBM,GAArB,MAA8B;AAAI;AAAtC,IAA+C;AAAE,WAAO,KAAP;AAAe;;AAEhEA,EAAAA,GAAG;;AAEH,MAAIA,GAAG,GAAGC,GAAV,EAAe;AACbR,IAAAA,EAAE,GAAGK,KAAK,CAACK,GAAN,CAAUT,UAAV,CAAqBM,GAArB,CAAL;;AAEA,QAAIP,EAAE,GAAG,GAAL,IAAYL,OAAO,CAACK,EAAD,CAAP,KAAgB,CAAhC,EAAmC;AACjC,UAAI,CAACM,MAAL,EAAa;AAAED,QAAAA,KAAK,CAACM,OAAN,IAAiBN,KAAK,CAACK,GAAN,CAAUH,GAAV,CAAjB;AAAkC;;AACjDF,MAAAA,KAAK,CAACE,GAAN,IAAa,CAAb;AACA,aAAO,IAAP;AACD;;AAED,QAAIP,EAAE,KAAK,IAAX,EAAiB;AACf,UAAI,CAACM,MAAL,EAAa;AACXD,QAAAA,KAAK,CAACR,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;AACD;;AAEDU,MAAAA,GAAG,GALY,CAMf;;AACA,aAAOA,GAAG,GAAGC,GAAb,EAAkB;AAChBR,QAAAA,EAAE,GAAGK,KAAK,CAACK,GAAN,CAAUT,UAAV,CAAqBM,GAArB,CAAL;;AACA,YAAI,CAACd,OAAO,CAACO,EAAD,CAAZ,EAAkB;AAAE;AAAQ;;AAC5BO,QAAAA,GAAG;AACJ;;AAEDF,MAAAA,KAAK,CAACE,GAAN,GAAYA,GAAZ;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACD,MAAL,EAAa;AAAED,IAAAA,KAAK,CAACM,OAAN,IAAiB,IAAjB;AAAwB;;AACvCN,EAAAA,KAAK,CAACE,GAAN;AACA,SAAO,IAAP;AACD,CArCD","sourcesContent":["// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}