{"ast":null,"code":"module.exports = encode;\nvar MSB = 0x80,\n    REST = 0x7F,\n    MSBALL = ~REST,\n    INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0;\n    throw new RangeError('Could not encode varint');\n  }\n\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while (num >= INT) {\n    out[offset++] = num & 0xFF | MSB;\n    num /= 128;\n  }\n\n  while (num & MSBALL) {\n    out[offset++] = num & 0xFF | MSB;\n    num >>>= 7;\n  }\n\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/multiaddr/node_modules/varint/encode.js"],"names":["module","exports","encode","MSB","REST","MSBALL","INT","Math","pow","num","out","offset","Number","MAX_SAFE_INTEGER","bytes","RangeError","oldOffset"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA,IAAIC,GAAG,GAAG,IAAV;AAAA,IACIC,IAAI,GAAG,IADX;AAAA,IAEIC,MAAM,GAAG,CAACD,IAFd;AAAA,IAGIE,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAHV;;AAKA,SAASN,MAAT,CAAgBO,GAAhB,EAAqBC,GAArB,EAA0BC,MAA1B,EAAkC;AAChC,MAAIC,MAAM,CAACC,gBAAP,IAA2BJ,GAAG,GAAGG,MAAM,CAACC,gBAA5C,EAA8D;AAC5DX,IAAAA,MAAM,CAACY,KAAP,GAAe,CAAf;AACA,UAAM,IAAIC,UAAJ,CAAe,yBAAf,CAAN;AACD;;AACDL,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACA,MAAIK,SAAS,GAAGL,MAAhB;;AAEA,SAAMF,GAAG,IAAIH,GAAb,EAAkB;AAChBI,IAAAA,GAAG,CAACC,MAAM,EAAP,CAAH,GAAiBF,GAAG,GAAG,IAAP,GAAeN,GAA/B;AACAM,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAMA,GAAG,GAAGJ,MAAZ,EAAoB;AAClBK,IAAAA,GAAG,CAACC,MAAM,EAAP,CAAH,GAAiBF,GAAG,GAAG,IAAP,GAAeN,GAA/B;AACAM,IAAAA,GAAG,MAAM,CAAT;AACD;;AACDC,EAAAA,GAAG,CAACC,MAAD,CAAH,GAAcF,GAAG,GAAG,CAApB;AAEAP,EAAAA,MAAM,CAACY,KAAP,GAAeH,MAAM,GAAGK,SAAT,GAAqB,CAApC;AAEA,SAAON,GAAP;AACD","sourcesContent":["module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n"]},"metadata":{},"sourceType":"script"}