{"ast":null,"code":"// Horizontal rule\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker,\n      cnt,\n      ch,\n      token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  marker = state.src.charCodeAt(pos++); // Check hr marker\n\n  if (marker !== 0x2A\n  /* * */\n  && marker !== 0x2D\n  /* - */\n  && marker !== 0x5F\n  /* _ */\n  ) {\n    return false;\n  } // markers can be mixed with spaces, but there should be at least 3 of them\n\n\n  cnt = 1;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch !== marker && !isSpace(ch)) {\n      return false;\n    }\n\n    if (ch === marker) {\n      cnt++;\n    }\n  }\n\n  if (cnt < 3) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  state.line = startLine + 1;\n  token = state.push('hr', 'hr', 0);\n  token.map = [startLine, state.line];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_block/hr.js"],"names":["isSpace","require","module","exports","hr","state","startLine","endLine","silent","marker","cnt","ch","token","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","src","charCodeAt","line","push","map","markup","Array","join","String","fromCharCode"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,OAAzC;;AAGAE,MAAM,CAACC,OAAP,GAAiB,SAASC,EAAT,CAAYC,KAAZ,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCC,MAAvC,EAA+C;AAC9D,MAAIC,MAAJ;AAAA,MAAYC,GAAZ;AAAA,MAAiBC,EAAjB;AAAA,MAAqBC,KAArB;AAAA,MACIC,GAAG,GAAGR,KAAK,CAACS,MAAN,CAAaR,SAAb,IAA0BD,KAAK,CAACU,MAAN,CAAaT,SAAb,CADpC;AAAA,MAEIU,GAAG,GAAGX,KAAK,CAACY,MAAN,CAAaX,SAAb,CAFV,CAD8D,CAK9D;;AACA,MAAID,KAAK,CAACa,MAAN,CAAaZ,SAAb,IAA0BD,KAAK,CAACc,SAAhC,IAA6C,CAAjD,EAAoD;AAAE,WAAO,KAAP;AAAe;;AAErEV,EAAAA,MAAM,GAAGJ,KAAK,CAACe,GAAN,CAAUC,UAAV,CAAqBR,GAAG,EAAxB,CAAT,CAR8D,CAU9D;;AACA,MAAIJ,MAAM,KAAK;AAAI;AAAf,KACAA,MAAM,KAAK;AAAI;AADf,KAEAA,MAAM,KAAK;AAAI;AAFnB,IAE4B;AAC1B,WAAO,KAAP;AACD,GAf6D,CAiB9D;;;AAEAC,EAAAA,GAAG,GAAG,CAAN;;AACA,SAAOG,GAAG,GAAGG,GAAb,EAAkB;AAChBL,IAAAA,EAAE,GAAGN,KAAK,CAACe,GAAN,CAAUC,UAAV,CAAqBR,GAAG,EAAxB,CAAL;;AACA,QAAIF,EAAE,KAAKF,MAAP,IAAiB,CAACT,OAAO,CAACW,EAAD,CAA7B,EAAmC;AAAE,aAAO,KAAP;AAAe;;AACpD,QAAIA,EAAE,KAAKF,MAAX,EAAmB;AAAEC,MAAAA,GAAG;AAAK;AAC9B;;AAED,MAAIA,GAAG,GAAG,CAAV,EAAa;AAAE,WAAO,KAAP;AAAe;;AAE9B,MAAIF,MAAJ,EAAY;AAAE,WAAO,IAAP;AAAc;;AAE5BH,EAAAA,KAAK,CAACiB,IAAN,GAAahB,SAAS,GAAG,CAAzB;AAEAM,EAAAA,KAAK,GAAUP,KAAK,CAACkB,IAAN,CAAW,IAAX,EAAiB,IAAjB,EAAuB,CAAvB,CAAf;AACAX,EAAAA,KAAK,CAACY,GAAN,GAAe,CAAElB,SAAF,EAAaD,KAAK,CAACiB,IAAnB,CAAf;AACAV,EAAAA,KAAK,CAACa,MAAN,GAAeC,KAAK,CAAChB,GAAG,GAAG,CAAP,CAAL,CAAeiB,IAAf,CAAoBC,MAAM,CAACC,YAAP,CAAoBpB,MAApB,CAApB,CAAf;AAEA,SAAO,IAAP;AACD,CArCD","sourcesContent":["// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}