{"ast":null,"code":"// Process [link](<to> \"stuff\")\n'use strict';\n\nvar normalizeReference = require('../common/utils').normalizeReference;\n\nvar isSpace = require('../common/utils').isSpace;\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B\n  /* [ */\n  ) {\n    return false;\n  }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true); // parser failed to find ']', so it's not a valid link\n\n  if (labelEnd < 0) {\n    return false;\n  }\n\n  pos = labelEnd + 1;\n\n  if (pos < max && state.src.charCodeAt(pos) === 0x28\n  /* ( */\n  ) {\n    //\n    // Inline link\n    //\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false; // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n\n    pos++;\n\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n\n    if (pos >= max) {\n      return false;\n    } // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n\n\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      } // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n\n\n      start = pos;\n\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      } // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n\n\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos; // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n\n          if (!isSpace(code) && code !== 0x0A) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29\n    /* ) */\n    ) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B\n    /* [ */\n    ) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    } // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n\n\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n\n    ref = state.env.references[normalizeReference(label)];\n\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n\n    href = ref.href;\n    title = ref.title;\n  } //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n\n\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    token = state.push('link_open', 'a', 1);\n    token.attrs = attrs = [['href', href]];\n\n    if (title) {\n      attrs.push(['title', title]);\n    }\n\n    state.md.inline.tokenize(state);\n    token = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/rules_inline/link.js"],"names":["normalizeReference","require","isSpace","module","exports","link","state","silent","attrs","code","label","labelEnd","labelStart","pos","res","ref","token","href","title","oldPos","max","posMax","start","parseReference","src","charCodeAt","md","helpers","parseLinkLabel","parseLinkDestination","ok","normalizeLink","str","validateLink","parseLinkTitle","env","references","slice","push","inline","tokenize"],"mappings":"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","sourcesContent":["// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}