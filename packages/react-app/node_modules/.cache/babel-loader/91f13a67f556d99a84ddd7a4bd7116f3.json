{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\n\nvar graphql_language_service_parser_1 = require(\"graphql-language-service-parser\");\n\ncodemirror_1.default.defineMode('graphql', function (config) {\n  var parser = graphql_language_service_parser_1.onlineParser({\n    eatWhitespace: function eatWhitespace(stream) {\n      return stream.eatWhile(graphql_language_service_parser_1.isIgnored);\n    },\n    lexRules: graphql_language_service_parser_1.LexRules,\n    parseRules: graphql_language_service_parser_1.ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config: config,\n    startState: parser.startState,\n    token: parser.token,\n    indent: indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: 'brace',\n    lineComment: '#',\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: '()[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  var _a, _b;\n\n  var levels = state.levels;\n  var level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}","map":{"version":3,"sources":["src/mode.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,iCAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AA4BA,YAAA,CAAA,OAAA,CAAW,UAAX,CAAsB,SAAtB,EAAiC,UAAA,MAAA,EAAM;AACrC,MAAM,MAAM,GAAG,iCAAA,CAAA,YAAA,CAAa;AAC1B,IAAA,aAAa,EAAE,uBAAA,MAAA,EAAM;AAAI,aAAA,MAAM,CAAC,QAAP,CAAgB,iCAAA,CAAhB,SAAA,CAAA;AAA0B,KADzB;AAE1B,IAAA,QAAQ,EAAE,iCAAA,CAAA,QAFgB;AAG1B,IAAA,UAAU,EAAE,iCAAA,CAAA,UAHc;AAI1B,IAAA,YAAY,EAAE;AAAE,MAAA,OAAO,EAAE,MAAM,CAAC;AAAlB;AAJY,GAAb,CAAf;AAOA,SAAO;AACL,IAAA,MAAM,EAAA,MADD;AAEL,IAAA,UAAU,EAAE,MAAM,CAAC,UAFd;AAGL,IAAA,KAAK,EAAG,MAAM,CAAC,KAHV;AAIL,IAAA,MAAM,EAAA,MAJD;AAKL,IAAA,aAAa,EAAE,YALV;AAML,IAAA,IAAI,EAAE,OAND;AAOL,IAAA,WAAW,EAAE,GAPR;AAQL,IAAA,aAAa,EAAE;AACb,MAAA,KAAK,EAAE,UADM;AAEb,MAAA,OAAO,EAAE;AAFI;AARV,GAAP;AAaD,CArBD;;AAwBA,SAAS,MAAT,CAKE,KALF,EAME,SANF,EAMmB;;;AAEjB,MAAM,MAAM,GAAG,KAAK,CAAC,MAArB;AAGA,MAAM,KAAK,GACT,CAAC,MAAD,IAAW,MAAM,CAAC,MAAP,KAAkB,CAA7B,GACI,KAAK,CAAC,WADV,GAEI,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,CAAN,IACC,CAAA,CAAA,EAAA,GAAA,KAAK,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,IAAF,CAAO,SAAP,CAAlB,IAAsC,CAAtC,GAA0C,CAD3C,CAHN;AAKA,SAAO,CAAC,KAAK,IAAI,CAAV,KAAgB,CAAA,CAAA,EAAA,GAAA,KAAK,MAAL,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,UAAb,KAA2B,CAA3C,CAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\nvar graphql_language_service_parser_1 = require(\"graphql-language-service-parser\");\ncodemirror_1.default.defineMode('graphql', function (config) {\n    var parser = graphql_language_service_parser_1.onlineParser({\n        eatWhitespace: function (stream) { return stream.eatWhile(graphql_language_service_parser_1.isIgnored); },\n        lexRules: graphql_language_service_parser_1.LexRules,\n        parseRules: graphql_language_service_parser_1.ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config: config,\n        startState: parser.startState,\n        token: parser.token,\n        indent: indent,\n        electricInput: /^\\s*[})\\]]/,\n        fold: 'brace',\n        lineComment: '#',\n        closeBrackets: {\n            pairs: '()[]{}\"\"',\n            explode: '()[]{}',\n        },\n    };\n});\nfunction indent(state, textAfter) {\n    var _a, _b;\n    var levels = state.levels;\n    var level = !levels || levels.length === 0\n        ? state.indentLevel\n        : levels[levels.length - 1] -\n            (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode.js.map"]},"metadata":{},"sourceType":"script"}