{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiformats = require('multiformats');\n\nvar base64 = require('multiformats/bases/base64');\n\nvar cborg = require('cborg');\n\nvar cborgJson = require('cborg/json');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborgJson__namespace = /*#__PURE__*/_interopNamespace(cborgJson);\n\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n\n  var cid = multiformats.CID.asCID(obj);\n\n  if (!cid) {\n    return null;\n  }\n\n  var cidString = cid.toString();\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.string, cidString, cidString.length), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\n\nfunction bytesEncoder(bytes) {\n  var bytesString = base64.base64.encode(bytes).slice(1);\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, 'bytes', 5), new cborg.Token(cborg.Type.string, bytesString, bytesString.length), new cborg.Token(cborg.Type.break, undefined, 1), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\n\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\n\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n\n  return null;\n}\n\nvar encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\n\nvar DagJsonTokenizer = /*#__PURE__*/function (_cborgJson__namespace) {\n  _inherits(DagJsonTokenizer, _cborgJson__namespace);\n\n  var _super = _createSuper(DagJsonTokenizer);\n\n  function DagJsonTokenizer(data, options) {\n    var _this;\n\n    _classCallCheck(this, DagJsonTokenizer);\n\n    _this = _super.call(this, data, options);\n    _this.tokenBuffer = [];\n    return _this;\n  }\n\n  _createClass(DagJsonTokenizer, [{\n    key: \"done\",\n    value: function done() {\n      return this.tokenBuffer.length === 0 && _get(_getPrototypeOf(DagJsonTokenizer.prototype), \"done\", this).call(this);\n    }\n  }, {\n    key: \"_next\",\n    value: function _next() {\n      if (this.tokenBuffer.length > 0) {\n        return this.tokenBuffer.pop();\n      }\n\n      return _get(_getPrototypeOf(DagJsonTokenizer.prototype), \"next\", this).call(this);\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var token = this._next();\n\n      if (token.type === cborg.Type.map) {\n        var keyToken = this._next();\n\n        if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n          var valueToken = this._next();\n\n          if (valueToken.type === cborg.Type.string) {\n            var breakToken = this._next();\n\n            if (breakToken.type !== cborg.Type.break) {\n              throw new Error('Invalid encoded CID form');\n            }\n\n            this.tokenBuffer.push(valueToken);\n            return new cborg.Token(cborg.Type.tag, 42, 0);\n          }\n\n          if (valueToken.type === cborg.Type.map) {\n            var innerKeyToken = this._next();\n\n            if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n              var innerValueToken = this._next();\n\n              if (innerValueToken.type === cborg.Type.string) {\n                for (var i = 0; i < 2; i++) {\n                  var _breakToken = this._next();\n\n                  if (_breakToken.type !== cborg.Type.break) {\n                    throw new Error('Invalid encoded Bytes form');\n                  }\n                }\n\n                var bytes = base64.base64.decode(\"m\".concat(innerValueToken.value));\n                return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n              }\n\n              this.tokenBuffer.push(innerValueToken);\n            }\n\n            this.tokenBuffer.push(innerKeyToken);\n          }\n\n          this.tokenBuffer.push(valueToken);\n        }\n\n        this.tokenBuffer.push(keyToken);\n      }\n\n      return token;\n    }\n  }]);\n\n  return DagJsonTokenizer;\n}(cborgJson__namespace.Tokenizer);\n\nvar decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nvar name = 'dag-json';\nvar code = 297;\n\nvar encode = function encode(node) {\n  return cborgJson__namespace.encode(node, encodeOptions);\n};\n\nvar decode = function decode(data) {\n  var options = Object.assign(decodeOptions, {\n    tokenizer: new DagJsonTokenizer(data, decodeOptions)\n  });\n  return cborgJson__namespace.decode(data, options);\n};\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/@ipld/dag-json/cjs/index.js"],"names":["Object","defineProperty","exports","value","multiformats","require","base64","cborg","cborgJson","_interopNamespace","e","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","cborgJson__namespace","cidEncoder","obj","asCID","cid","CID","cidString","toString","Token","Type","map","Infinity","string","length","break","undefined","bytesEncoder","bytes","bytesString","encode","slice","undefinedEncoder","Error","numberEncoder","num","Number","isNaN","encodeOptions","typeEncoders","Uint8Array","Buffer","number","DagJsonTokenizer","data","options","tokenBuffer","pop","token","_next","type","keyToken","valueToken","breakToken","push","tag","innerKeyToken","innerValueToken","i","decode","Tokenizer","decodeOptions","allowIndefinite","allowUndefined","allowNaN","allowInfinity","allowBigInt","strict","useMaps","tags","parse","name","code","node","assign","tokenizer"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiformats = require('multiformats');\nvar base64 = require('multiformats/bases/base64');\nvar cborg = require('cborg');\nvar cborgJson = require('cborg/json');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborgJson__namespace = /*#__PURE__*/_interopNamespace(cborgJson);\n\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = multiformats.CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.string, cidString, cidString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.base64.encode(bytes).slice(1);\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, 'bytes', 5),\n    new cborg.Token(cborg.Type.string, bytesString, bytesString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson__namespace.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === cborg.Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === cborg.Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== cborg.Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new cborg.Token(cborg.Type.tag, 42, 0);\n        }\n        if (valueToken.type === cborg.Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === cborg.Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== cborg.Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.base64.decode(`m${ innerValueToken.value }`);\n              return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nconst name = 'dag-json';\nconst code = 297;\nconst encode = node => cborgJson__namespace.encode(node, encodeOptions);\nconst decode = data => {\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) });\n  return cborgJson__namespace.decode(data, options);\n};\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n"]},"metadata":{},"sourceType":"script"}