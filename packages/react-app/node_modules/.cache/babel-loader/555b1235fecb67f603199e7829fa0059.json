{"ast":null,"code":"'use strict';\n\nvar isIp = require('is-ip');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar isIP = isIp;\nvar isV4 = isIp.v4;\nvar isV6 = isIp.v6; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\n\nvar toBytes = function toBytes(ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4); // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = isV4(sections[i]);\n      var v4Buffer = void 0;\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i]);\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) {\n        sections.unshift('0');\n      }\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) {\n        sections.push('0');\n      }\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++) {\n        ;\n      }\n\n      var argv = [i, '1'];\n\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Uint8Array(offset + 16);\n\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n}; // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\n\n\nvar toString = function toString(buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var string;\n  var view = new DataView(buff.buffer);\n\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var _i = 0; _i < length; _i += 2) {\n      result.push(view.getUint16(offset + _i).toString(16));\n    }\n\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n\n  return string;\n};\n\nmodule.exports = {\n  isIP: isIP,\n  isV4: isV4,\n  isV6: isV6,\n  toBytes: toBytes,\n  toString: toString\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/multiaddr/src/ip.js"],"names":["isIp","require","uint8ArrayToString","toString","isIP","isV4","v4","isV6","v6","toBytes","ip","buff","offset","result","Uint8Array","split","map","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","splice","unshift","push","argv","apply","word","Error","string","view","DataView","buffer","join","getUint16","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst isIp = require('is-ip')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst isIP = isIp\nconst isV4 = isIp.v4\nconst isV6 = isIp.v6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toBytes = function (ip, buff, offset) {\n  offset = ~~offset\n\n  let result\n\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4)\n    // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, '1']\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = buff || new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toString = function (buff, offset, length) {\n  offset = ~~offset\n  length = length || (buff.length - offset)\n\n  const result = []\n  let string\n  const view = new DataView(buff.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBytes,\n  toString\n}\n"]},"metadata":{},"sourceType":"script"}