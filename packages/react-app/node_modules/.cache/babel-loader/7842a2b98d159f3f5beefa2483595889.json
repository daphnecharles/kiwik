{"ast":null,"code":"import _slicedToArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Hook from useHooks! (https://usehooks.com/useLocalStorage/)\n\nexport default function useLocalStorage(key, initialValue, ttl) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key);\n      var parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        var now = new Date();\n\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n\n        return parsedItem.value;\n      } // Parse stored json or if none return initialValue\n\n\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      if (ttl) {\n        var now = new Date(); // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n\n        var item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"Rm9hdNGFHYBqBtorv7gdlhOL6zA=\");","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/packages/react-app/src/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","ttl","item","window","localStorage","getItem","parsedItem","JSON","parse","now","Date","getTime","expiry","removeItem","value","error","console","log","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CC,GAA5C,EAAiD;AAAA;;AAC9D;AACA;AACA,kBAAsCJ,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF;AACA,UAAMK,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb;AACA,UAAMO,UAAU,GAAGJ,IAAI,GAAGK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAH,GAAsBF,YAA7C;;AAEA,UAAI,OAAOM,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,KAAK,IAAjD,IAAyD,YAAYA,UAArE,IAAmF,WAAWA,UAAlG,EAA8G;AAC5G,YAAMG,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACA,YAAIT,GAAG,IAAIQ,GAAG,CAACE,OAAJ,KAAgBL,UAAU,CAACM,MAAtC,EAA8C;AAC5C;AACA;AACAT,UAAAA,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+Bd,GAA/B;AACA,iBAAOC,YAAP;AACD;;AACD,eAAOM,UAAU,CAACQ,KAAlB;AACD,OAdC,CAeF;;;AAAA;AACA,aAAOR,UAAP;AACD,KAjBD,CAiBE,OAAOS,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOf,YAAP;AACD;AACF,GAvB6C,CAA9C;AAAA;AAAA,MAAOkB,WAAP;AAAA,MAAoBC,cAApB,iBAH8D,CA4B9D;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAN,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMO,YAAY,GAAGP,KAAK,YAAYQ,QAAjB,GAA4BR,KAAK,CAACI,WAAD,CAAjC,GAAiDJ,KAAtE,CAFE,CAGF;;AACAK,MAAAA,cAAc,CAACE,YAAD,CAAd,CAJE,CAKF;;AACA,UAAIpB,GAAJ,EAAS;AACP,YAAMQ,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CADO,CAGP;AACA;;AACA,YAAMR,IAAI,GAAG;AACXY,UAAAA,KAAK,EAAEO,YADI;AAEXT,UAAAA,MAAM,EAAEH,GAAG,CAACE,OAAJ,KAAgBV;AAFb,SAAb;AAIAE,QAAAA,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CAA4BxB,GAA5B,EAAiCQ,IAAI,CAACiB,SAAL,CAAetB,IAAf,CAAjC;AACD,OAVD,MAUO;AACLC,QAAAA,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CAA4BxB,GAA5B,EAAiCQ,IAAI,CAACiB,SAAL,CAAeH,YAAf,CAAjC;AACD;AACF,KAnBD,CAmBE,OAAON,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAxBD;;AA0BA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD;;GAzDuBtB,e","sourcesContent":["import { useState } from \"react\";\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue, ttl) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n        return parsedItem.value;\n      }\n      // Parse stored json or if none return initialValue\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (ttl) {\n        const now = new Date();\n\n        // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl,\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}