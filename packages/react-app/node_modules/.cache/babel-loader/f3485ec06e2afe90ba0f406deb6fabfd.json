{"ast":null,"code":"// Token class\n'use strict';\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\n\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type = type;\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n\n  this.tag = tag;\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n\n  this.attrs = null;\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n\n  this.map = null;\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n\n  this.nesting = nesting;\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n\n  this.level = 0;\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n\n  this.children = null;\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n\n  this.content = '';\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n\n  this.markup = '';\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n\n  this.info = '';\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n\n  this.meta = null;\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n\n  this.block = false;\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n\n  this.hidden = false;\n}\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\n\n\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) {\n    return -1;\n  }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\n\n\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [attrData];\n  }\n};\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\n\n\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [name, value];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\n\n\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name),\n      value = null;\n\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n\n  return value;\n};\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\n\n\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([name, value]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\nmodule.exports = Token;","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/markdown-it/lib/token.js"],"names":["Token","type","tag","nesting","attrs","map","level","children","content","markup","info","meta","block","hidden","prototype","attrIndex","name","i","len","length","attrPush","attrData","push","attrSet","value","idx","attrGet","attrJoin","module","exports"],"mappings":"AAAA;AAEA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,GAArB,EAA0BC,OAA1B,EAAmC;AACjC;AACF;AACA;AACA;AACA;AACE,OAAKF,IAAL,GAAgBA,IAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,GAAL,GAAgBA,GAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKE,KAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,GAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKF,OAAL,GAAgBA,OAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKG,KAAL,GAAgB,CAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,OAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAgB,KAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAgB,KAAhB;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACAb,KAAK,CAACc,SAAN,CAAgBC,SAAhB,GAA4B,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACnD,MAAIZ,KAAJ,EAAWa,CAAX,EAAcC,GAAd;;AAEA,MAAI,CAAC,KAAKd,KAAV,EAAiB;AAAE,WAAO,CAAC,CAAR;AAAY;;AAE/BA,EAAAA,KAAK,GAAG,KAAKA,KAAb;;AAEA,OAAKa,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGd,KAAK,CAACe,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAIb,KAAK,CAACa,CAAD,CAAL,CAAS,CAAT,MAAgBD,IAApB,EAA0B;AAAE,aAAOC,CAAP;AAAW;AACxC;;AACD,SAAO,CAAC,CAAR;AACD,CAXD;AAcA;AACA;AACA;AACA;AACA;;;AACAjB,KAAK,CAACc,SAAN,CAAgBM,QAAhB,GAA2B,SAASA,QAAT,CAAkBC,QAAlB,EAA4B;AACrD,MAAI,KAAKjB,KAAT,EAAgB;AACd,SAAKA,KAAL,CAAWkB,IAAX,CAAgBD,QAAhB;AACD,GAFD,MAEO;AACL,SAAKjB,KAAL,GAAa,CAAEiB,QAAF,CAAb;AACD;AACF,CAND;AASA;AACA;AACA;AACA;AACA;;;AACArB,KAAK,CAACc,SAAN,CAAgBS,OAAhB,GAA0B,SAASA,OAAT,CAAiBP,IAAjB,EAAuBQ,KAAvB,EAA8B;AACtD,MAAIC,GAAG,GAAG,KAAKV,SAAL,CAAeC,IAAf,CAAV;AAAA,MACIK,QAAQ,GAAG,CAAEL,IAAF,EAAQQ,KAAR,CADf;;AAGA,MAAIC,GAAG,GAAG,CAAV,EAAa;AACX,SAAKL,QAAL,CAAcC,QAAd;AACD,GAFD,MAEO;AACL,SAAKjB,KAAL,CAAWqB,GAAX,IAAkBJ,QAAlB;AACD;AACF,CATD;AAYA;AACA;AACA;AACA;AACA;;;AACArB,KAAK,CAACc,SAAN,CAAgBY,OAAhB,GAA0B,SAASA,OAAT,CAAiBV,IAAjB,EAAuB;AAC/C,MAAIS,GAAG,GAAG,KAAKV,SAAL,CAAeC,IAAf,CAAV;AAAA,MAAgCQ,KAAK,GAAG,IAAxC;;AACA,MAAIC,GAAG,IAAI,CAAX,EAAc;AACZD,IAAAA,KAAK,GAAG,KAAKpB,KAAL,CAAWqB,GAAX,EAAgB,CAAhB,CAAR;AACD;;AACD,SAAOD,KAAP;AACD,CAND;AASA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,KAAK,CAACc,SAAN,CAAgBa,QAAhB,GAA2B,SAASA,QAAT,CAAkBX,IAAlB,EAAwBQ,KAAxB,EAA+B;AACxD,MAAIC,GAAG,GAAG,KAAKV,SAAL,CAAeC,IAAf,CAAV;;AAEA,MAAIS,GAAG,GAAG,CAAV,EAAa;AACX,SAAKL,QAAL,CAAc,CAAEJ,IAAF,EAAQQ,KAAR,CAAd;AACD,GAFD,MAEO;AACL,SAAKpB,KAAL,CAAWqB,GAAX,EAAgB,CAAhB,IAAqB,KAAKrB,KAAL,CAAWqB,GAAX,EAAgB,CAAhB,IAAqB,GAArB,GAA2BD,KAAhD;AACD;AACF,CARD;;AAWAI,MAAM,CAACC,OAAP,GAAiB7B,KAAjB","sourcesContent":["// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n"]},"metadata":{},"sourceType":"script"}