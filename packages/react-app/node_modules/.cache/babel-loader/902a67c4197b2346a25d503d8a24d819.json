{"ast":null,"code":"var HTTP_REGEX = \"^https?:\";\nvar WS_REGEX = \"^wss?:\";\n\nfunction getUrlProtocol(url) {\n  var matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n  if (!matches || !matches.length) return;\n  return matches[0];\n}\n\nfunction matchRegexProtocol(url, regex) {\n  var protocol = getUrlProtocol(url);\n  if (typeof protocol === \"undefined\") return false;\n  return new RegExp(regex).test(protocol);\n}\n\nexport function isHttpUrl(url) {\n  return matchRegexProtocol(url, HTTP_REGEX);\n}\nexport function isWsUrl(url) {\n  return matchRegexProtocol(url, WS_REGEX);\n}\nexport function isLocalhostUrl(url) {\n  return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n}","map":{"version":3,"sources":["../../src/url.ts"],"names":[],"mappings":"AAAA,IAAM,UAAU,GAAG,UAAnB;AAEA,IAAM,QAAQ,GAAG,QAAjB;;AAEA,SAAS,cAAT,CAAwB,GAAxB,EAAmC;AACjC,MAAM,OAAO,GAAG,GAAG,CAAC,KAAJ,CAAU,IAAI,MAAJ,CAAW,OAAX,EAAoB,IAApB,CAAV,CAAhB;AACA,MAAI,CAAC,OAAD,IAAY,CAAC,OAAO,CAAC,MAAzB,EAAiC;AACjC,SAAO,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,SAAS,kBAAT,CAA4B,GAA5B,EAAyC,KAAzC,EAAsD;AACpD,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAD,CAA/B;AACA,MAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC,OAAO,KAAP;AACrC,SAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,IAAlB,CAAuB,QAAvB,CAAP;AACD;;AAED,OAAM,SAAU,SAAV,CAAoB,GAApB,EAA+B;AACnC,SAAO,kBAAkB,CAAC,GAAD,EAAM,UAAN,CAAzB;AACD;AAED,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAA6B;AACjC,SAAO,kBAAkB,CAAC,GAAD,EAAM,QAAN,CAAzB;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoC;AACxC,SAAO,IAAI,MAAJ,CAAW,4BAAX,EAAyC,IAAzC,CAA8C,GAA9C,CAAP;AACD","sourceRoot":"","sourcesContent":["const HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length)\n        return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\")\n        return false;\n    return new RegExp(regex).test(protocol);\n}\nexport function isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nexport function isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nexport function isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n}\n//# sourceMappingURL=url.js.map"]},"metadata":{},"sourceType":"module"}