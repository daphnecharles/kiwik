{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress as _getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n; ///////////////////////////////\n\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\n\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var name, address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nameOrPromise;\n\n          case 2:\n            name = _context.sent;\n            _context.prev = 3;\n            return _context.abrupt(\"return\", getAddress(name));\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](3);\n\n          case 9:\n            if (!resolver) {\n              logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n              });\n            }\n\n            _context.next = 12;\n            return resolver.resolveName(name);\n\n          case 12:\n            address = _context.sent;\n\n            if (address == null) {\n              logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n            }\n\n            return _context.abrupt(\"return\", address);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 7]]);\n  }));\n} // Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\n\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(paramType)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return Promise.all(paramType.map(function (paramType, index) {\n              return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n            }));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!(paramType.type === \"address\")) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 7;\n            return resolveName(resolver, value);\n\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            if (!(paramType.type === \"tuple\")) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return resolveAddresses(resolver, value, paramType.components);\n\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n            if (!(paramType.baseType === \"array\")) {\n              _context2.next = 18;\n              break;\n            }\n\n            if (Array.isArray(value)) {\n              _context2.next = 15;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(new Error(\"invalid value for array\")));\n\n          case 15:\n            _context2.next = 17;\n            return Promise.all(value.map(function (v) {\n              return resolveAddresses(resolver, v, paramType.arrayChildren);\n            }));\n\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 18:\n            return _context2.abrupt(\"return\", value);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _this = this;\n\n    var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // If an extra argument is given, it is overrides\n            overrides = {};\n\n            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n              overrides = shallowCopy(args.pop());\n            } // Make sure the parameter count matches\n\n\n            logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\"); // Populate \"from\" override (allow promises)\n\n            if (contract.signer) {\n              if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                  override: resolveName(contract.signer, overrides.from),\n                  signer: contract.signer.getAddress()\n                }).then(function (check) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (getAddress(check.signer) !== check.override) {\n                              logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"overrides.from\"\n                              });\n                            }\n\n                            return _context3.abrupt(\"return\", check.override);\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                });\n              } else {\n                overrides.from = contract.signer.getAddress();\n              }\n            } else if (overrides.from) {\n              overrides.from = resolveName(contract.provider, overrides.from); //} else {\n              // Contracts without a signer can override \"from\", and if\n              // unspecified the zero address is used\n              //overrides.from = AddressZero;\n            } // Wait for all dependencies to be resolved (prefer the signer over the provider)\n\n\n            _context4.next = 6;\n            return resolveProperties({\n              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n              address: contract.resolvedAddress,\n              overrides: resolveProperties(overrides) || {}\n            });\n\n          case 6:\n            resolved = _context4.sent;\n            // The ABI coded transaction\n            data = contract.interface.encodeFunctionData(fragment, resolved.args);\n            tx = {\n              data: data,\n              to: resolved.address\n            }; // Resolved Overrides\n\n            ro = resolved.overrides; // Populate simple overrides\n\n            if (ro.nonce != null) {\n              tx.nonce = BigNumber.from(ro.nonce).toNumber();\n            }\n\n            if (ro.gasLimit != null) {\n              tx.gasLimit = BigNumber.from(ro.gasLimit);\n            }\n\n            if (ro.gasPrice != null) {\n              tx.gasPrice = BigNumber.from(ro.gasPrice);\n            }\n\n            if (ro.maxFeePerGas != null) {\n              tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n            }\n\n            if (ro.maxPriorityFeePerGas != null) {\n              tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n            }\n\n            if (ro.from != null) {\n              tx.from = ro.from;\n            }\n\n            if (ro.type != null) {\n              tx.type = ro.type;\n            }\n\n            if (ro.accessList != null) {\n              tx.accessList = accessListify(ro.accessList);\n            } // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\n\n            if (tx.gasLimit == null && fragment.gas != null) {\n              // Conmpute the intrinisic gas cost for this transaction\n              // @TODO: This is based on the yellow paper as of Petersburg; this is something\n              // we may wish to parameterize in v6 as part of the Network object. Since this\n              // is always a non-nil to address, we can ignore G_create, but may wish to add\n              // similar logic to the ContractFactory.\n              intrinsic = 21000;\n              bytes = arrayify(data);\n\n              for (i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n\n                if (bytes[i]) {\n                  intrinsic += 64;\n                }\n              }\n\n              tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n            } // Populate \"value\" override\n\n\n            if (ro.value) {\n              roValue = BigNumber.from(ro.value);\n\n              if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"overrides.value\",\n                  value: overrides.value\n                });\n              }\n\n              tx.value = roValue;\n            } // Remvoe the overrides\n\n\n            delete overrides.nonce;\n            delete overrides.gasLimit;\n            delete overrides.gasPrice;\n            delete overrides.from;\n            delete overrides.value;\n            delete overrides.type;\n            delete overrides.accessList;\n            delete overrides.maxFeePerGas;\n            delete overrides.maxPriorityFeePerGas; // Make sure there are no stray overrides, which may indicate a\n            // typo or using an unsupported key.\n\n            leftovers = Object.keys(overrides).filter(function (key) {\n              return overrides[key] != null;\n            });\n\n            if (leftovers.length) {\n              logger.throwError(\"cannot override \".concat(leftovers.map(function (l) {\n                return JSON.stringify(l);\n              }).join(\",\")), Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n              });\n            }\n\n            return _context4.abrupt(\"return\", tx);\n\n          case 32:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return populateTransaction(contract, fragment, args);\n  };\n}\n\nfunction buildEstimate(contract, fragment) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var tx;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"estimateGas\"\n                });\n              }\n\n              _context5.next = 3;\n              return populateTransaction(contract, fragment, args);\n\n            case 3:\n              tx = _context5.sent;\n              _context5.next = 6;\n              return signerOrProvider.estimateGas(tx);\n\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  };\n}\n\nfunction buildCall(contract, fragment, collapseSimple) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var blockTag, overrides, tx, result, value;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              // Extract the \"blockTag\" override if present\n              blockTag = undefined;\n\n              if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\")) {\n                _context6.next = 9;\n                break;\n              }\n\n              overrides = shallowCopy(args.pop());\n\n              if (!(overrides.blockTag != null)) {\n                _context6.next = 7;\n                break;\n              }\n\n              _context6.next = 6;\n              return overrides.blockTag;\n\n            case 6:\n              blockTag = _context6.sent;\n\n            case 7:\n              delete overrides.blockTag;\n              args.push(overrides);\n\n            case 9:\n              if (!(contract.deployTransaction != null)) {\n                _context6.next = 12;\n                break;\n              }\n\n              _context6.next = 12;\n              return contract._deployed(blockTag);\n\n            case 12:\n              _context6.next = 14;\n              return populateTransaction(contract, fragment, args);\n\n            case 14:\n              tx = _context6.sent;\n              _context6.next = 17;\n              return signerOrProvider.call(tx, blockTag);\n\n            case 17:\n              result = _context6.sent;\n              _context6.prev = 18;\n              value = contract.interface.decodeFunctionResult(fragment, result);\n\n              if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n              }\n\n              return _context6.abrupt(\"return\", value);\n\n            case 24:\n              _context6.prev = 24;\n              _context6.t0 = _context6[\"catch\"](18);\n\n              if (_context6.t0.code === Logger.errors.CALL_EXCEPTION) {\n                _context6.t0.address = contract.address;\n                _context6.t0.args = args;\n                _context6.t0.transaction = tx;\n              }\n\n              throw _context6.t0;\n\n            case 28:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[18, 24]]);\n    }));\n  };\n}\n\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var txRequest, tx, wait;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"sendTransaction\"\n                });\n              } // If the contract was just deployed, wait until it is minded\n\n\n              if (!(contract.deployTransaction != null)) {\n                _context7.next = 4;\n                break;\n              }\n\n              _context7.next = 4;\n              return contract._deployed();\n\n            case 4:\n              _context7.next = 6;\n              return populateTransaction(contract, fragment, args);\n\n            case 6:\n              txRequest = _context7.sent;\n              _context7.next = 9;\n              return contract.signer.sendTransaction(txRequest);\n\n            case 9:\n              tx = _context7.sent;\n              // Tweak the tw.wait so the receipt has extra properties\n              wait = tx.wait.bind(tx);\n\n              tx.wait = function (confirmations) {\n                return wait(confirmations).then(function (receipt) {\n                  receipt.events = receipt.logs.map(function (log) {\n                    var event = deepCopy(log);\n                    var parsed = null;\n\n                    try {\n                      parsed = contract.interface.parseLog(log);\n                    } catch (e) {} // Successfully parsed the event log; include it\n\n\n                    if (parsed) {\n                      event.args = parsed.args;\n\n                      event.decode = function (data, topics) {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                      };\n\n                      event.event = parsed.name;\n                      event.eventSignature = parsed.signature;\n                    } // Useful operations\n\n\n                    event.removeListener = function () {\n                      return contract.provider;\n                    };\n\n                    event.getBlock = function () {\n                      return contract.provider.getBlock(receipt.blockHash);\n                    };\n\n                    event.getTransaction = function () {\n                      return contract.provider.getTransaction(receipt.transactionHash);\n                    };\n\n                    event.getTransactionReceipt = function () {\n                      return Promise.resolve(receipt);\n                    };\n\n                    return event;\n                  });\n                  return receipt;\n                });\n              };\n\n              return _context7.abrupt(\"return\", tx);\n\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n  };\n}\n\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n\n  return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n\n    return topic;\n  }).join(\":\") : \"\");\n}\n\nvar RunningEvent = /*#__PURE__*/function () {\n  function RunningEvent(tag, filter) {\n    _classCallCheck(this, RunningEvent);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n\n  _createClass(RunningEvent, [{\n    key: \"addListener\",\n    value: function addListener(listener, once) {\n      this._listeners.push({\n        listener: listener,\n        once: once\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var done = false;\n      this._listeners = this._listeners.filter(function (item) {\n        if (done || item.listener !== listener) {\n          return true;\n        }\n\n        done = true;\n        return false;\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners() {\n      return this._listeners.map(function (i) {\n        return i.listener;\n      });\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount() {\n      return this._listeners.length;\n    }\n  }, {\n    key: \"run\",\n    value: function run(args) {\n      var _this2 = this;\n\n      var listenerCount = this.listenerCount();\n      this._listeners = this._listeners.filter(function (item) {\n        var argsCopy = args.slice(); // Call the callback in the next event loop\n\n        setTimeout(function () {\n          item.listener.apply(_this2, argsCopy);\n        }, 0); // Reschedule it if it not \"once\"\n\n        return !item.once;\n      });\n      return listenerCount;\n    }\n  }, {\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {} // Returns the array that will be applied to an emit\n\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      return [event];\n    }\n  }]);\n\n  return RunningEvent;\n}();\n\nvar ErrorRunningEvent = /*#__PURE__*/function (_RunningEvent) {\n  _inherits(ErrorRunningEvent, _RunningEvent);\n\n  var _super = _createSuper(ErrorRunningEvent);\n\n  function ErrorRunningEvent() {\n    _classCallCheck(this, ErrorRunningEvent);\n\n    return _super.call(this, \"error\", null);\n  }\n\n  return ErrorRunningEvent;\n}(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\n\n\nvar FragmentRunningEvent = /*#__PURE__*/function (_RunningEvent2) {\n  _inherits(FragmentRunningEvent, _RunningEvent2);\n\n  var _super2 = _createSuper(FragmentRunningEvent);\n\n  function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n    var _this3;\n\n    _classCallCheck(this, FragmentRunningEvent);\n\n    var filter = {\n      address: address\n    };\n    var topic = contractInterface.getEventTopic(fragment);\n\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n\n    _this3 = _super2.call(this, getEventTag(filter), filter);\n    defineReadOnly(_assertThisInitialized(_this3), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this3), \"interface\", contractInterface);\n    defineReadOnly(_assertThisInitialized(_this3), \"fragment\", fragment);\n    return _this3;\n  }\n\n  _createClass(FragmentRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this4 = this;\n\n      _get(_getPrototypeOf(FragmentRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n\n      event.event = this.fragment.name;\n      event.eventSignature = this.fragment.format();\n\n      event.decode = function (data, topics) {\n        return _this4.interface.decodeEventLog(_this4.fragment, data, topics);\n      };\n\n      try {\n        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n      } catch (error) {\n        event.args = null;\n        event.decodeError = error;\n      }\n    }\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      var errors = checkResultErrors(event.args);\n\n      if (errors.length) {\n        throw errors[0].error;\n      }\n\n      var args = (event.args || []).slice();\n      args.push(event);\n      return args;\n    }\n  }]);\n\n  return FragmentRunningEvent;\n}(RunningEvent); // A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\n\n\nvar WildcardRunningEvent = /*#__PURE__*/function (_RunningEvent3) {\n  _inherits(WildcardRunningEvent, _RunningEvent3);\n\n  var _super3 = _createSuper(WildcardRunningEvent);\n\n  function WildcardRunningEvent(address, contractInterface) {\n    var _this5;\n\n    _classCallCheck(this, WildcardRunningEvent);\n\n    _this5 = _super3.call(this, \"*\", {\n      address: address\n    });\n    defineReadOnly(_assertThisInitialized(_this5), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this5), \"interface\", contractInterface);\n    return _this5;\n  }\n\n  _createClass(WildcardRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this6 = this;\n\n      _get(_getPrototypeOf(WildcardRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n\n      try {\n        var parsed = this.interface.parseLog(event);\n        event.event = parsed.name;\n        event.eventSignature = parsed.signature;\n\n        event.decode = function (data, topics) {\n          return _this6.interface.decodeEventLog(parsed.eventFragment, data, topics);\n        };\n\n        event.args = parsed.args;\n      } catch (error) {// No matching event\n      }\n    }\n  }]);\n\n  return WildcardRunningEvent;\n}(RunningEvent);\n\nexport var BaseContract = /*#__PURE__*/function () {\n  function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n    var _this7 = this;\n\n    _classCallCheck(this, BaseContract);\n\n    logger.checkNew(this instanceof BaseContract ? this.constructor : void 0, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n\n    defineReadOnly(this, \"interface\", getStatic(this instanceof BaseContract ? this.constructor : void 0, \"getInterface\")(contractInterface));\n\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      var uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(function (eventSignature) {\n        var event = _this7.interface.events[eventSignature];\n        defineReadOnly(_this7.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          return {\n            address: _this7.address,\n            topics: _this7.interface.encodeFilterTopics(event, args)\n          };\n        });\n\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(function (name) {\n        var filters = uniqueFilters[name];\n\n        if (filters.length === 1) {\n          defineReadOnly(_this7.filters, name, _this7.filters[filters[0]]);\n        } else {\n          logger.warn(\"Duplicate definition of \".concat(name, \" (\").concat(filters.join(\", \"), \")\"));\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n\n    defineReadOnly(this, \"address\", addressOrName);\n\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n\n    var uniqueNames = {};\n    var uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(function (signature) {\n      var fragment = _this7.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n\n      if (uniqueSignatures[signature]) {\n        logger.warn(\"Duplicate ABI entry for \".concat(JSON.stringify(signature)));\n        return;\n      }\n\n      uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n\n      {\n        var name = fragment.name;\n\n        if (!uniqueNames[name]) {\n          uniqueNames[name] = [];\n        }\n\n        uniqueNames[name].push(signature);\n      }\n\n      if (_this7[signature] == null) {\n        defineReadOnly(_this7, signature, buildDefault(_this7, fragment, true));\n      } // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n\n\n      if (_this7.functions[signature] == null) {\n        defineReadOnly(_this7.functions, signature, buildDefault(_this7, fragment, false));\n      }\n\n      if (_this7.callStatic[signature] == null) {\n        defineReadOnly(_this7.callStatic, signature, buildCall(_this7, fragment, true));\n      }\n\n      if (_this7.populateTransaction[signature] == null) {\n        defineReadOnly(_this7.populateTransaction, signature, buildPopulate(_this7, fragment));\n      }\n\n      if (_this7.estimateGas[signature] == null) {\n        defineReadOnly(_this7.estimateGas, signature, buildEstimate(_this7, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(function (name) {\n      // Ambiguous names to not get attached as bare names\n      var signatures = uniqueNames[name];\n\n      if (signatures.length > 1) {\n        return;\n      }\n\n      var signature = signatures[0]; // If overwriting a member property that is null, swallow the error\n\n      try {\n        if (_this7[name] == null) {\n          defineReadOnly(_this7, name, _this7[signature]);\n        }\n      } catch (e) {}\n\n      if (_this7.functions[name] == null) {\n        defineReadOnly(_this7.functions, name, _this7.functions[signature]);\n      }\n\n      if (_this7.callStatic[name] == null) {\n        defineReadOnly(_this7.callStatic, name, _this7.callStatic[signature]);\n      }\n\n      if (_this7.populateTransaction[name] == null) {\n        defineReadOnly(_this7.populateTransaction, name, _this7.populateTransaction[signature]);\n      }\n\n      if (_this7.estimateGas[name] == null) {\n        defineReadOnly(_this7.estimateGas, name, _this7.estimateGas[signature]);\n      }\n    });\n  }\n\n  _createClass(BaseContract, [{\n    key: \"deployed\",\n    value: // @TODO: Allow timeout?\n    function deployed() {\n      return this._deployed();\n    }\n  }, {\n    key: \"_deployed\",\n    value: function _deployed(blockTag) {\n      var _this8 = this;\n\n      if (!this._deployedPromise) {\n        // If we were just deployed, we know the transaction we should occur in\n        if (this.deployTransaction) {\n          this._deployedPromise = this.deployTransaction.wait().then(function () {\n            return _this8;\n          });\n        } else {\n          // @TODO: Once we allow a timeout to be passed in, we will wait\n          // up to that many blocks for getCode\n          // Otherwise, poll for our code to be deployed\n          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n            if (code === \"0x\") {\n              logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                contractAddress: _this8.address,\n                operation: \"getDeployed\"\n              });\n            }\n\n            return _this8;\n          });\n        }\n      }\n\n      return this._deployedPromise;\n    } // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n  }, {\n    key: \"fallback\",\n    value: function fallback(overrides) {\n      var _this9 = this;\n\n      if (!this.signer) {\n        logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction(fallback)\"\n        });\n      }\n\n      var tx = shallowCopy(overrides || {});\n      [\"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      tx.to = this.resolvedAddress;\n      return this.deployed().then(function () {\n        return _this9.signer.sendTransaction(tx);\n      });\n    } // Reconnect to a different signer or provider\n\n  }, {\n    key: \"connect\",\n    value: function connect(signerOrProvider) {\n      if (typeof signerOrProvider === \"string\") {\n        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n      }\n\n      var contract = new this.constructor(this.address, this.interface, signerOrProvider);\n\n      if (this.deployTransaction) {\n        defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n      }\n\n      return contract;\n    } // Re-attach to a different on-chain instance of this contract\n\n  }, {\n    key: \"attach\",\n    value: function attach(addressOrName) {\n      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n    }\n  }, {\n    key: \"_normalizeRunningEvent\",\n    value: function _normalizeRunningEvent(runningEvent) {\n      // Already have an instance of this event running; we can re-use it\n      if (this._runningEvents[runningEvent.tag]) {\n        return this._runningEvents[runningEvent.tag];\n      }\n\n      return runningEvent;\n    }\n  }, {\n    key: \"_getRunningEvent\",\n    value: function _getRunningEvent(eventName) {\n      if (typeof eventName === \"string\") {\n        // Listen for \"error\" events (if your contract has an error event, include\n        // the full signature to bypass this special event keyword)\n        if (eventName === \"error\") {\n          return this._normalizeRunningEvent(new ErrorRunningEvent());\n        } // Listen for any event that is registered\n\n\n        if (eventName === \"event\") {\n          return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n        } // Listen for any event\n\n\n        if (eventName === \"*\") {\n          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n        } // Get the event Fragment (throws if ambiguous/unknown event)\n\n\n        var fragment = this.interface.getEvent(eventName);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n      } // We have topics to filter by...\n\n\n      if (eventName.topics && eventName.topics.length > 0) {\n        // Is it a known topichash? (throws if no matching topichash)\n        try {\n          var topic = eventName.topics[0];\n\n          if (typeof topic !== \"string\") {\n            throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n          }\n\n          var _fragment = this.interface.getEvent(topic);\n\n          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, _fragment, eventName.topics));\n        } catch (error) {} // Filter by the unknown topichash\n\n\n        var filter = {\n          address: this.address,\n          topics: eventName.topics\n        };\n        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n      }\n\n      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n  }, {\n    key: \"_checkRunningEvents\",\n    value: function _checkRunningEvents(runningEvent) {\n      if (runningEvent.listenerCount() === 0) {\n        delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it\n\n        var emit = this._wrappedEmits[runningEvent.tag];\n\n        if (emit && runningEvent.filter) {\n          this.provider.off(runningEvent.filter, emit);\n          delete this._wrappedEmits[runningEvent.tag];\n        }\n      }\n    } // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n\n  }, {\n    key: \"_wrapEvent\",\n    value: function _wrapEvent(runningEvent, log, listener) {\n      var _this10 = this;\n\n      var event = deepCopy(log);\n\n      event.removeListener = function () {\n        if (!listener) {\n          return;\n        }\n\n        runningEvent.removeListener(listener);\n\n        _this10._checkRunningEvents(runningEvent);\n      };\n\n      event.getBlock = function () {\n        return _this10.provider.getBlock(log.blockHash);\n      };\n\n      event.getTransaction = function () {\n        return _this10.provider.getTransaction(log.transactionHash);\n      };\n\n      event.getTransactionReceipt = function () {\n        return _this10.provider.getTransactionReceipt(log.transactionHash);\n      }; // This may throw if the topics and data mismatch the signature\n\n\n      runningEvent.prepareEvent(event);\n      return event;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(runningEvent, listener, once) {\n      var _this11 = this;\n\n      if (!this.provider) {\n        logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"once\"\n        });\n      }\n\n      runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)\n\n      this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling\n\n      if (!this._wrappedEmits[runningEvent.tag]) {\n        var wrappedEmit = function wrappedEmit(log) {\n          var event = _this11._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...\n\n\n          if (event.decodeError == null) {\n            try {\n              var args = runningEvent.getEmit(event);\n\n              _this11.emit.apply(_this11, [runningEvent.filter].concat(_toConsumableArray(args)));\n            } catch (error) {\n              event.decodeError = error.error;\n            }\n          } // Always emit \"event\" for fragment-base events\n\n\n          if (runningEvent.filter != null) {\n            _this11.emit(\"event\", event);\n          } // Emit \"error\" if there was an error\n\n\n          if (event.decodeError != null) {\n            _this11.emit(\"error\", event.decodeError, event);\n          }\n        };\n\n        this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like \"error\" do not have a filter\n\n        if (runningEvent.filter != null) {\n          this.provider.on(runningEvent.filter, wrappedEmit);\n        }\n      }\n    }\n  }, {\n    key: \"queryFilter\",\n    value: function queryFilter(event, fromBlockOrBlockhash, toBlock) {\n      var _this12 = this;\n\n      var runningEvent = this._getRunningEvent(event);\n\n      var filter = shallowCopy(runningEvent.filter);\n\n      if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n        if (toBlock != null) {\n          logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n        }\n\n        filter.blockHash = fromBlockOrBlockhash;\n      } else {\n        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n        filter.toBlock = toBlock != null ? toBlock : \"latest\";\n      }\n\n      return this.provider.getLogs(filter).then(function (logs) {\n        return logs.map(function (log) {\n          return _this12._wrapEvent(runningEvent, log, null);\n        });\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, false);\n\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, true);\n\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      if (!this.provider) {\n        return false;\n      }\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      var result = runningEvent.run(args) > 0; // May have drained all the \"once\" events; check for living events\n\n      this._checkRunningEvents(runningEvent);\n\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      var _this13 = this;\n\n      if (!this.provider) {\n        return 0;\n      }\n\n      if (eventName == null) {\n        return Object.keys(this._runningEvents).reduce(function (accum, key) {\n          return accum + _this13._runningEvents[key].listenerCount();\n        }, 0);\n      }\n\n      return this._getRunningEvent(eventName).listenerCount();\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      var _this14 = this;\n\n      if (!this.provider) {\n        return [];\n      }\n\n      if (eventName == null) {\n        var _ret = function () {\n          var result = [];\n\n          for (var tag in _this14._runningEvents) {\n            _this14._runningEvents[tag].listeners().forEach(function (listener) {\n              result.push(listener);\n            });\n          }\n\n          return {\n            v: result\n          };\n        }();\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      return this._getRunningEvent(eventName).listeners();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      if (!this.provider) {\n        return this;\n      }\n\n      if (eventName == null) {\n        for (var tag in this._runningEvents) {\n          var _runningEvent = this._runningEvents[tag];\n\n          _runningEvent.removeAllListeners();\n\n          this._checkRunningEvents(_runningEvent);\n        }\n\n        return this;\n      } // Delete any listeners\n\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      runningEvent.removeAllListeners();\n\n      this._checkRunningEvents(runningEvent);\n\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      if (!this.provider) {\n        return this;\n      }\n\n      var runningEvent = this._getRunningEvent(eventName);\n\n      runningEvent.removeListener(listener);\n\n      this._checkRunningEvents(runningEvent);\n\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"getContractAddress\",\n    value: function getContractAddress(transaction) {\n      return _getContractAddress(transaction);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      if (Interface.isInterface(contractInterface)) {\n        return contractInterface;\n      }\n\n      return new Interface(contractInterface);\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return Indexed.isIndexed(value);\n    }\n  }]);\n\n  return BaseContract;\n}();\nexport var Contract = /*#__PURE__*/function (_BaseContract) {\n  _inherits(Contract, _BaseContract);\n\n  var _super4 = _createSuper(Contract);\n\n  function Contract() {\n    _classCallCheck(this, Contract);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return Contract;\n}(BaseContract);\nexport var ContractFactory = /*#__PURE__*/function () {\n  function ContractFactory(contractInterface, bytecode, signer) {\n    _classCallCheck(this, ContractFactory);\n\n    var bytecodeHex = null;\n\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    } // Make sure it is 0x prefixed\n\n\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    } // Make sure the final result is valid bytecode\n\n\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    } // If we have a signer, make sure it is valid\n\n\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof ContractFactory ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  } // @TODO: Future; rename to populteTransaction?\n\n\n  _createClass(ContractFactory, [{\n    key: \"getDeployTransaction\",\n    value: function getDeployTransaction() {\n      var tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        tx = shallowCopy(args.pop());\n\n        for (var key in tx) {\n          if (!allowedTransactionKeys[key]) {\n            throw new Error(\"unknown transaction override \" + key);\n          }\n        }\n      } // Do not allow these to be overridden in a deployment transaction\n\n\n      [\"data\", \"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      }); // Make sure the call matches the constructor signature\n\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Set the data to the bytecode + the encoded constructor arguments\n\n      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n      return tx;\n    }\n  }, {\n    key: \"deploy\",\n    value: function deploy() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var overrides, params, unsignedTx, tx, address, contract;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n\n                if (args.length === this.interface.deploy.inputs.length + 1) {\n                  overrides = args.pop();\n                } // Make sure the call matches the constructor signature\n\n\n                logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Resolve ENS names and promises in the arguments\n\n                _context8.next = 5;\n                return resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n\n              case 5:\n                params = _context8.sent;\n                params.push(overrides); // Get the deployment transaction (with optional overrides)\n\n                unsignedTx = this.getDeployTransaction.apply(this, _toConsumableArray(params)); // Send the deployment transaction\n\n                _context8.next = 10;\n                return this.signer.sendTransaction(unsignedTx);\n\n              case 10:\n                tx = _context8.sent;\n                address = getStatic(this.constructor, \"getContractAddress\")(tx);\n                contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n                defineReadOnly(contract, \"deployTransaction\", tx);\n                return _context8.abrupt(\"return\", contract);\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(address) {\n      return this.constructor.getContract(address, this.interface, this.signer);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(signer) {\n      return new this.constructor(this.interface, this.bytecode, signer);\n    }\n  }], [{\n    key: \"fromSolidity\",\n    value: function fromSolidity(compilerOutput, signer) {\n      if (compilerOutput == null) {\n        logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n          argument: \"compilerOutput\"\n        });\n      }\n\n      if (typeof compilerOutput === \"string\") {\n        compilerOutput = JSON.parse(compilerOutput);\n      }\n\n      var abi = compilerOutput.abi;\n      var bytecode = null;\n\n      if (compilerOutput.bytecode) {\n        bytecode = compilerOutput.bytecode;\n      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n        bytecode = compilerOutput.evm.bytecode;\n      }\n\n      return new this(abi, bytecode, signer);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      return Contract.getInterface(contractInterface);\n    }\n  }, {\n    key: \"getContractAddress\",\n    value: function getContractAddress(tx) {\n      return _getContractAddress(tx);\n    }\n  }, {\n    key: \"getContract\",\n    value: function getContract(address, contractInterface, signer) {\n      return new Contract(address, contractInterface, signer);\n    }\n  }]);\n\n  return ContractFactory;\n}();","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(new Error(\"invalid value for array\"));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Conmpute the intrinisic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        // Remvoe the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is minded\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tw.wait so the receipt has extra properties\n            const wait = tx.wait.bind(tx);\n            tx.wait = (confirmations) => {\n                return wait(confirmations).then((receipt) => {\n                    receipt.events = receipt.logs.map((log) => {\n                        let event = deepCopy(log);\n                        let parsed = null;\n                        try {\n                            parsed = contract.interface.parseLog(log);\n                        }\n                        catch (e) { }\n                        // Successfully parsed the event log; include it\n                        if (parsed) {\n                            event.args = parsed.args;\n                            event.decode = (data, topics) => {\n                                return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                            };\n                            event.event = parsed.name;\n                            event.eventSignature = parsed.signature;\n                        }\n                        // Useful operations\n                        event.removeListener = () => { return contract.provider; };\n                        event.getBlock = () => {\n                            return contract.provider.getBlock(receipt.blockHash);\n                        };\n                        event.getTransaction = () => {\n                            return contract.provider.getTransaction(receipt.transactionHash);\n                        };\n                        event.getTransactionReceipt = () => {\n                            return Promise.resolve(receipt);\n                        };\n                        return event;\n                    });\n                    return receipt;\n                });\n            };\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        logger.checkNew(new.target, Contract);\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic((new.target), \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[name]) {\n                    uniqueNames[name] = [];\n                }\n                uniqueNames[name].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic((new.target), \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populteTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}