{"ast":null,"code":"import _classCallCheck from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/sam/Desktop/kiwik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Base, WordArray } from './core.js';\nimport { MD5Algo } from './md5.js';\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\n\nexport var EvpKDFAlgo = /*#__PURE__*/function (_Base) {\n  _inherits(EvpKDFAlgo, _Base);\n\n  var _super = _createSuper(EvpKDFAlgo);\n\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  function EvpKDFAlgo(cfg) {\n    var _this;\n\n    _classCallCheck(this, EvpKDFAlgo);\n\n    _this = _super.call(this);\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n\n    _this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: MD5Algo,\n      iterations: 1\n    }, cfg);\n    return _this;\n  }\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n\n\n  _createClass(EvpKDFAlgo, [{\n    key: \"compute\",\n    value: function compute(password, salt) {\n      var block; // Shortcut\n\n      var cfg = this.cfg; // Init hasher\n\n      var hasher = cfg.hasher.create(); // Initial values\n\n      var derivedKey = WordArray.create(); // Shortcuts\n\n      var derivedKeyWords = derivedKey.words;\n      var keySize = cfg.keySize,\n          iterations = cfg.iterations; // Generate key\n\n      while (derivedKeyWords.length < keySize) {\n        if (block) {\n          hasher.update(block);\n        }\n\n        block = hasher.update(password).finalize(salt);\n        hasher.reset(); // Iterations\n\n        for (var i = 1; i < iterations; i += 1) {\n          block = hasher.finalize(block);\n          hasher.reset();\n        }\n\n        derivedKey.concat(block);\n      }\n\n      derivedKey.sigBytes = keySize * 4;\n      return derivedKey;\n    }\n  }]);\n\n  return EvpKDFAlgo;\n}(Base);\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\n\nexport var EvpKDF = function EvpKDF(password, salt, cfg) {\n  return EvpKDFAlgo.create(cfg).compute(password, salt);\n};","map":{"version":3,"sources":["/Users/sam/Desktop/kiwik/node_modules/crypto-es/lib/evpkdf.js"],"names":["Base","WordArray","MD5Algo","EvpKDFAlgo","cfg","Object","assign","keySize","hasher","iterations","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes","EvpKDF","compute"],"mappings":";;;;AAAA,SACEA,IADF,EAEEC,SAFF,QAGO,WAHP;AAIA,SAASC,OAAT,QAAwB,UAAxB;AAEA;AACA;AACA;AACA;;AACA,WAAaC,UAAb;AAAA;;AAAA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,sBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACf;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKA,GAAL,GAAWC,MAAM,CAACC,MAAP,CACT,IAAIN,IAAJ,EADS,EAET;AACEO,MAAAA,OAAO,EAAE,MAAM,EADjB;AAEEC,MAAAA,MAAM,EAAEN,OAFV;AAGEO,MAAAA,UAAU,EAAE;AAHd,KAFS,EAOTL,GAPS,CAAX;AAVe;AAmBhB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5CA;AAAA;AAAA,WA6CE,iBAAQM,QAAR,EAAkBC,IAAlB,EAAwB;AACtB,UAAIC,KAAJ,CADsB,CAGtB;;AACA,UAAQR,GAAR,GAAgB,IAAhB,CAAQA,GAAR,CAJsB,CAMtB;;AACA,UAAMI,MAAM,GAAGJ,GAAG,CAACI,MAAJ,CAAWK,MAAX,EAAf,CAPsB,CAStB;;AACA,UAAMC,UAAU,GAAGb,SAAS,CAACY,MAAV,EAAnB,CAVsB,CAYtB;;AACA,UAAME,eAAe,GAAGD,UAAU,CAACE,KAAnC;AACA,UAAQT,OAAR,GAAgCH,GAAhC,CAAQG,OAAR;AAAA,UAAiBE,UAAjB,GAAgCL,GAAhC,CAAiBK,UAAjB,CAdsB,CAgBtB;;AACA,aAAOM,eAAe,CAACE,MAAhB,GAAyBV,OAAhC,EAAyC;AACvC,YAAIK,KAAJ,EAAW;AACTJ,UAAAA,MAAM,CAACU,MAAP,CAAcN,KAAd;AACD;;AACDA,QAAAA,KAAK,GAAGJ,MAAM,CAACU,MAAP,CAAcR,QAAd,EAAwBS,QAAxB,CAAiCR,IAAjC,CAAR;AACAH,QAAAA,MAAM,CAACY,KAAP,GALuC,CAOvC;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,UAApB,EAAgCY,CAAC,IAAI,CAArC,EAAwC;AACtCT,UAAAA,KAAK,GAAGJ,MAAM,CAACW,QAAP,CAAgBP,KAAhB,CAAR;AACAJ,UAAAA,MAAM,CAACY,KAAP;AACD;;AAEDN,QAAAA,UAAU,CAACQ,MAAX,CAAkBV,KAAlB;AACD;;AACDE,MAAAA,UAAU,CAACS,QAAX,GAAsBhB,OAAO,GAAG,CAAhC;AAEA,aAAOO,UAAP;AACD;AAhFH;;AAAA;AAAA,EAAgCd,IAAhC;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMwB,MAAM,GAAG,SAATA,MAAS,CAACd,QAAD,EAAWC,IAAX,EAAiBP,GAAjB;AAAA,SAAyBD,UAAU,CAACU,MAAX,CAAkBT,GAAlB,EAAuBqB,OAAvB,CAA+Bf,QAA/B,EAAyCC,IAAzC,CAAzB;AAAA,CAAf","sourcesContent":["import {\n  Base,\n  WordArray,\n} from './core.js';\nimport { MD5Algo } from './md5.js';\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\nexport class EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n    this.cfg = Object.assign(\n      new Base(),\n      {\n        keySize: 128 / 32,\n        hasher: MD5Algo,\n        iterations: 1,\n      },\n      cfg,\n    );\n  }\n\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n  compute(password, salt) {\n    let block;\n\n    // Shortcut\n    const { cfg } = this;\n\n    // Init hasher\n    const hasher = cfg.hasher.create();\n\n    // Initial values\n    const derivedKey = WordArray.create();\n\n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const { keySize, iterations } = cfg;\n\n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n\n      // Iterations\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n\n      derivedKey.concat(block);\n    }\n    derivedKey.sigBytes = keySize * 4;\n\n    return derivedKey;\n  }\n}\n\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\nexport const EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);\n"]},"metadata":{},"sourceType":"module"}