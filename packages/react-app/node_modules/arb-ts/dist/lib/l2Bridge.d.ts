import { Signer, BigNumber, providers, ethers } from 'ethers';
import { ArbSys } from './abi/ArbSys';
import { StandardArbERC20 } from './abi/StandardArbERC20';
import { ICustomToken } from './abi/ICustomToken';
import { L2GatewayRouter } from './abi/L2GatewayRouter';
import { ArbRetryableTx } from './abi/ArbRetryableTx';
import { PayableOverrides } from '@ethersproject/contracts';
export interface L2TokenData {
    ERC20?: {
        contract: StandardArbERC20;
        balance: BigNumber;
    };
    CUSTOM?: {
        contract: ICustomToken;
        balance: BigNumber;
    };
}
export interface Tokens {
    [contractAddress: string]: L2TokenData | undefined;
}
/**
 * L2 side only of {@link Bridge}
 */
export declare class L2Bridge {
    l2Signer: Signer;
    arbSys: ArbSys;
    l2GatewayRouter: L2GatewayRouter;
    l2Tokens: Tokens;
    l2Provider: providers.Provider;
    l2EthBalance: BigNumber;
    arbRetryableTx: ArbRetryableTx;
    walletAddressCache?: string;
    constructor(l2GatewayRouterAddress: string, l2Signer: Signer);
    /**
     * Initiate Ether withdrawal (via ArbSys)
     */
    withdrawETH(value: BigNumber, destinationAddress?: string, overrides?: PayableOverrides): Promise<ethers.ContractTransaction>;
    getLatestBlock(): Promise<providers.Block>;
    /**
     * Initiate token withdrawal (via l2ERC20Gateway)
     */
    withdrawERC20(erc20l1Address: string, amount: BigNumber, destinationAddress?: string, overrides?: PayableOverrides): Promise<ethers.ContractTransaction>;
    updateAllL2Tokens(): Promise<Tokens>;
    getAndUpdateL2TokenData(erc20L1Address: string, l2ERC20Address: string): Promise<L2TokenData | undefined>;
    getGatewayAddress(erc20L1Address: string): Promise<string>;
    getERC20L1Address(erc20L2Address: string): Promise<string> | undefined;
    getTxnSubmissionPrice(dataSize: BigNumber | number): Promise<[BigNumber, BigNumber]>;
    getWalletAddress(): Promise<string>;
    getAndUpdateL2EthBalance(): Promise<BigNumber>;
}
