/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface NodeInterfaceInterface extends ethers.utils.Interface {
  functions: {
    'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)': FunctionFragment
    'lookupMessageBatchProof(uint256,uint64)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'estimateRetryableTicket',
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lookupMessageBatchProof',
    values: [BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'estimateRetryableTicket',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'lookupMessageBatchProof',
    data: BytesLike
  ): Result

  events: {}
}

export class NodeInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: NodeInterfaceInterface

  functions: {
    estimateRetryableTicket(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)'(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    lookupMessageBatchProof(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        proof: string[]
        path: BigNumber
        l2Sender: string
        l1Dest: string
        l2Block: BigNumber
        l1Block: BigNumber
        timestamp: BigNumber
        amount: BigNumber
        calldataForL1: string
      }
    >

    'lookupMessageBatchProof(uint256,uint64)'(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        proof: string[]
        path: BigNumber
        l2Sender: string
        l1Dest: string
        l2Block: BigNumber
        l1Block: BigNumber
        timestamp: BigNumber
        amount: BigNumber
        calldataForL1: string
      }
    >
  }

  estimateRetryableTicket(
    sender: string,
    deposit: BigNumberish,
    destAddr: string,
    l2CallValue: BigNumberish,
    maxSubmissionCost: BigNumberish,
    excessFeeRefundAddress: string,
    callValueRefundAddress: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)'(
    sender: string,
    deposit: BigNumberish,
    destAddr: string,
    l2CallValue: BigNumberish,
    maxSubmissionCost: BigNumberish,
    excessFeeRefundAddress: string,
    callValueRefundAddress: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  lookupMessageBatchProof(
    batchNum: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      proof: string[]
      path: BigNumber
      l2Sender: string
      l1Dest: string
      l2Block: BigNumber
      l1Block: BigNumber
      timestamp: BigNumber
      amount: BigNumber
      calldataForL1: string
    }
  >

  'lookupMessageBatchProof(uint256,uint64)'(
    batchNum: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      proof: string[]
      path: BigNumber
      l2Sender: string
      l1Dest: string
      l2Block: BigNumber
      l1Block: BigNumber
      timestamp: BigNumber
      amount: BigNumber
      calldataForL1: string
    }
  >

  callStatic: {
    estimateRetryableTicket(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)'(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    lookupMessageBatchProof(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        proof: string[]
        path: BigNumber
        l2Sender: string
        l1Dest: string
        l2Block: BigNumber
        l1Block: BigNumber
        timestamp: BigNumber
        amount: BigNumber
        calldataForL1: string
      }
    >

    'lookupMessageBatchProof(uint256,uint64)'(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        proof: string[]
        path: BigNumber
        l2Sender: string
        l1Dest: string
        l2Block: BigNumber
        l1Block: BigNumber
        timestamp: BigNumber
        amount: BigNumber
        calldataForL1: string
      }
    >
  }

  filters: {}

  estimateGas: {
    estimateRetryableTicket(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)'(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lookupMessageBatchProof(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'lookupMessageBatchProof(uint256,uint64)'(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    estimateRetryableTicket(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)'(
      sender: string,
      deposit: BigNumberish,
      destAddr: string,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: string,
      callValueRefundAddress: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lookupMessageBatchProof(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lookupMessageBatchProof(uint256,uint64)'(
      batchNum: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
