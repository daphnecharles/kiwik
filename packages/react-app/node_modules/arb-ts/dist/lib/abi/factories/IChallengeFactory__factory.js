"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IChallengeFactory__factory = void 0;
const ethers_1 = require("ethers");
class IChallengeFactory__factory {
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IChallengeFactory__factory = IChallengeFactory__factory;
const _abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: '_resultReceiver',
                type: 'address',
            },
            {
                internalType: 'bytes32',
                name: '_executionHash',
                type: 'bytes32',
            },
            {
                internalType: 'uint256',
                name: '_maxMessageCount',
                type: 'uint256',
            },
            {
                internalType: 'address',
                name: '_asserter',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_challenger',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_asserterTimeLeft',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: '_challengerTimeLeft',
                type: 'uint256',
            },
            {
                internalType: 'contract ISequencerInbox',
                name: '_sequencerBridge',
                type: 'address',
            },
            {
                internalType: 'contract IBridge',
                name: '_delayedBridge',
                type: 'address',
            },
        ],
        name: 'createChallenge',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
];
