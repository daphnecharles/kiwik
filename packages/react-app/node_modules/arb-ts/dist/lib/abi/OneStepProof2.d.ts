/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface OneStepProof2Interface extends ethers.utils.Interface {
  functions: {
    'executeStep(address[2],uint256,bytes32[2],bytes,bytes)': FunctionFragment
    'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)': FunctionFragment
    'parseProof(bytes)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'executeStep',
    values: [
      [string, string],
      BigNumberish,
      [BytesLike, BytesLike],
      BytesLike,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'executeStepDebug',
    values: [
      [string, string],
      BigNumberish,
      [BytesLike, BytesLike],
      BytesLike,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'parseProof',
    values: [BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'executeStep', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'executeStepDebug',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'parseProof', data: BytesLike): Result

  events: {}
}

export class OneStepProof2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: OneStepProof2Interface

  functions: {
    executeStep(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, [string, string, string, string]] & {
        gas: BigNumber
        afterMessagesRead: BigNumber
        fields: [string, string, string, string]
      }
    >

    'executeStep(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, [string, string, string, string]] & {
        gas: BigNumber
        afterMessagesRead: BigNumber
        fields: [string, string, string, string]
      }
    >

    executeStepDebug(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { startMachine: string; afterMachine: string }
    >

    'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { startMachine: string; afterMachine: string }
    >

    parseProof(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>

    'parseProof(bytes)'(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>
  }

  executeStep(
    bridges: [string, string],
    initialMessagesRead: BigNumberish,
    accs: [BytesLike, BytesLike],
    proof: BytesLike,
    bproof: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, [string, string, string, string]] & {
      gas: BigNumber
      afterMessagesRead: BigNumber
      fields: [string, string, string, string]
    }
  >

  'executeStep(address[2],uint256,bytes32[2],bytes,bytes)'(
    bridges: [string, string],
    initialMessagesRead: BigNumberish,
    accs: [BytesLike, BytesLike],
    proof: BytesLike,
    bproof: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, [string, string, string, string]] & {
      gas: BigNumber
      afterMessagesRead: BigNumber
      fields: [string, string, string, string]
    }
  >

  executeStepDebug(
    bridges: [string, string],
    initialMessagesRead: BigNumberish,
    accs: [BytesLike, BytesLike],
    proof: BytesLike,
    bproof: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { startMachine: string; afterMachine: string }>

  'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)'(
    bridges: [string, string],
    initialMessagesRead: BigNumberish,
    accs: [BytesLike, BytesLike],
    proof: BytesLike,
    bproof: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { startMachine: string; afterMachine: string }>

  parseProof(
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string[], string[], string[], string[]]>

  'parseProof(bytes)'(
    proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string[], string[], string[], string[]]>

  callStatic: {
    executeStep(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, [string, string, string, string]] & {
        gas: BigNumber
        afterMessagesRead: BigNumber
        fields: [string, string, string, string]
      }
    >

    'executeStep(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, [string, string, string, string]] & {
        gas: BigNumber
        afterMessagesRead: BigNumber
        fields: [string, string, string, string]
      }
    >

    executeStepDebug(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { startMachine: string; afterMachine: string }
    >

    'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { startMachine: string; afterMachine: string }
    >

    parseProof(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>

    'parseProof(bytes)'(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>
  }

  filters: {}

  estimateGas: {
    executeStep(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'executeStep(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    executeStepDebug(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'parseProof(bytes)'(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    executeStep(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'executeStep(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    executeStepDebug(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)'(
      bridges: [string, string],
      initialMessagesRead: BigNumberish,
      accs: [BytesLike, BytesLike],
      proof: BytesLike,
      bproof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    parseProof(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'parseProof(bytes)'(
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
