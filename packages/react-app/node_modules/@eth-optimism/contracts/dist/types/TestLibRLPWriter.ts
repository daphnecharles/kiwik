/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TestLibRLPWriterInterface extends ethers.utils.Interface {
  functions: {
    "writeAddress(address)": FunctionFragment;
    "writeAddressWithTaintedMemory(address)": FunctionFragment;
    "writeBool(bool)": FunctionFragment;
    "writeBytes(bytes)": FunctionFragment;
    "writeList(bytes[])": FunctionFragment;
    "writeString(string)": FunctionFragment;
    "writeUint(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "writeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeAddressWithTaintedMemory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "writeBool", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "writeBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "writeList",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "writeString", values: [string]): string;
  encodeFunctionData(
    functionFragment: "writeUint",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "writeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeAddressWithTaintedMemory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeUint", data: BytesLike): Result;

  events: {};
}

export interface TestLibRLPWriter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLibRLPWriterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    writeAddress(
      _in: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;

    writeAddressWithTaintedMemory(
      _in: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeBool(
      _in: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;

    writeBytes(
      _in: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;

    writeList(
      _in: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;

    writeString(
      _in: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;

    writeUint(
      _in: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _out: string }>;
  };

  writeAddress(_in: string, overrides?: CallOverrides): Promise<string>;

  writeAddressWithTaintedMemory(
    _in: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeBool(_in: boolean, overrides?: CallOverrides): Promise<string>;

  writeBytes(_in: BytesLike, overrides?: CallOverrides): Promise<string>;

  writeList(_in: BytesLike[], overrides?: CallOverrides): Promise<string>;

  writeString(_in: string, overrides?: CallOverrides): Promise<string>;

  writeUint(_in: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    writeAddress(_in: string, overrides?: CallOverrides): Promise<string>;

    writeAddressWithTaintedMemory(
      _in: string,
      overrides?: CallOverrides
    ): Promise<string>;

    writeBool(_in: boolean, overrides?: CallOverrides): Promise<string>;

    writeBytes(_in: BytesLike, overrides?: CallOverrides): Promise<string>;

    writeList(_in: BytesLike[], overrides?: CallOverrides): Promise<string>;

    writeString(_in: string, overrides?: CallOverrides): Promise<string>;

    writeUint(_in: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    writeAddress(_in: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeAddressWithTaintedMemory(
      _in: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeBool(_in: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    writeBytes(_in: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    writeList(_in: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    writeString(_in: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeUint(_in: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    writeAddress(
      _in: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeAddressWithTaintedMemory(
      _in: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeBool(
      _in: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeBytes(
      _in: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeList(
      _in: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeString(
      _in: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeUint(
      _in: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
