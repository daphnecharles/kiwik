/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OVML2ToL1MessagePasserInterface
  extends ethers.utils.Interface {
  functions: {
    "passMessageToL1(bytes)": FunctionFragment;
    "sentMessages(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "passMessageToL1",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMessages",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "passMessageToL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentMessages",
    data: BytesLike
  ): Result;

  events: {
    "L2ToL1Message(uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L2ToL1Message"): EventFragment;
}

export type L2ToL1MessageEvent = TypedEvent<
  [BigNumber, string, string],
  { _nonce: BigNumber; _sender: string; _data: string }
>;

export type L2ToL1MessageEventFilter = TypedEventFilter<L2ToL1MessageEvent>;

export interface OVML2ToL1MessagePasser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OVML2ToL1MessagePasserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  passMessageToL1(
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "L2ToL1Message(uint256,address,bytes)"(
      _nonce?: null,
      _sender?: null,
      _data?: null
    ): L2ToL1MessageEventFilter;
    L2ToL1Message(
      _nonce?: null,
      _sender?: null,
      _data?: null
    ): L2ToL1MessageEventFilter;
  };

  estimateGas: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
