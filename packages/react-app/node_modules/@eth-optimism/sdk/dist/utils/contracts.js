"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBridgeAdapters = exports.getAllOEContracts = exports.getOEContract = exports.BRIDGE_ADAPTER_DATA = exports.CONTRACT_ADDRESSES = exports.DEFAULT_L2_CONTRACT_ADDRESSES = void 0;
const contracts_1 = require("@eth-optimism/contracts");
const ethers_1 = require("ethers");
const coercion_1 = require("./coercion");
const adapters_1 = require("../adapters");
exports.DEFAULT_L2_CONTRACT_ADDRESSES = {
    L2CrossDomainMessenger: contracts_1.predeploys.L2CrossDomainMessenger,
    L2StandardBridge: contracts_1.predeploys.L2StandardBridge,
    OVM_L1BlockNumber: contracts_1.predeploys.OVM_L1BlockNumber,
    OVM_L2ToL1MessagePasser: contracts_1.predeploys.OVM_L2ToL1MessagePasser,
    OVM_DeployerWhitelist: contracts_1.predeploys.OVM_DeployerWhitelist,
    OVM_ETH: contracts_1.predeploys.OVM_ETH,
    OVM_GasPriceOracle: contracts_1.predeploys.OVM_GasPriceOracle,
    OVM_SequencerFeeVault: contracts_1.predeploys.OVM_SequencerFeeVault,
    WETH: contracts_1.predeploys.WETH9,
};
const NAME_REMAPPING = {
    AddressManager: 'Lib_AddressManager',
    OVM_L1BlockNumber: 'iOVM_L1BlockNumber',
    WETH: 'WETH9',
};
exports.CONTRACT_ADDRESSES = {
    1: {
        l1: {
            AddressManager: '0xdE1FCfB0851916CA5101820A69b13a4E276bd81F',
            L1CrossDomainMessenger: '0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1',
            L1StandardBridge: '0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1',
            StateCommitmentChain: '0xBe5dAb4A2e9cd0F27300dB4aB94BeE3A233AEB19',
            CanonicalTransactionChain: '0x5E4e65926BA27467555EB562121fac00D24E9dD2',
            BondManager: '0xcd626E1328b41fCF24737F137BcD4CE0c32bc8d1',
        },
        l2: exports.DEFAULT_L2_CONTRACT_ADDRESSES,
    },
    42: {
        l1: {
            AddressManager: '0x100Dd3b414Df5BbA2B542864fF94aF8024aFdf3a',
            L1CrossDomainMessenger: '0x4361d0F75A0186C05f971c566dC6bEa5957483fD',
            L1StandardBridge: '0x22F24361D548e5FaAfb36d1437839f080363982B',
            StateCommitmentChain: '0xD7754711773489F31A0602635f3F167826ce53C5',
            CanonicalTransactionChain: '0xf7B88A133202d41Fe5E2Ab22e6309a1A4D50AF74',
            BondManager: '0xc5a603d273E28185c18Ba4d26A0024B2d2F42740',
        },
        l2: exports.DEFAULT_L2_CONTRACT_ADDRESSES,
    },
    5: {
        l1: {
            AddressManager: '0x2F7E3cAC91b5148d336BbffB224B4dC79F09f01D',
            L1CrossDomainMessenger: '0xEcC89b9EDD804850C4F343A278Be902be11AaF42',
            L1StandardBridge: '0x73298186A143a54c20ae98EEE5a025bD5979De02',
            StateCommitmentChain: '0x1afcA918eff169eE20fF8AB6Be75f3E872eE1C1A',
            CanonicalTransactionChain: '0x2ebA8c4EfDB39A8Cd8f9eD65c50ec079f7CEBD81',
            BondManager: '0xE5AE60bD6F8DEe4D0c2BC9268e23B92F1cacC58F',
        },
        l2: exports.DEFAULT_L2_CONTRACT_ADDRESSES,
    },
    31337: {
        l1: {
            AddressManager: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
            L1CrossDomainMessenger: '0x8A791620dd6260079BF849Dc5567aDC3F2FdC318',
            L1StandardBridge: '0x610178dA211FEF7D417bC0e6FeD39F05609AD788',
            StateCommitmentChain: '0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9',
            CanonicalTransactionChain: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
            BondManager: '0x5FC8d32690cc91D4c39d9d3abcBD16989F875707',
        },
        l2: exports.DEFAULT_L2_CONTRACT_ADDRESSES,
    },
};
exports.BRIDGE_ADAPTER_DATA = {
    1: {
        Standard: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[1].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        ETH: {
            Adapter: adapters_1.ETHBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[1].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        BitBTC: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: '0xaBA2c5F108F7E820C049D5Af70B16ac266c8f128',
            l2Bridge: '0x158F513096923fF2d3aab2BcF4478536de6725e2',
        },
        DAI: {
            Adapter: adapters_1.DAIBridgeAdapter,
            l1Bridge: '0x10E6593CDda8c58a1d0f14C5164B376352a55f2F',
            l2Bridge: '0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65',
        },
    },
    42: {
        Standard: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[42].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        ETH: {
            Adapter: adapters_1.ETHBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[42].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        BitBTC: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: '0x0b651A42F32069d62d5ECf4f2a7e5Bd3E9438746',
            l2Bridge: '0x0CFb46528a7002a7D8877a5F7a69b9AaF1A9058e',
        },
        USX: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: '0x40E862341b2416345F02c41Ac70df08525150dC7',
            l2Bridge: '0xB4d37826b14Cd3CB7257A2A5094507d701fe715f',
        },
        DAI: {
            Adapter: adapters_1.DAIBridgeAdapter,
            l1Bridge: '0xb415e822C4983ecD6B1c1596e8a5f976cf6CD9e3',
            l2Bridge: '0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65',
        },
    },
    5: {
        Standard: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[5].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        ETH: {
            Adapter: adapters_1.ETHBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[5].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
    },
    31337: {
        Standard: {
            Adapter: adapters_1.StandardBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[31337].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
        ETH: {
            Adapter: adapters_1.ETHBridgeAdapter,
            l1Bridge: exports.CONTRACT_ADDRESSES[31337].l1.L1StandardBridge,
            l2Bridge: contracts_1.predeploys.L2StandardBridge,
        },
    },
};
const getOEContract = (contractName, l1ChainId, opts = {}) => {
    const addresses = exports.CONTRACT_ADDRESSES[l1ChainId];
    if (addresses === undefined && opts.address === undefined) {
        throw new Error(`cannot get contract ${contractName} for unknown L1 chain ID ${l1ChainId}, you must provide an address`);
    }
    return new ethers_1.Contract(coercion_1.toAddress(opts.address || addresses.l1[contractName] || addresses.l2[contractName]), contracts_1.getContractInterface(NAME_REMAPPING[contractName] || contractName), opts.signerOrProvider);
};
exports.getOEContract = getOEContract;
const getAllOEContracts = (l1ChainId, opts = {}) => {
    var _a, _b, _c, _d;
    const addresses = exports.CONTRACT_ADDRESSES[l1ChainId] || {
        l1: {
            AddressManager: undefined,
            L1CrossDomainMessenger: undefined,
            L1StandardBridge: undefined,
            StateCommitmentChain: undefined,
            CanonicalTransactionChain: undefined,
            BondManager: undefined,
        },
        l2: exports.DEFAULT_L2_CONTRACT_ADDRESSES,
    };
    const l1Contracts = {};
    for (const [contractName, contractAddress] of Object.entries(addresses.l1)) {
        l1Contracts[contractName] = exports.getOEContract(contractName, l1ChainId, {
            address: ((_b = (_a = opts.overrides) === null || _a === void 0 ? void 0 : _a.l1) === null || _b === void 0 ? void 0 : _b[contractName]) || contractAddress,
            signerOrProvider: opts.l1SignerOrProvider,
        });
    }
    const l2Contracts = {};
    for (const [contractName, contractAddress] of Object.entries(addresses.l2)) {
        l2Contracts[contractName] = exports.getOEContract(contractName, l1ChainId, {
            address: ((_d = (_c = opts.overrides) === null || _c === void 0 ? void 0 : _c.l2) === null || _d === void 0 ? void 0 : _d[contractName]) || contractAddress,
            signerOrProvider: opts.l2SignerOrProvider,
        });
    }
    return {
        l1: l1Contracts,
        l2: l2Contracts,
    };
};
exports.getAllOEContracts = getAllOEContracts;
const getBridgeAdapters = (l1ChainId, messenger, opts) => {
    const adapters = {};
    for (const [bridgeName, bridgeData] of Object.entries(Object.assign(Object.assign({}, (exports.BRIDGE_ADAPTER_DATA[l1ChainId] || {})), ((opts === null || opts === void 0 ? void 0 : opts.overrides) || {})))) {
        adapters[bridgeName] = new bridgeData.Adapter({
            messenger,
            l1Bridge: bridgeData.l1Bridge,
            l2Bridge: bridgeData.l2Bridge,
        });
    }
    return adapters;
};
exports.getBridgeAdapters = getBridgeAdapters;
//# sourceMappingURL=contracts.js.map